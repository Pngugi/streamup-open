function close_popup(e){for(var t=0;t<popups.length;t++)if(e==popups[t])return Array.remove(popups,t),document.getElementById(e).style.display="none",void calculate_popups()}function display_popups(){var e=220,t=0;for(t;total_popups>t;t++)if(void 0!=popups[t]){var n=document.getElementById(popups[t]);n.style.right=e+"px",e+=320,n.style.display="block"}for(var o=t;o<popups.length;o++){var n=document.getElementById(popups[o]);n.style.display="none"}}function register_popup(e,t){for(var n=0;n<popups.length;n++)if(e==popups[n])return Array.remove(popups,n),popups.unshift(e),void calculate_popups();var o='<div class="popup-box chat-popup" id="'+e+'">';o+='<div style="background:#ddd;color:#fff;" class="header">Group<div class="close_btn">&nbsp;</div></div>',o+=' <div class="toggle_chat">',o+='<div class="message_box"></div>',o+='<textarea style="background:white;margin-top:180px;" id="chat" class="form-control" rows="3" required="required"></textarea>',document.getElementsByTagName("body")[0].innerHTML=document.getElementsByTagName("body")[0].innerHTML+o,popups.unshift(e),calculate_popups()}function calculate_popups(){var e=window.innerWidth;540>e?total_popups=0:(e-=200,total_popups=parseInt(e/320)),display_popups()}!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["angular-file-upload"]=t():e["angular-file-upload"]=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=o(n(1)),i=o(n(2)),s=o(n(3)),a=o(n(4)),u=o(n(5)),c=o(n(6)),l=o(n(7)),f=o(n(8)),p=o(n(9)),d=o(n(10)),m=o(n(11)),v=o(n(12));angular.module(r.name,[]).value("fileUploaderOptions",i).factory("FileUploader",s).factory("FileLikeObject",a).factory("FileItem",u).factory("FileDirective",c).factory("FileSelect",l).factory("FileDrop",f).factory("FileOver",p).directive("nvFileSelect",d).directive("nvFileDrop",m).directive("nvFileOver",v).run(["FileUploader","FileLikeObject","FileItem","FileDirective","FileSelect","FileDrop","FileOver",function(e,t,n,o,r,i,s){e.FileLikeObject=t,e.FileItem=n,e.FileDirective=o,e.FileSelect=r,e.FileDrop=i,e.FileOver=s}])},function(e,t){e.exports={name:"angularFileUpload"}},function(e,t){"use strict";e.exports={url:"/",alias:"file",headers:{authorization:"Bearer 8EuqcMNkF2yP50Dicpv9hLRRp7WOSabPlCu22liY"},queue:[],progress:0,autoUpload:!1,removeAfterUpload:!1,method:"POST",filters:[],formData:[],queueLimit:Number.MAX_VALUE,withCredentials:!1}},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.extend,u=angular.forEach,c=angular.isObject,l=angular.isNumber,f=angular.isDefined,p=angular.isArray,d=angular.element;e.exports=function(e,t,n,o,m,v){var g=o.File,h=o.FormData,y=function(){function o(t){i(this,o);var n=s(e);a(this,n,t,{isUploading:!1,_nextIndex:0,_failFilterIndex:-1,_directives:{select:[],drop:[],over:[]}}),this.filters.unshift({name:"queueLimit",fn:this._queueLimitFilter}),this.filters.unshift({name:"folder",fn:this._folderFilter})}return r(o,{addToQueue:{value:function(e,t,n){var o=this,r=this.isArrayLikeObject(e)?e:[e],i=this._getFilters(n),s=this.queue.length,a=[];u(r,function(e){var n=new m(e);if(o._isValidFile(n,i,t)){var r=new v(o,e,t);a.push(r),o.queue.push(r),o._onAfterAddingFile(r)}else{var s=i[o._failFilterIndex];o._onWhenAddingFileFailed(n,s,t)}}),this.queue.length!==s&&(this._onAfterAddingAll(a),this.progress=this._getTotalProgress()),this._render(),this.autoUpload&&this.uploadAll()}},removeFromQueue:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t];n.isUploading&&n.cancel(),this.queue.splice(t,1),n._destroy(),this.progress=this._getTotalProgress()}},clearQueue:{value:function(){for(;this.queue.length;)this.queue[0].remove();this.progress=0}},uploadItem:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t],o=this.isHTML5?"_xhrTransport":"_iframeTransport";n._prepareToUploading(),this.isUploading||(this.isUploading=!0,this[o](n))}},cancelItem:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t],o=this.isHTML5?"_xhr":"_form";n&&n.isUploading&&n[o].abort()}},uploadAll:{value:function(){var e=this.getNotUploadedItems().filter(function(e){return!e.isUploading});e.length&&(u(e,function(e){return e._prepareToUploading()}),e[0].upload())}},cancelAll:{value:function(){var e=this.getNotUploadedItems();u(e,function(e){return e.cancel()})}},isFile:{value:function(e){return this.constructor.isFile(e)}},isFileLikeObject:{value:function(e){return this.constructor.isFileLikeObject(e)}},isArrayLikeObject:{value:function(e){return this.constructor.isArrayLikeObject(e)}},getIndexOfItem:{value:function(e){return l(e)?e:this.queue.indexOf(e)}},getNotUploadedItems:{value:function(){return this.queue.filter(function(e){return!e.isUploaded})}},getReadyItems:{value:function(){return this.queue.filter(function(e){return e.isReady&&!e.isUploading}).sort(function(e,t){return e.index-t.index})}},destroy:{value:function(){var e=this;u(this._directives,function(t){u(e._directives[t],function(e){e.destroy()})})}},onAfterAddingAll:{value:function(e){}},onAfterAddingFile:{value:function(e){}},onWhenAddingFileFailed:{value:function(e,t,n){}},onBeforeUploadItem:{value:function(e){}},onProgressItem:{value:function(e,t){}},onProgressAll:{value:function(e){}},onSuccessItem:{value:function(e,t,n,o){}},onErrorItem:{value:function(e,t,n,o){}},onCancelItem:{value:function(e,t,n,o){}},onCompleteItem:{value:function(e,t,n,o){}},onCompleteAll:{value:function(){}},_getTotalProgress:{value:function(e){if(this.removeAfterUpload)return e||0;var t=this.getNotUploadedItems().length,n=t?this.queue.length-t:this.queue.length,o=100/this.queue.length,r=(e||0)*o/100;return Math.round(n*o+r)}},_getFilters:{value:function(e){if(!e)return this.filters;if(p(e))return e;var t=e.match(/[^\s,]+/g);return this.filters.filter(function(e){return-1!==t.indexOf(e.name)})}},_render:{value:function(){t.$$phase||t.$apply()}},_folderFilter:{value:function(e){return!(!e.size&&!e.type)}},_queueLimitFilter:{value:function(){return this.queue.length<this.queueLimit}},_isValidFile:{value:function(e,t,n){var o=this;return this._failFilterIndex=-1,t.length?t.every(function(t){return o._failFilterIndex++,t.fn.call(o,e,n)}):!0}},_isSuccessCode:{value:function(e){return e>=200&&300>e||304===e}},_transformResponse:{value:function(e,t){var o=this._headersGetter(t);return u(n.defaults.transformResponse,function(t){e=t(e,o)}),e}},_parseHeaders:{value:function(e){var t,n,o,r={};return e?(u(e.split("\n"),function(e){o=e.indexOf(":"),t=e.slice(0,o).trim().toLowerCase(),n=e.slice(o+1).trim(),t&&(r[t]=r[t]?r[t]+", "+n:n)}),r):r}},_headersGetter:{value:function(e){return function(t){return t?e[t.toLowerCase()]||null:e}}},_xhrTransport:{value:function(e){var t=this,n=e._xhr=new XMLHttpRequest,o=new h;if(this._onBeforeUploadItem(e),u(e.formData,function(e){u(e,function(e,t){o.append(t,e)})}),"number"!=typeof e._file.size)throw new TypeError("The file specified is no longer valid");o.append(e.alias,e._file,e.file.name),n.upload.onprogress=function(n){var o=Math.round(n.lengthComputable?100*n.loaded/n.total:0);t._onProgressItem(e,o)},n.onload=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o),i=t._isSuccessCode(n.status)?"Success":"Error",s="_on"+i+"Item";t[s](e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.onerror=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o);t._onErrorItem(e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.onabort=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o);t._onCancelItem(e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.open(e.method,e.url,!0),n.withCredentials=e.withCredentials,u(e.headers,function(e,t){n.setRequestHeader(t,e)}),n.send(o),this._render()}},_iframeTransport:{value:function(e){var t=this,n=d('<form style="display: none;" />'),o=d('<iframe name="iframeTransport'+Date.now()+'">'),r=e._input;e._form&&e._form.replaceWith(r),e._form=n,this._onBeforeUploadItem(e),r.prop("name",e.alias),u(e.formData,function(e){u(e,function(e,t){var o=d('<input type="hidden" name="'+t+'" />');o.val(e),n.append(o)})}),n.prop({action:e.url,method:"POST",target:o.prop("name"),enctype:"multipart/form-data",encoding:"multipart/form-data"}),o.bind("load",function(){var n="",r=200;try{n=o[0].contentDocument.body.innerHTML}catch(i){r=500}var s={response:n,status:r,dummy:!0},a={},u=t._transformResponse(s.response,a);t._onSuccessItem(e,u,s.status,a),t._onCompleteItem(e,u,s.status,a)}),n.abort=function(){var i,s={status:0,dummy:!0},a={};o.unbind("load").prop("src","javascript:false;"),n.replaceWith(r),t._onCancelItem(e,i,s.status,a),t._onCompleteItem(e,i,s.status,a)},r.after(n),n.append(r).append(o),n[0].submit(),this._render()}},_onWhenAddingFileFailed:{value:function(e,t,n){this.onWhenAddingFileFailed(e,t,n)}},_onAfterAddingFile:{value:function(e){this.onAfterAddingFile(e)}},_onAfterAddingAll:{value:function(e){this.onAfterAddingAll(e)}},_onBeforeUploadItem:{value:function(e){e._onBeforeUpload(),this.onBeforeUploadItem(e)}},_onProgressItem:{value:function(e,t){var n=this._getTotalProgress(t);this.progress=n,e._onProgress(t),this.onProgressItem(e,t),this.onProgressAll(n),this._render()}},_onSuccessItem:{value:function(e,t,n,o){e._onSuccess(t,n,o),this.onSuccessItem(e,t,n,o)}},_onErrorItem:{value:function(e,t,n,o){e._onError(t,n,o),this.onErrorItem(e,t,n,o)}},_onCancelItem:{value:function(e,t,n,o){e._onCancel(t,n,o),this.onCancelItem(e,t,n,o)}},_onCompleteItem:{value:function(e,t,n,o){e._onComplete(t,n,o),this.onCompleteItem(e,t,n,o);var r=this.getReadyItems()[0];return this.isUploading=!1,f(r)?void r.upload():(this.onCompleteAll(),this.progress=this._getTotalProgress(),void this._render())}}},{isFile:{value:function(e){return g&&e instanceof g}},isFileLikeObject:{value:function(e){return e instanceof m}},isArrayLikeObject:{value:function(e){return c(e)&&"length"in e}},inherit:{value:function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.super_=t}}}),o}();return y.prototype.isHTML5=!(!g||!h),y.isHTML5=y.prototype.isHTML5,y},e.exports.$inject=["fileUploaderOptions","$rootScope","$http","$window","FileLikeObject","FileItem"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.isElement,u=angular.isString;e.exports=function(){var e=function(){function e(t){i(this,e);var n=a(t),o=n?t.value:t,r=u(o)?"FakePath":"Object",s="_createFrom"+r;this[s](o)}return r(e,{_createFromFakePath:{value:function(e){this.lastModifiedDate=null,this.size=null,this.type="like/"+e.slice(e.lastIndexOf(".")+1).toLowerCase(),this.name=e.slice(e.lastIndexOf("/")+e.lastIndexOf("\\")+2)}},_createFromObject:{value:function(e){this.lastModifiedDate=s(e.lastModifiedDate),this.size=e.size,this.type=e.type,this.name=e.name}}}),e}();return e},e.exports.$inject=[]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.extend,u=angular.element,c=angular.isElement;e.exports=function(e,t){var n=function(){function n(e,o,r){i(this,n);var l=c(o),f=l?u(o):null,p=l?null:o;a(this,{url:e.url,alias:e.alias,headers:s(e.headers),formData:s(e.formData),removeAfterUpload:e.removeAfterUpload,withCredentials:e.withCredentials,method:e.method},r,{uploader:e,file:new t(o),isReady:!1,isUploading:!1,isUploaded:!1,isSuccess:!1,isCancel:!1,isError:!1,progress:0,index:null,_file:p,_input:f}),f&&this._replaceNode(f)}return r(n,{upload:{value:function(){try{this.uploader.uploadItem(this)}catch(e){this.uploader._onCompleteItem(this,"",0,[]),this.uploader._onErrorItem(this,"",0,[])}}},cancel:{value:function(){this.uploader.cancelItem(this)}},remove:{value:function(){this.uploader.removeFromQueue(this)}},onBeforeUpload:{value:function(){}},onProgress:{value:function(e){}},onSuccess:{value:function(e,t,n){}},onError:{value:function(e,t,n){}},onCancel:{value:function(e,t,n){}},onComplete:{value:function(e,t,n){}},_onBeforeUpload:{value:function(){this.isReady=!0,this.isUploading=!0,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!1,this.isError=!1,this.progress=0,this.onBeforeUpload()}},_onProgress:{value:function(e){this.progress=e,this.onProgress(e)}},_onSuccess:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!0,this.isCancel=!1,this.isError=!1,this.progress=100,this.index=null,this.onSuccess(e,t,n)}},_onError:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!1,this.isCancel=!1,this.isError=!0,this.progress=0,this.index=null,this.onError(e,t,n)}},_onCancel:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!0,this.isError=!1,this.progress=0,this.index=null,this.onCancel(e,t,n)}},_onComplete:{value:function(e,t,n){this.onComplete(e,t,n),this.removeAfterUpload&&this.remove()}},_destroy:{value:function(){this._input&&this._input.remove(),this._form&&this._form.remove(),delete this._form,delete this._input}},_prepareToUploading:{value:function(){this.index=this.index||++this.uploader._nextIndex,this.isReady=!0}},_replaceNode:{value:function(t){var n=e(t.clone())(t.scope());n.prop("value",null),t.css("display","none"),t.after(n)}}}),n}();return n},e.exports.$inject=["$compile","FileLikeObject"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.extend);e.exports=function(){var e=function(){function e(t){i(this,e),s(this,t),this.uploader._directives[this.prop].push(this),this._saveLinks(),this.bind()}return r(e,{bind:{value:function(){for(var e in this.events){var t=this.events[e];this.element.bind(e,this[t])}}},unbind:{value:function(){for(var e in this.events)this.element.unbind(e,this.events[e])}},destroy:{value:function(){var e=this.uploader._directives[this.prop].indexOf(this);this.uploader._directives[this.prop].splice(e,1),this.unbind()}},_saveLinks:{value:function(){for(var e in this.events){var t=this.events[e];this[t]=this[t].bind(this)}}}}),e}();return e.prototype.events={},e},e.exports.$inject=[]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function c(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:c(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend);e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy",change:"onChange"},prop:"select"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n),this.uploader.isHTML5||this.element.removeAttr("multiple"),this.element.prop("value",null)}return s(t,e),r(t,{getOptions:{value:function(){}},getFilters:{value:function(){}},isEmptyAfterSelection:{value:function(){return!!this.element.attr("multiple")}},onChange:{value:function(){var e=this.uploader.isHTML5?this.element[0].files:this.element[0],t=this.getOptions(),n=this.getFilters();this.uploader.isHTML5||this.destroy(),this.uploader.addToQueue(e,t,n),this.isEmptyAfterSelection()&&(this.element.prop("value",null),this.element.replaceWith(this.element=this.element.clone(!0)))}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function l(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:l(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend),c=angular.forEach;e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy",drop:"onDrop",dragover:"onDragOver",dragleave:"onDragLeave"},prop:"drop"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n)}return s(t,e),r(t,{getOptions:{value:function(){}},getFilters:{value:function(){}},onDrop:{value:function(e){var t=this._getTransfer(e);if(t){var n=this.getOptions(),o=this.getFilters();this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this),this.uploader.addToQueue(t.files,n,o)}}},onDragOver:{value:function(e){var t=this._getTransfer(e);this._haveFiles(t.types)&&(t.dropEffect="copy",this._preventAndStop(e),c(this.uploader._directives.over,this._addOverClass,this))}},onDragLeave:{value:function(e){e.currentTarget!==this.element[0]&&(this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this))}},_getTransfer:{value:function(e){return e.dataTransfer?e.dataTransfer:e.originalEvent.dataTransfer}},_preventAndStop:{value:function(e){e.preventDefault(),e.stopPropagation()}},_haveFiles:{value:function(e){return e?e.indexOf?-1!==e.indexOf("Files"):e.contains?e.contains("Files"):!1:!1}},_addOverClass:{value:function(e){e.addOverClass()}},_removeOverClass:{value:function(e){e.removeOverClass()}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function c(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:c(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend);e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy"},prop:"over",overClass:"nv-file-over"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n)}return s(t,e),r(t,{addOverClass:{value:function(){this.element.addClass(this.getOverClass())}},removeOverClass:{value:function(){this.element.removeClass(this.getOverClass())}},getOverClass:{value:function(){return this.overClass}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');var a=new n({uploader:s,element:r});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}},e.exports.$inject=["$parse","FileUploader","FileSelect"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');if(s.isHTML5){var a=new n({uploader:s,element:r});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}}},e.exports.$inject=["$parse","FileUploader","FileDrop"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t){return{link:function(n,o,r){var i=n.$eval(r.uploader);if(!(i instanceof e))throw new TypeError('"Uploader" must be an instance of FileUploader');var s=new t({uploader:i,element:o});s.getOverClass=function(){return r.overClass||s.overClass}}}},e.exports.$inject=["FileUploader","FileOver"]}])}),angular.module("AuthManager",[]).service("SessionService",[function(){var e=!1;this.setUserAuthenticated=function(t){e=t},this.getUserAuthenticated=function(){return e}}]);var sync=angular.module("sync",["ngRoute","angularFileUpload","ui.bootstrap","ui.router","infinite-scroll","ngMaterial","ngMessages","material.svgAssetsCache","ng-mfb","pdf","ngContextMenu","angular-loading-bar","ngFileSaver","AuthManager","ngDialog"]),Logger=angular.module("Logger",[]);Logger.run(["$rootScope",function(e){e.endPoint="http://syncme.com:8000"}]),window.routes={"/Files":{url:"/Files",templateUrl:"views/files.html",controller:"FilesController",requireLogin:!0},preview:{url:"/!/:preview/:extension/:of/:user",templateUrl:"views/filePreview.html",controller:"previewController"},"/Groups":{url:"/Groups",templateUrl:"views/groups.html",controller:"GroupController",requireLogin:!0}},sync.run(["$rootScope","$log",function(e,t){e.endPoint="http://syncme.com:8000",e.$on("$routeChangeStart",function(e,t,n){for(var o in window.routes)-1!=t.indexOf(o)&&window.routes[o].requireLogin&&!SessionService.getUserAuthenticated()&&(alert("You need to be authenticated to see this page!"),e.preventDefault())})}]),sync.provider({$exceptionHandler:function(){var e=function(e,t){console.log(e)};this.$get=function(){return e}}}),sync.config(["$sceProvider","$httpProvider","$mdThemingProvider","cfpLoadingBarProvider",function(e,t,n,o){delete t.defaults.headers.common["X-Requested-With"],t.defaults.headers.post.Accept="application/json, text/javascript",t.defaults.headers.post.Accept="application/json, text/javascript",t.defaults.headers.common.authorization="Bearer 8EuqcMNkF2yP50Dicpv9hLRRp7WOSabPlCu22liY",e.enabled(!1),o.includeBar=!1}]),sync.config(["$stateProvider","$urlRouterProvider",function(e,t,n){for(var o in window.routes)e.state(o,window.routes[o]);t.otherwise("/Files")}]),function(e,t,n){"use strict";var o=t.module("ng-mfb",[]);o.run(["$templateCache",function(e){e.put("ng-mfb-menu-default.tpl.html",'<ul class="mfb-component--{{position}} mfb-{{effect}}"    data-mfb-toggle="{{togglingMethod}}" data-mfb-state="{{menuState}}">  <li class="mfb-component__wrap">    <a ng-click="clicked()" ng-mouseenter="hovered()" ng-mouseleave="hovered()"       ng-attr-data-mfb-label="{{label}}" class="mfb-component__button--main">     <i class="mfb-component__main-icon--resting {{resting}}"></i>     <i class="mfb-component__main-icon--active {{active}}"></i>    </a>    <ul class="mfb-component__list" ng-transclude>    </ul></li></ul>'),e.put("ng-mfb-menu-md.tpl.html",'<ul class="mfb-component--{{position}} mfb-{{effect}}"    data-mfb-toggle="{{togglingMethod}}" data-mfb-state="{{menuState}}">  <li class="mfb-component__wrap">    <a ng-click="clicked()" ng-mouseenter="hovered()" ng-mouseleave="hovered()"       style="background: transparent; box-shadow: none;"       ng-attr-data-mfb-label="{{label}}" class="mfb-component__button--main">     <md-button class="md-fab md-accent" aria-label={{label}} style="position:relative; margin: 0; padding:0;">       <md-icon style="left: 0; position: relative;" md-svg-icon="{{resting}}"         class="mfb-component__main-icon--resting"></md-icon>       <md-icon style="position:relative;" md-svg-icon="{{active}}"         class="mfb-component__main-icon--active"></md-icon>     </md-button>    </a>    <ul class="mfb-component__list" ng-transclude>    </ul></li></ul>'),e.put("ng-mfb-button-default.tpl.html",'<li>  <a data-mfb-label="{{label}}" class="mfb-component__button--child">    <i class="mfb-component__child-icon {{icon}}">    </i>  </a></li>'),e.put("ng-mfb-button-md.tpl.html",'<li>  <a href="" data-mfb-label="{{label}}" class="mfb-component__button--child"      style="background: transparent; box-shadow: none;">     <md-button style="margin: 0;" class="md-fab md-accent" aria-label={{label}}>       <md-icon md-svg-src="img/icons/android.svg"></md-icon>       <md-icon md-svg-icon="{{icon}}"></md-icon>     </md-button>  </a></li>')}]),o.directive("mfbButtonClose",function(){return{restrict:"A",require:"^mfbMenu",link:function(e,t,n,o){t.bind("click",function(){o.close()})}}}),o.directive("mfbMenu",["$timeout",function(t){return{restrict:"EA",transclude:!0,replace:!0,scope:{position:"@",effect:"@",label:"@",resting:"@restingIcon",active:"@activeIcon",mainAction:"&",menuState:"=?",togglingMethod:"@"},templateUrl:function(e,t){return t.templateUrl||"ng-mfb-menu-default.tpl.html"},controller:["$scope","$attrs",function(n,o){function r(){n.mainAction&&n.mainAction(),l()||s()}function i(){l()}function s(){n.menuState===p?u():a()}function a(){n.menuState=p}function u(){n.menuState=d}function c(){return e.Modernizr&&Modernizr.touch}function l(){return"hover"===n.togglingMethod}function f(){n.$apply(function(){n.togglingMethod="click"})}var p="open",d="closed";this.toggle=s,this.close=u,this.open=a,n.clicked=r,n.hovered=i,n.menuState||(n.menuState=d),c()&&l()&&t(f),o.$observe("menuState",function(){n.currentState=n.menuState})}]}}]),o.directive("mfbButton",[function(){return{require:"^mfbMenu",restrict:"EA",transclude:!0,replace:!0,scope:{icon:"@",label:"@"},templateUrl:function(e,t){return t.templateUrl||"ng-mfb-button-default.tpl.html"}}}])}(window,angular),sync.directive("leftMenu",function(){return{restrict:"AE",scope:{data:"=",user:"=",type:"="},templateUrl:"directives/leftMenu.html"}}),sync.directive("feeds",function(){return{restrict:"AE",scope:{posts:"=",replies:"=",createPost:"="},templateUrl:"directives/middleContent.html"}}),sync.directive("header",function(){return{restrict:"AE",scope:{data:"=",user:"=",type:"="},templateUrl:"./directives/header.html"}}),sync.directive("keybinding",function(){return{restrict:"E",scope:{invoke:"&"},link:function(e,t,n){Mousetrap.bind(n.on,e.invoke)}}}),Logger.controller("loginController",["$scope","$http","$rootScope","$window",function(e,t,n,o){var r={"crededential-not-found":"Credentials not found!",success:"logging in..."};e.login=function(e){function i(){o.location.href="/notVerified"}function s(){o.location.href="/sync"}$(".login-form-main-message").addClass("show success").html(r.success),t.post(n.endPoint+"/sessions",e).success(function(e){console.log(e),"1"===e?s():"0"===e?$(".login-form-main-message").addClass("show error").html(r["crededential-not-found"]):"notVerified"===e&&i()}).error(function(e){console.log("error:"+e)})}}]),Logger.controller("RegisterController",["$scope","$rootScope","$http",function(e,t,n){var o={"password-notMatch":"password do not match",SignUpInProgress:"Wait we are setting up your account."};e.register=function(e){function t(){$(".register-form-main-message").removeClass("show error")}function n(){window.location="/checkEmail"}if($(".register-form-main-message").addClass("show success").html(o.SignUpInProgress),$("#password").val()!=$("#password-confirm").val())return $(".register-form-main-message").addClass("show error").html(o["password-notMatch"]),void setTimeout(t,2e3);var r=$("#username").val(),i=$("#email").val();jQuery.post("/sessions",{username:r,password:e.password,email:i,option:e.option,phone:e.phone},function(e,t,o){1==e&&n()}).error(function(e){})}}]),Logger.directive("uniqueUsername",["isUsernameAvailable",function(e){return{restrict:"A",require:"ngModel",link:function(t,n,o,r){r.$asyncValidators.uniqueUsername=e}}}]),Logger.factory("isUsernameAvailable",["$q","$http","$rootScope",function(e,t,n){var o={"btn-loading":'<i class="fa fa-spinner fa-pulse"></i>',"btn-success":'<i class="fa fa-check"></i>',"btn-error":'<i class="fa fa-remove"></i>',"msg-success":"All Good! Redirecting...","msg-username-available":"good username available!","msg-username-taken":"oops username taken","msg-email-taken":"email taken","msg-your-phone-suck":"your phone is not valid",useAJAX:!0};return function(r){var i=e.defer();return t.get(n.endPoint+"/api/v1/users?username="+r+"&access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn").success(function(e){function t(){$(".register-form-main-message").removeClass("show success")}function n(){$(".register-form-main-message").removeClass("show error")}"available"==e?($(".register-form-main-message").addClass("show success").html(o["msg-username-available"]),setTimeout(t,2e3)):"taken"==e&&($(".register-form-main-message").addClass("show error").html(o["msg-username-taken"]),setTimeout(n,2e3)),i.reject()}).error(function(e){i.resolve()}),i.promise}}]),Logger.directive("uniqueEmail",["isEmailAvailable",function(e){return{restrict:"A",require:"ngModel",link:function(t,n,o,r){r.$asyncValidators.uniqueEmail=e}}}]),Logger.factory("isEmailAvailable",["$q","$http","$rootScope",function(e,t,n){var o={"btn-loading":'<i class="fa fa-spinner fa-pulse"></i>',"btn-success":'<i class="fa fa-check"></i>',"btn-error":'<i class="fa fa-remove"></i>',"msg-success":"All Good! Redirecting...","msg-username-available":"good username available!","msg-username-taken":"oops username taken","msg-email-taken":"email taken","msg-email-available":"email available","msg-your-phone-suck":"your phone is not valid",useAJAX:!0};return function(r){var i=e.defer();return t.get(n.endPoint+"/api/v1/users?email="+r+"&access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn").success(function(e){function t(){$(".register-form-main-message").removeClass("show success")}function n(){$(".register-form-main-message").removeClass("show error")}"email-available"==e?($(".register-form-main-message").addClass("show success").html(o["msg-email-available"]),setTimeout(t,2e3)):"email-taken"==e&&($(".register-form-main-message").addClass("show error").html(o["msg-email-taken"]),setTimeout(n,2e3)),i.reject();
}).error(function(){i.resolve()}),i.promise}}]),sync.service("Fetcher",["$http","$q","$rootScope",function(e,t,n){this.fetch=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/?+query=query+FetchUsers"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}}]),sync.service("Files",["$http","$q","$rootScope",function(e,t,n){return this.getGroupFiles=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/groups/"+o+"/groupfiles").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.single=function(o){var r=t.defer();return e.get(n.endPoint+"/preview/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getBoxFiles=function(){var o=1,r=t.defer();return e.get(n.endPoint+"/api/v1/files/"+o+"/boxfiles").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getMimeType=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/files/mimeType/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.downloadFile=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/files/download/"+o+"/of/StrimUp").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("People",["$q","$http","$rootScope",function(e,t,n){return this.get=function(){var o=e.defer();return t.get(n.endPoint+"/api/v1/suggestions").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this.allIfollow=function(){var o=e.defer();return t.get(n.endPoint+"/api/v1/me/followings").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this.unFollow=function(o){var r=e.defer();return t["delete"](n.endPoint+"/api/v1/me/following/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.follow=function(o){var r=e.defer();return t.put(n.endPoint+"/api/v1/me/followings",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Share",["$log","$http","$q","$rootScope",function(e,t,n,o){return this.share=function(e){var r=n.defer();return t.post(o.endPoint+"/api/v1/share",e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getUser=function(e){var r=n.defer();return t.get(o.endPoint+"/api/v1/me/users/"+e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.fileMime=function(e){var r=n.defer();return t.get(o.endPoint+"/api/v1/mimeType/"+e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("User",["$http","$q","$rootScope",function(e,t,n){return this.info=function(){var o=t.defer();return e.get(n.endPoint+"/api/v1/users/info").success(function(e){o.resolve(e)}).error(function(){o.reject()}),o.promise},this.groups=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/me/groups").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Notification",["$http","$q","$rootScope",function(e,t,n){return this.getNotification=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/notifications",{cache:!1}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.createNotification=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/notifications",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.deleteNotification=function(o){var r=t.defer();return e["delete"](n.endPoint+"/api/v1/notifications/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("notificationController",["$scope","Notification","$log",function(e,t,n){e.init=function(){e.getNotification()},e.clearNotification=function(n){t.clearNotification(n).then(function(t){e.getNotification()},function(e){console.log(e)})},e.getNotification=function(){t.getNotification().then(function(t){e.notifications=t},function(e){})},e.init()}]),sync.directive("notify",[function(){return{restrict:"AE",scope:{},link:function(e,t,n){function o(e,t,n){if(!Notification)return void console.log("Desktop notifications not available in your browser..");if("granted"!==Notification.permission)Notification.requestPermission();else{var o=new Notification(e,{icon:"https://lh3.googleusercontent.com/-aCFiK4baXX4/VjmGJojsQ_I/AAAAAAAANJg/h-sLVX1M5zA/s48-Ic42/eggsmall.png",body:t});o.onclick=function(){window.open(n)},o.onclose=function(){console.log("Notification closed")}}}setTimeout(function(){var e="This will be title",t="Most popular article.",n="sync.com:8000";o(e,t,n)},2e3),document.addEventListener("DOMContentLoaded",function(){"granted"!==Notification.permission&&Notification.requestPermission()})}}}]),sync.factory("userInteractionNotification",function(){return{success:function(e){toastr.success(e,"Success")},warn:function(e){toastr.warning(e,"Hey")},info:function(e){toastr.info(e,"FYI")},error:function(e){toastr.error(e,"Oh No")}}}),sync.factory("userInteractionNotification",function(){return{success:function(e){toastr.success(e,"Success")},warn:function(e){toastr.warning(e,"Hey")},info:function(e){toastr.info(e,"FYI")},error:function(e){toastr.error(e,"Oh No")}}}),sync.controller("uploadDialogCtrl",["$scope","$uibModal","$mdDialog","$mdMedia",function(e,t,n,o){function r(e,t){e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.answer=function(e){t.hide(e)}}e.cancel=function(){n.hide()},e.customFullscreen=o("xs")||o("sm"),e.upload=function(t){n.show({parent:angular.element(document.body),controller:r,templateUrl:"views/upload.tpl.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!1}).then(function(t){e.status='You said the information was "'+t+'".'},function(){e.status="You cancelled the dialog."})},r.$inject=["$scope","$mdDialog"]}]),sync.controller("shareController",["$scope","$uibModal","$mdDialog","$mdMedia","urlShortener","Share","User",function(e,t,n,o,r,i,s){e.cancel=function(){n.hide()},e.customFullscreen=o("xs")||o("sm"),e.share=function(t,o){function i(e,t){e.getFile=function(){return e.file=r.makeShort(o)},e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.answer=function(e){t.hide(e)}}n.show({parent:angular.element(document.body),controller:i,templateUrl:"views/share.tpl.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!1}).then(function(t){e.status='You said the information was "'+t+'".'},function(){e.status="You cancelled the dialog."}),i.$inject=["$scope","$mdDialog"]},e.shareFile=function(e){var t,n=e.emails,o=n.split(",");for(t=0;t<o.length;t++)i.share(e).then(function(e){console.log(e)})["catch"]()}}]),sync.service("Post",["$http","$q","$rootScope",function(e,t,n){return this.getPost=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/me/posts?user_id"+o,{cache:!1}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.participate=function(o){var r=t.defer();return e.put(n.endPoint+"/api/v1/me/posts/",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.createPost=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/me/posts",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.deletePost=function(o){var r=t.defer();return e["delete"](n.endPoint+"/api/v1/me/posts/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("PostingController",["$scope","Post","$timeout","User","$interval","Notification","$log","userInteractionNotification",function(e,t,n,o,r,i,s,a,u){e.init=function(){e.postLoader(),e.getUser()},r(function(){e.postLoader()},8e3),e.getUser=function(){o._id().then(function(t){e.user=t,console.log(t)},function(e){})},e.loadMore=function(){},e.participateIntoPost=function(n,o){var r={post_id:n,user_id:o};t.participate(r).then(function(t){e.postLoader()},function(e){})},e.postLoader=function(){e.dataLoading=!0,t.getPost().then(function(t){e.posts=t,e.friends=[],e.replies=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("friends")&&t[n].replies&&t[n].friends?(e.friends.push(t[n].friends),e.replies.push(t[n].replies)):t[n].hasOwnProperty("friends")&&(e.friends=friends.concat(traverse(t[n].friends)),e.replies=replies.concat(traverse(t[n].replies)))},function(e){})},e.imageDesc=function(e){switch(e){case 0:return"60px";case 1:return"60px";case 2:return"60px";case 3:return"60px";case 4:return"60px";default:return"60px"}console.log(e)},e.share=function(e){s.closeOptionButtons(),a.info(e)},e.createPost=function(n){var o={message:n};t.createPost(o).then(function(t){e.message="",e.posts.push(t),u.success("New Post feed created!")},function(e){})},e.init()}]),sync.directive("feedsUploader",[function(){return{restrict:"AE",replace:!1,templateUrl:"App/js/scripts/views/feedAttachment.html",scope:{action:"@"},controller:["$scope",function(e){e.progress=0,e.avatar="",e.sendFile=function(t){var n=$(t).parents("form");return""===$(t).val()?!1:(n.attr("action",e.action),e.$apply(function(){e.progress=0}),void n.ajaxSubmit({type:"POST",beforeSend:function(e){e.setRequestHeader("authorization","Bearer OqFirQS44RQTjRuWniXjdHZJQXdCuEx49rq8JY5A")},uploadProgress:function(t,n,o,r){e.$apply(function(){})},error:function(e,t,o,r){n.removeAttr("action")},success:function(o,r,i,s){var a=$(t).val().split("\\"),u=a[a.length-1];n.removeAttr("action"),e.$apply(function(){e.avatar=u})}}))}}],link:function(e,t,n,o){t.find(".fake-uploader").click(function(){t.find('input[type="file"]').click()})}}}]),sync.controller("FilesController",["$scope","Files","$log","$window","User","$uibModal","$interval","pdfDelegate","$timeout","$stateParams","$rootScope","$exceptionHandler","Fetcher",function(e,t,n,o,r,i,s,a,u,c,l,f,p){e.init=function(){e.all(),e.crazy()},e.crazy=function(){var t="{users{email,id}}";p.fetch(t).then(function(t){e.crazy=t,console.log(t)},function(e){console.log(e)})},e.all=function(){e.dataLoading=!0,t.getBoxFiles().then(function(t){e.files=t},function(e){console.log(e)})["finally"](function(){e.dataLoading=!1})},e.fileType=function(e){switch(e){case"pdf":return"img/pdf.png";case"folder":return"img/universal_folder.png";case"folder+":return"img/Add_folder.png";case"php":return"img/code.png";case"txt":return"img/code.png";case"docx":return"img/word.png";case"jpg":return"fa fa-image";case"png":return"img/video.png";case"jpeg":return"img/universal_folder.png";case"zip":return"img/zip.png";default:return"img/universal_folder.png"}},e.init()}]),sync.directive("draggable",function(){return{restrict:"AE",link:function(e,t,n){var o=t[0];o.draggable=!0,o.addEventListener("dragstart",function(e){return e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("Text",this.id),this.classList.add("drag"),!1},!1),o.addEventListener("dragend",function(e){return this.classList.remove("drag"),!1},!1)}}}),sync.directive("droppable",["userInteractionNotification","Files",function(e,t){return{scope:{drop:"&",bin:"="},link:function(e,t){var n=t[0];n.addEventListener("dragover",function(e){return e.dataTransfer.dropEffect="move",e.preventDefault&&e.preventDefault(),this.classList.add("over"),!1},!1),n.addEventListener("dragenter",function(e){return this.classList.add("over"),!1},!1),n.addEventListener("dragleave",function(e){return this.classList.remove("over"),!1},!1),n.addEventListener("drop",function(t){t.stopPropagation&&t.stopPropagation(),this.classList.remove("over");var n=this.id,o=document.getElementById(t.dataTransfer.getData("Text"));try{return this.appendChild(o),e.$apply(function(e){var t=e.drop();"undefined"!=typeof t&&t(o.id,n)}),!1}catch(t){}},!1)}}}]),sync.controller("DragDropCtrl",["$scope","Files","$interval",function(e,t,n){e.handleDrop=function(){}}]),sync.controller("previewController",["$scope","pdfDelegate","$timeout","$stateParams","$rootScope","$exceptionHandler","Files","FileSaver","Blob",function(e,t,n,o,r,i,s,a,u){if(o.preview&&"pdf"==o.extension){e.previewable=!0;try{e.pdfUrl=r.endPoint+"/preview/"+o.preview+"/of/StrimUp",n(function(){t.$getByHandle("my-pdf-container").zoomIn(.5)},3e3)}catch(c){throw new Error(c)}}else o.preview&&"jpg"==o.extension||"png"==o.extension?(e.file_name=o.preview,e.previewable=!1):(e.file_name=o.preview,e.previewable=!1);e.goNext=function(){e.increment=1,t.$getByHandle("my-pdf-container").next(e.increment+1)},e.goPrev=function(n){t.$getByHandle("my-pdf-container").prev(e.increment-1)}}]),sync.directive("fileDownload",[function(){return{restrict:"A",replace:!0,template:'<button class="btn btn-default" data-ng-click="download()"><span class=""></span>Download</button>',controller:["$rootScope","$scope","$element","$attrs","$timeout",function(e,t,n,o,r){function i(e){u()}function s(t){e.$broadcast("dialogs.wait.complete")}function a(e,t){}function u(){r(function(){t.progress<95&&(t.progress+=(96-t.progress)/2,u())},250)}t.progress=0,t.download=function(){t.progress=0,$.fileDownload("http://syncme.com:8000/api/v1/files/download/phpxFnlheDVE5j5mcVDX.png/of/StrimUp?access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn",{prepareCallback:i,successCallback:s,failCallback:a})}}]}}]),sync.controller("PeopleController",["$scope","People",function(e,t){e.init=function(){e.getPeopleToFollow()},e.getPeopleToFollow=function(){t.get().then(function(t){e.people=t},function(e){})},e.$on("followMember",function(n,o){n.preventDefault(),t.follow(o).then(function(t){e.getPeopleToFollow()},function(e){console.log(e)})}),e.follow=function(t){var n={id:t,option:"addPeople"};e.$emit("followMember",n)},e.init()}]),sync.service("Group",["$http","$rootScope","$q",function(e,t,n){return this.create=function(o){var r=n.defer();return e.post(t.endPoint+"/api/v1/me/groups",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this["delete"]=function(o){var r=n.defer();return e["delete"](t.endPoint+"/api/v1/me/groups/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.myGroups=function(){var o=n.defer();return e.get(t.endPoint+"/api/v1/me/groups").success(function(e){o.resolve(e)}).error(function(e){console.log("differed slow:"+e),o.reject(e)}),o.promise},this.addPeople=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.resolve(e)}),r.promise},this.addFileToGroup=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.removePeople=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.suggestPeople=function(o){var r=n.defer();return e.get(t.endPoint+"/api/v1/me/groups/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("GroupController",["$scope","Group","User","Files","userInteractionNotification",function(e,t,n,o,r){e.init=function(){e.myGroups(),e.suggestedPeopleToGroup()},e.userId=function(){n._id().then(function(t){e.userId=t},function(e){console.log(e)})},e.myGroups=function(){t.myGroups().then(function(t){e.group=t},function(e){})},e.suggestedPeopleToGroup=function(n){e.showFiles=!1,e.showGroup=!1,e.showBox=!1,angular.isUndefined(n)||t.suggestPeople(n).then(function(t){e.followers=t},function(e){console.log(e)})},e.$on("refreshGroup",function(){e.init()}),e.$on("groupDeleted",function(t,n){t.preventDefault(),e.myGroups()}),e.$on("groupTobindwith",function(t,n){t.preventDefault(),e.emitted=n,1==e.showFiles&&(e.showFiles=!1),e.suggestedPeopleToGroup(n),e.addPeople=!0}),e.getGroupFiles=function(t){o.getGroupFiles(t).then(function(t){e.files=t,e.groups=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("groups")&&t[n].groups?e.groups.push(t[n].friends):t[n].hasOwnProperty("groups")&&(e.groups=groups.concat(traverse(t[n].groups)))},function(e){console.log(e)})},e.getBoxFiles=function(t){e.emitted=t,o.getBoxFiles(t).then(function(t){e.files=t,e.groups=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("groups")&&t[n].groups?e.groups.push(t[n].friends):t[n].hasOwnProperty("groups")&&(e.groups=groups.concat(traverse(t[n].groups)))},function(e){console.log(e)})},e.$on("showOptions",function(t,n){"box"===n.owner?(e.addPeople=!1,e.showGroup=!1,e.showBox=!0,1==e.addPeople&&(e.addPeople=!1),e.getBoxFiles(n.group_id)):"group"===n.owner&&(e.showBox=!1,e.addPeople=!1,e.showGroup=!0,1==e.addPeople&&(e.addPeople=!1),e.getGroupFiles(n.group_id))}),e.init()}]),sync.directive("myGroups",["Group","Report","userInteractionNotification",function(e,t,n,o){return{priority:10,templateUrl:"App/scripts/js/directives/groups.html",restrict:"E",scope:{id:"=userId",groups:"=",followers:"=",emitted:"=",showPeople:"=",showGroup:"=",files:"=",showBox:"="},link:function(o,r,i){o.deleteGroup=function(r){e["delete"](r).then(function(e){n.info("Group deleted"),o.$emit("groupDeleted","group deleted")},function(e){t.send("delete group error:"+e).then(function(){},function(){})})},o.createGroup=function(t){e.create(t).then(function(e){n.success("Created new Group"),o.$emit("refreshGroup",null)},function(e){console.log(e)})},o.initAddPeople=function(e){o.$emit("groupTobindwith",e)},o.addPeople=function(t){var r={option:"addMember",userId:t.userId,groupId:t.groupId};angular.isUndefined(t)||e.addPeople(r).then(function(e){n.success("Added Member in group."),o.initAddPeople(t.groupId),o.$emit("refreshGroup",""),console.log(e)},function(e,t){console.log(e)})},o.removePeople=function(t){var r={option:"removeMember",userId:t.userId,groupId:t.groupId};angular.isUndefined(t)||e.removePeople(r).then(function(e){n.info("Removed Member in group."),o.initAddPeople(t.groupId),o.$emit("refreshGroup",""),console.log(e)},function(e,t){console.log(e)})},o.removeFromGroup=function(){console.log("we can remove file in group")},o.addFileToGroup=function(t){var o={option:"addFiles",fileId:t.fileId,groupId:t.groupId};e.addFileToGroup(o).then(function(e){console.log(e)},function(e){n.warn("Some error occured during adding file")})},o.filesInBox=function(e){var t={group_id:e,owner:"box"};o.$emit("showOptions",t)},o.filesInGroup=function(e){var t={group_id:e,owner:"group"};o.$emit("showOptions",t)}}}}]),sync.service("Report",[function(e,t,n){return this.send=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/issues",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Settings",["$http","$rootScope","$q",function(e,t,n){return this.current=function(){var o=n.defer();return e.get(t.endPoint+"/api/v1/settings").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this}]),sync.controller("SettingsController",["$scope","Settings","$log",function(e,t,n){e.init=function(){e.loadCurrentSettings()},e.loadCurrentSettings=function(){t.current().then(function(t){e.settings=t},function(e){n.info("errror prevent promise to be fullfill")})},e.init()}]),sync.controller("ShareController",["$scope","$rootScope","$routeParams","$route","$log","$uibModal","Share","User",function(e,t,n,o,r,i,s,a){e.share=function(e){console.log(e)}}]),angular,sync.controller("UploadController",["$scope","FileUploader","$rootScope","Files",function(e,t,n,o){var r=e.uploader=new t({url:n.endPoint+"/api/v1/upload"});r.filters.push({name:"customFilter",fn:function(e,t){return this.queue.length<10}}),r.onWhenAddingFileFailed=function(e,t,n){console.info("onWhenAddingFileFailed",e,t,n)},r.onAfterAddingFile=function(e){console.info("onAfterAddingFile",e)},r.onAfterAddingAll=function(e){console.info("onAfterAddingAll",e)},r.onBeforeUploadItem=function(e){console.info("onBeforeUploadItem",e)},r.onProgressItem=function(e,t){console.info("onProgressItem",e,t)},r.onProgressAll=function(e){console.info("onProgressAll",e)},r.onSuccessItem=function(e,t,n,o){console.info("onSuccessItem",e,t,n,o)},r.onErrorItem=function(e,t,n,o){console.info("onErrorItem",e,t,n,o)},r.onCancelItem=function(e,t,n,o){console.info("onCancelItem",e,t,n,o)},r.onCompleteItem=function(e,t,n,o){console.info("onCompleteItem",e,t,n,o)},r.onCompleteAll=function(){o.getBoxFiles().then(function(t){e.files=t},function(e){console.log(e)})["finally"](function(){e.dataLoading=!1}),console.info("onCompleteAll")},console.info("uploader",r)}]),sync.service("urlShortener",[function(){this.makeShort=function(e){return e}}]),Array.remove=function(e,t,n){var o=e.slice((n||t)+1||e.length);return e.length=0>t?e.length+t:t,e.push.apply(e,o)};var total_popups=0,popups=[];$(document).ready(function(){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}}),$("#chat").keypress(function(e){if(13==e.which){alert("we are listning to enter event");var t=$("#shout_username").val(),n=$("#shout_message").val();post_data={username:t,message:n},$.post("shout.php",post_data,function(e){$(e).hide().appendTo(".message_box").fadeIn();var t=$(".message_box")[0].scrollHeight;$(".message_box").scrollTop(t),$("#shout_message").val("")}).fail(function(e){alert(e.statusText)})}}),$(".close_btn").click(function(e){var t=$(".toggle_chat").css("display");$(".toggle_chat").slideToggle(),"block"==t?$(".header div").attr("class","open_btn"):$(".header div").attr("class","close_btn")})}),window.addEventListener("resize",calculate_popups),window.addEventListener("load",calculate_popups),sync.controller("MessageController",["$http","$scope","$q","$rootScope",function(e,t,n,o){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}}),t.name="Muragijimana";var r=e.get(o.endPoint+"/api/v1/post"),i=e.get(o.endPoint+"/api/v1/post");n.all([r,i]).then(function(e){var t=[];return angular.forEach(e,function(e){t.push(e.data)}),t}).then(function(e){t.posts=e[0]}),$(".post-in").atwho({at:"@",data:["Peter","Tom","Anne"]})}]),sync.controller("TutorialModal",["$scope",function(e){e.open=function(){e.showModal=!0},e.ok=function(){e.showModal=!1},e.cancel=function(){e.showModal=!1}}]),sync.controller("StriminModal",["$scope",function(e){e.open=function(){e.showModal=!0},e.ok=function(){e.showModal=!1},e.cancel=function(){e.showModal=!1}}]);
//# sourceMappingURL=data:application/json;base64,
