function close_popup(e){for(var t=0;t<popups.length;t++)if(e==popups[t])return Array.remove(popups,t),document.getElementById(e).style.display="none",void calculate_popups()}function display_popups(){var e=220,t=0;for(t;total_popups>t;t++)if(void 0!=popups[t]){var n=document.getElementById(popups[t]);n.style.right=e+"px",e+=320,n.style.display="block"}for(var o=t;o<popups.length;o++){var n=document.getElementById(popups[o]);n.style.display="none"}}function register_popup(e,t){for(var n=0;n<popups.length;n++)if(e==popups[n])return Array.remove(popups,n),popups.unshift(e),void calculate_popups();var o='<div class="popup-box chat-popup" id="'+e+'">';o+='<div style="background:#ddd;color:#fff;" class="header">Group<div class="close_btn">&nbsp;</div></div>',o+=' <div class="toggle_chat">',o+='<div class="message_box"></div>',o+='<textarea style="background:white;margin-top:180px;" id="chat" class="form-control" rows="3" required="required"></textarea>',document.getElementsByTagName("body")[0].innerHTML=document.getElementsByTagName("body")[0].innerHTML+o,popups.unshift(e),calculate_popups()}function calculate_popups(){var e=window.innerWidth;540>e?total_popups=0:(e-=200,total_popups=parseInt(e/320)),display_popups()}!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["angular-file-upload"]=t():e["angular-file-upload"]=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=o(n(1)),i=o(n(2)),s=o(n(3)),a=o(n(4)),u=o(n(5)),c=o(n(6)),l=o(n(7)),f=o(n(8)),p=o(n(9)),d=o(n(10)),m=o(n(11)),v=o(n(12));angular.module(r.name,[]).value("fileUploaderOptions",i).factory("FileUploader",s).factory("FileLikeObject",a).factory("FileItem",u).factory("FileDirective",c).factory("FileSelect",l).factory("FileDrop",f).factory("FileOver",p).directive("nvFileSelect",d).directive("nvFileDrop",m).directive("nvFileOver",v).run(["FileUploader","FileLikeObject","FileItem","FileDirective","FileSelect","FileDrop","FileOver",function(e,t,n,o,r,i,s){e.FileLikeObject=t,e.FileItem=n,e.FileDirective=o,e.FileSelect=r,e.FileDrop=i,e.FileOver=s}])},function(e,t){e.exports={name:"angularFileUpload"}},function(e,t){"use strict";e.exports={url:"/",alias:"file",headers:{authorization:"Bearer 8EuqcMNkF2yP50Dicpv9hLRRp7WOSabPlCu22liY"},queue:[],progress:0,autoUpload:!1,removeAfterUpload:!1,method:"POST",filters:[],formData:[],queueLimit:Number.MAX_VALUE,withCredentials:!1}},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.extend,u=angular.forEach,c=angular.isObject,l=angular.isNumber,f=angular.isDefined,p=angular.isArray,d=angular.element;e.exports=function(e,t,n,o,m,v){var g=o.File,h=o.FormData,y=function(){function o(t){i(this,o);var n=s(e);a(this,n,t,{isUploading:!1,_nextIndex:0,_failFilterIndex:-1,_directives:{select:[],drop:[],over:[]}}),this.filters.unshift({name:"queueLimit",fn:this._queueLimitFilter}),this.filters.unshift({name:"folder",fn:this._folderFilter})}return r(o,{addToQueue:{value:function(e,t,n){var o=this,r=this.isArrayLikeObject(e)?e:[e],i=this._getFilters(n),s=this.queue.length,a=[];u(r,function(e){var n=new m(e);if(o._isValidFile(n,i,t)){var r=new v(o,e,t);a.push(r),o.queue.push(r),o._onAfterAddingFile(r)}else{var s=i[o._failFilterIndex];o._onWhenAddingFileFailed(n,s,t)}}),this.queue.length!==s&&(this._onAfterAddingAll(a),this.progress=this._getTotalProgress()),this._render(),this.autoUpload&&this.uploadAll()}},removeFromQueue:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t];n.isUploading&&n.cancel(),this.queue.splice(t,1),n._destroy(),this.progress=this._getTotalProgress()}},clearQueue:{value:function(){for(;this.queue.length;)this.queue[0].remove();this.progress=0}},uploadItem:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t],o=this.isHTML5?"_xhrTransport":"_iframeTransport";n._prepareToUploading(),this.isUploading||(this.isUploading=!0,this[o](n))}},cancelItem:{value:function(e){var t=this.getIndexOfItem(e),n=this.queue[t],o=this.isHTML5?"_xhr":"_form";n&&n.isUploading&&n[o].abort()}},uploadAll:{value:function(){var e=this.getNotUploadedItems().filter(function(e){return!e.isUploading});e.length&&(u(e,function(e){return e._prepareToUploading()}),e[0].upload())}},cancelAll:{value:function(){var e=this.getNotUploadedItems();u(e,function(e){return e.cancel()})}},isFile:{value:function(e){return this.constructor.isFile(e)}},isFileLikeObject:{value:function(e){return this.constructor.isFileLikeObject(e)}},isArrayLikeObject:{value:function(e){return this.constructor.isArrayLikeObject(e)}},getIndexOfItem:{value:function(e){return l(e)?e:this.queue.indexOf(e)}},getNotUploadedItems:{value:function(){return this.queue.filter(function(e){return!e.isUploaded})}},getReadyItems:{value:function(){return this.queue.filter(function(e){return e.isReady&&!e.isUploading}).sort(function(e,t){return e.index-t.index})}},destroy:{value:function(){var e=this;u(this._directives,function(t){u(e._directives[t],function(e){e.destroy()})})}},onAfterAddingAll:{value:function(e){}},onAfterAddingFile:{value:function(e){}},onWhenAddingFileFailed:{value:function(e,t,n){}},onBeforeUploadItem:{value:function(e){}},onProgressItem:{value:function(e,t){}},onProgressAll:{value:function(e){}},onSuccessItem:{value:function(e,t,n,o){}},onErrorItem:{value:function(e,t,n,o){}},onCancelItem:{value:function(e,t,n,o){}},onCompleteItem:{value:function(e,t,n,o){}},onCompleteAll:{value:function(){}},_getTotalProgress:{value:function(e){if(this.removeAfterUpload)return e||0;var t=this.getNotUploadedItems().length,n=t?this.queue.length-t:this.queue.length,o=100/this.queue.length,r=(e||0)*o/100;return Math.round(n*o+r)}},_getFilters:{value:function(e){if(!e)return this.filters;if(p(e))return e;var t=e.match(/[^\s,]+/g);return this.filters.filter(function(e){return-1!==t.indexOf(e.name)})}},_render:{value:function(){t.$$phase||t.$apply()}},_folderFilter:{value:function(e){return!(!e.size&&!e.type)}},_queueLimitFilter:{value:function(){return this.queue.length<this.queueLimit}},_isValidFile:{value:function(e,t,n){var o=this;return this._failFilterIndex=-1,t.length?t.every(function(t){return o._failFilterIndex++,t.fn.call(o,e,n)}):!0}},_isSuccessCode:{value:function(e){return e>=200&&300>e||304===e}},_transformResponse:{value:function(e,t){var o=this._headersGetter(t);return u(n.defaults.transformResponse,function(t){e=t(e,o)}),e}},_parseHeaders:{value:function(e){var t,n,o,r={};return e?(u(e.split("\n"),function(e){o=e.indexOf(":"),t=e.slice(0,o).trim().toLowerCase(),n=e.slice(o+1).trim(),t&&(r[t]=r[t]?r[t]+", "+n:n)}),r):r}},_headersGetter:{value:function(e){return function(t){return t?e[t.toLowerCase()]||null:e}}},_xhrTransport:{value:function(e){var t=this,n=e._xhr=new XMLHttpRequest,o=new h;if(this._onBeforeUploadItem(e),u(e.formData,function(e){u(e,function(e,t){o.append(t,e)})}),"number"!=typeof e._file.size)throw new TypeError("The file specified is no longer valid");o.append(e.alias,e._file,e.file.name),n.upload.onprogress=function(n){var o=Math.round(n.lengthComputable?100*n.loaded/n.total:0);t._onProgressItem(e,o)},n.onload=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o),i=t._isSuccessCode(n.status)?"Success":"Error",s="_on"+i+"Item";t[s](e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.onerror=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o);t._onErrorItem(e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.onabort=function(){var o=t._parseHeaders(n.getAllResponseHeaders()),r=t._transformResponse(n.response,o);t._onCancelItem(e,r,n.status,o),t._onCompleteItem(e,r,n.status,o)},n.open(e.method,e.url,!0),n.withCredentials=e.withCredentials,u(e.headers,function(e,t){n.setRequestHeader(t,e)}),n.send(o),this._render()}},_iframeTransport:{value:function(e){var t=this,n=d('<form style="display: none;" />'),o=d('<iframe name="iframeTransport'+Date.now()+'">'),r=e._input;e._form&&e._form.replaceWith(r),e._form=n,this._onBeforeUploadItem(e),r.prop("name",e.alias),u(e.formData,function(e){u(e,function(e,t){var o=d('<input type="hidden" name="'+t+'" />');o.val(e),n.append(o)})}),n.prop({action:e.url,method:"POST",target:o.prop("name"),enctype:"multipart/form-data",encoding:"multipart/form-data"}),o.bind("load",function(){var n="",r=200;try{n=o[0].contentDocument.body.innerHTML}catch(i){r=500}var s={response:n,status:r,dummy:!0},a={},u=t._transformResponse(s.response,a);t._onSuccessItem(e,u,s.status,a),t._onCompleteItem(e,u,s.status,a)}),n.abort=function(){var i,s={status:0,dummy:!0},a={};o.unbind("load").prop("src","javascript:false;"),n.replaceWith(r),t._onCancelItem(e,i,s.status,a),t._onCompleteItem(e,i,s.status,a)},r.after(n),n.append(r).append(o),n[0].submit(),this._render()}},_onWhenAddingFileFailed:{value:function(e,t,n){this.onWhenAddingFileFailed(e,t,n)}},_onAfterAddingFile:{value:function(e){this.onAfterAddingFile(e)}},_onAfterAddingAll:{value:function(e){this.onAfterAddingAll(e)}},_onBeforeUploadItem:{value:function(e){e._onBeforeUpload(),this.onBeforeUploadItem(e)}},_onProgressItem:{value:function(e,t){var n=this._getTotalProgress(t);this.progress=n,e._onProgress(t),this.onProgressItem(e,t),this.onProgressAll(n),this._render()}},_onSuccessItem:{value:function(e,t,n,o){e._onSuccess(t,n,o),this.onSuccessItem(e,t,n,o)}},_onErrorItem:{value:function(e,t,n,o){e._onError(t,n,o),this.onErrorItem(e,t,n,o)}},_onCancelItem:{value:function(e,t,n,o){e._onCancel(t,n,o),this.onCancelItem(e,t,n,o)}},_onCompleteItem:{value:function(e,t,n,o){e._onComplete(t,n,o),this.onCompleteItem(e,t,n,o);var r=this.getReadyItems()[0];return this.isUploading=!1,f(r)?void r.upload():(this.onCompleteAll(),this.progress=this._getTotalProgress(),void this._render())}}},{isFile:{value:function(e){return g&&e instanceof g}},isFileLikeObject:{value:function(e){return e instanceof m}},isArrayLikeObject:{value:function(e){return c(e)&&"length"in e}},inherit:{value:function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.super_=t}}}),o}();return y.prototype.isHTML5=!(!g||!h),y.isHTML5=y.prototype.isHTML5,y},e.exports.$inject=["fileUploaderOptions","$rootScope","$http","$window","FileLikeObject","FileItem"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.isElement,u=angular.isString;e.exports=function(){var e=function(){function e(t){i(this,e);var n=a(t),o=n?t.value:t,r=u(o)?"FakePath":"Object",s="_createFrom"+r;this[s](o)}return r(e,{_createFromFakePath:{value:function(e){this.lastModifiedDate=null,this.size=null,this.type="like/"+e.slice(e.lastIndexOf(".")+1).toLowerCase(),this.name=e.slice(e.lastIndexOf("/")+e.lastIndexOf("\\")+2)}},_createFromObject:{value:function(e){this.lastModifiedDate=s(e.lastModifiedDate),this.size=e.size,this.type=e.type,this.name=e.name}}}),e}();return e},e.exports.$inject=[]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.copy),a=angular.extend,u=angular.element,c=angular.isElement;e.exports=function(e,t){var n=function(){function n(e,o,r){i(this,n);var l=c(o),f=l?u(o):null,p=l?null:o;a(this,{url:e.url,alias:e.alias,headers:s(e.headers),formData:s(e.formData),removeAfterUpload:e.removeAfterUpload,withCredentials:e.withCredentials,method:e.method},r,{uploader:e,file:new t(o),isReady:!1,isUploading:!1,isUploaded:!1,isSuccess:!1,isCancel:!1,isError:!1,progress:0,index:null,_file:p,_input:f}),f&&this._replaceNode(f)}return r(n,{upload:{value:function(){try{this.uploader.uploadItem(this)}catch(e){this.uploader._onCompleteItem(this,"",0,[]),this.uploader._onErrorItem(this,"",0,[])}}},cancel:{value:function(){this.uploader.cancelItem(this)}},remove:{value:function(){this.uploader.removeFromQueue(this)}},onBeforeUpload:{value:function(){}},onProgress:{value:function(e){}},onSuccess:{value:function(e,t,n){}},onError:{value:function(e,t,n){}},onCancel:{value:function(e,t,n){}},onComplete:{value:function(e,t,n){}},_onBeforeUpload:{value:function(){this.isReady=!0,this.isUploading=!0,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!1,this.isError=!1,this.progress=0,this.onBeforeUpload()}},_onProgress:{value:function(e){this.progress=e,this.onProgress(e)}},_onSuccess:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!0,this.isCancel=!1,this.isError=!1,this.progress=100,this.index=null,this.onSuccess(e,t,n)}},_onError:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!1,this.isCancel=!1,this.isError=!0,this.progress=0,this.index=null,this.onError(e,t,n)}},_onCancel:{value:function(e,t,n){this.isReady=!1,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!0,this.isError=!1,this.progress=0,this.index=null,this.onCancel(e,t,n)}},_onComplete:{value:function(e,t,n){this.onComplete(e,t,n),this.removeAfterUpload&&this.remove()}},_destroy:{value:function(){this._input&&this._input.remove(),this._form&&this._form.remove(),delete this._form,delete this._input}},_prepareToUploading:{value:function(){this.index=this.index||++this.uploader._nextIndex,this.isReady=!0}},_replaceNode:{value:function(t){var n=e(t.clone())(t.scope());n.prop("value",null),t.css("display","none"),t.after(n)}}}),n}();return n},e.exports.$inject=["$compile","FileLikeObject"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=(o(n(1)),angular.extend);e.exports=function(){var e=function(){function e(t){i(this,e),s(this,t),this.uploader._directives[this.prop].push(this),this._saveLinks(),this.bind()}return r(e,{bind:{value:function(){for(var e in this.events){var t=this.events[e];this.element.bind(e,this[t])}}},unbind:{value:function(){for(var e in this.events)this.element.unbind(e,this.events[e])}},destroy:{value:function(){var e=this.uploader._directives[this.prop].indexOf(this);this.uploader._directives[this.prop].splice(e,1),this.unbind()}},_saveLinks:{value:function(){for(var e in this.events){var t=this.events[e];this[t]=this[t].bind(this)}}}}),e}();return e.prototype.events={},e},e.exports.$inject=[]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function c(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:c(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend);e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy",change:"onChange"},prop:"select"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n),this.uploader.isHTML5||this.element.removeAttr("multiple"),this.element.prop("value",null)}return s(t,e),r(t,{getOptions:{value:function(){}},getFilters:{value:function(){}},isEmptyAfterSelection:{value:function(){return!!this.element.attr("multiple")}},onChange:{value:function(){var e=this.uploader.isHTML5?this.element[0].files:this.element[0],t=this.getOptions(),n=this.getFilters();this.uploader.isHTML5||this.destroy(),this.uploader.addToQueue(e,t,n),this.isEmptyAfterSelection()&&(this.element.prop("value",null),this.element.replaceWith(this.element=this.element.clone(!0)))}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function l(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:l(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend),c=angular.forEach;e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy",drop:"onDrop",dragover:"onDragOver",dragleave:"onDragLeave"},prop:"drop"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n)}return s(t,e),r(t,{getOptions:{value:function(){}},getFilters:{value:function(){}},onDrop:{value:function(e){var t=this._getTransfer(e);if(t){var n=this.getOptions(),o=this.getFilters();this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this),this.uploader.addToQueue(t.files,n,o)}}},onDragOver:{value:function(e){var t=this._getTransfer(e);this._haveFiles(t.types)&&(t.dropEffect="copy",this._preventAndStop(e),c(this.uploader._directives.over,this._addOverClass,this))}},onDragLeave:{value:function(e){e.currentTarget!==this.element[0]&&(this._preventAndStop(e),c(this.uploader._directives.over,this._removeOverClass,this))}},_getTransfer:{value:function(e){return e.dataTransfer?e.dataTransfer:e.originalEvent.dataTransfer}},_preventAndStop:{value:function(e){e.preventDefault(),e.stopPropagation()}},_haveFiles:{value:function(e){return e?e.indexOf?-1!==e.indexOf("Files"):e.contains?e.contains("Files"):!1:!1}},_addOverClass:{value:function(e){e.addOverClass()}},_removeOverClass:{value:function(e){e.removeOverClass()}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e},r=function(){function e(e,t){for(var n in t){var o=t[n];o.configurable=!0,o.value&&(o.writable=!0)}Object.defineProperties(e,t)}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function c(e,t,n){var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:c(r,t,n)}if("value"in o&&o.writable)return o.value;var i=o.get;if(void 0!==i)return i.call(n)},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},u=(o(n(1)),angular.extend);e.exports=function(e){var t=function(e){function t(e){a(this,t);var n=u(e,{events:{$destroy:"destroy"},prop:"over",overClass:"nv-file-over"});i(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,n)}return s(t,e),r(t,{addOverClass:{value:function(){this.element.addClass(this.getOverClass())}},removeOverClass:{value:function(){this.element.removeClass(this.getOverClass())}},getOverClass:{value:function(){return this.overClass}}}),t}(e);return t},e.exports.$inject=["FileDirective"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');var a=new n({uploader:s,element:r});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}},e.exports.$inject=["$parse","FileUploader","FileSelect"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t,n){return{link:function(o,r,i){var s=o.$eval(i.uploader);if(!(s instanceof t))throw new TypeError('"Uploader" must be an instance of FileUploader');if(s.isHTML5){var a=new n({uploader:s,element:r});a.getOptions=e(i.options).bind(a,o),a.getFilters=function(){return i.filters}}}}},e.exports.$inject=["$parse","FileUploader","FileDrop"]},function(e,t,n){"use strict";var o=function(e){return e&&e.__esModule?e["default"]:e};o(n(1));e.exports=function(e,t){return{link:function(n,o,r){var i=n.$eval(r.uploader);if(!(i instanceof e))throw new TypeError('"Uploader" must be an instance of FileUploader');var s=new t({uploader:i,element:o});s.getOverClass=function(){return r.overClass||s.overClass}}}},e.exports.$inject=["FileUploader","FileOver"]}])}),angular.module("AuthManager",[]).service("SessionService",[function(){var e=!1;this.setUserAuthenticated=function(t){e=t},this.getUserAuthenticated=function(){return e}}]);var sync=angular.module("sync",["ngRoute","angularFileUpload","ui.bootstrap","ui.router","infinite-scroll","ngMaterial","ngMessages","material.svgAssetsCache","ng-mfb","pdf","ngContextMenu","angular-loading-bar","ngFileSaver","AuthManager","ngDialog"]),Logger=angular.module("Logger",[]);Logger.run(["$rootScope",function(e){e.endPoint="http://syncme.com:8000"}]),window.routes={"/Files":{url:"/Files",templateUrl:"views/files.html",controller:"FilesController",requireLogin:!0},preview:{url:"/!/:preview/:extension/:of/:user",templateUrl:"views/filePreview.html",controller:"previewController"},"/Groups":{url:"/Groups",templateUrl:"views/groups.html",controller:"GroupController",requireLogin:!0}},sync.run(["$rootScope","$log",function(e,t){e.endPoint="http://syncme.com:8000",e.$on("$routeChangeStart",function(e,t,n){for(var o in window.routes)-1!=t.indexOf(o)&&window.routes[o].requireLogin&&!SessionService.getUserAuthenticated()&&(alert("You need to be authenticated to see this page!"),e.preventDefault())})}]),sync.provider({$exceptionHandler:function(){var e=function(e,t){console.log(e)};this.$get=function(){return e}}}),sync.config(["$sceProvider","$httpProvider","$mdThemingProvider","cfpLoadingBarProvider",function(e,t,n,o){delete t.defaults.headers.common["X-Requested-With"],t.defaults.headers.post.Accept="application/json, text/javascript",t.defaults.headers.post.Accept="application/json, text/javascript",t.defaults.headers.common.authorization="Bearer 8EuqcMNkF2yP50Dicpv9hLRRp7WOSabPlCu22liY",e.enabled(!1),o.includeBar=!1}]),sync.config(["$stateProvider","$urlRouterProvider",function(e,t,n){for(var o in window.routes)e.state(o,window.routes[o]);t.otherwise("/Files")}]),function(e,t,n){"use strict";var o=t.module("ng-mfb",[]);o.run(["$templateCache",function(e){e.put("ng-mfb-menu-default.tpl.html",'<ul class="mfb-component--{{position}} mfb-{{effect}}"    data-mfb-toggle="{{togglingMethod}}" data-mfb-state="{{menuState}}">  <li class="mfb-component__wrap">    <a ng-click="clicked()" ng-mouseenter="hovered()" ng-mouseleave="hovered()"       ng-attr-data-mfb-label="{{label}}" class="mfb-component__button--main">     <i class="mfb-component__main-icon--resting {{resting}}"></i>     <i class="mfb-component__main-icon--active {{active}}"></i>    </a>    <ul class="mfb-component__list" ng-transclude>    </ul></li></ul>'),e.put("ng-mfb-menu-md.tpl.html",'<ul class="mfb-component--{{position}} mfb-{{effect}}"    data-mfb-toggle="{{togglingMethod}}" data-mfb-state="{{menuState}}">  <li class="mfb-component__wrap">    <a ng-click="clicked()" ng-mouseenter="hovered()" ng-mouseleave="hovered()"       style="background: transparent; box-shadow: none;"       ng-attr-data-mfb-label="{{label}}" class="mfb-component__button--main">     <md-button class="md-fab md-accent" aria-label={{label}} style="position:relative; margin: 0; padding:0;">       <md-icon style="left: 0; position: relative;" md-svg-icon="{{resting}}"         class="mfb-component__main-icon--resting"></md-icon>       <md-icon style="position:relative;" md-svg-icon="{{active}}"         class="mfb-component__main-icon--active"></md-icon>     </md-button>    </a>    <ul class="mfb-component__list" ng-transclude>    </ul></li></ul>'),e.put("ng-mfb-button-default.tpl.html",'<li>  <a data-mfb-label="{{label}}" class="mfb-component__button--child">    <i class="mfb-component__child-icon {{icon}}">    </i>  </a></li>'),e.put("ng-mfb-button-md.tpl.html",'<li>  <a href="" data-mfb-label="{{label}}" class="mfb-component__button--child"      style="background: transparent; box-shadow: none;">     <md-button style="margin: 0;" class="md-fab md-accent" aria-label={{label}}>       <md-icon md-svg-src="img/icons/android.svg"></md-icon>       <md-icon md-svg-icon="{{icon}}"></md-icon>     </md-button>  </a></li>')}]),o.directive("mfbButtonClose",function(){return{restrict:"A",require:"^mfbMenu",link:function(e,t,n,o){t.bind("click",function(){o.close()})}}}),o.directive("mfbMenu",["$timeout",function(t){return{restrict:"EA",transclude:!0,replace:!0,scope:{position:"@",effect:"@",label:"@",resting:"@restingIcon",active:"@activeIcon",mainAction:"&",menuState:"=?",togglingMethod:"@"},templateUrl:function(e,t){return t.templateUrl||"ng-mfb-menu-default.tpl.html"},controller:["$scope","$attrs",function(n,o){function r(){n.mainAction&&n.mainAction(),l()||s()}function i(){l()}function s(){n.menuState===p?u():a()}function a(){n.menuState=p}function u(){n.menuState=d}function c(){return e.Modernizr&&Modernizr.touch}function l(){return"hover"===n.togglingMethod}function f(){n.$apply(function(){n.togglingMethod="click"})}var p="open",d="closed";this.toggle=s,this.close=u,this.open=a,n.clicked=r,n.hovered=i,n.menuState||(n.menuState=d),c()&&l()&&t(f),o.$observe("menuState",function(){n.currentState=n.menuState})}]}}]),o.directive("mfbButton",[function(){return{require:"^mfbMenu",restrict:"EA",transclude:!0,replace:!0,scope:{icon:"@",label:"@"},templateUrl:function(e,t){return t.templateUrl||"ng-mfb-button-default.tpl.html"}}}])}(window,angular),sync.directive("leftMenu",function(){return{restrict:"AE",scope:{data:"=",user:"=",type:"="},templateUrl:"directives/leftMenu.html"}}),sync.directive("feeds",function(){return{restrict:"AE",scope:{posts:"=",replies:"=",createPost:"="},templateUrl:"directives/middleContent.html"}}),sync.directive("header",function(){return{restrict:"AE",scope:{data:"=",user:"=",type:"="},templateUrl:"./directives/header.html"}}),sync.directive("keybinding",function(){return{restrict:"E",scope:{invoke:"&"},link:function(e,t,n){Mousetrap.bind(n.on,e.invoke)}}}),Logger.controller("loginController",["$scope","$http","$rootScope","$window",function(e,t,n,o){var r={"crededential-not-found":"Credentials not found!",success:"logging in..."};e.login=function(e){function i(){o.location.href="/notVerified"}function s(){o.location.href="/sync"}$(".login-form-main-message").addClass("show success").html(r.success),t.post(n.endPoint+"/sessions",e).success(function(e){console.log(e),"1"===e?s():"0"===e?$(".login-form-main-message").addClass("show error").html(r["crededential-not-found"]):"notVerified"===e&&i()}).error(function(e){console.log("error:"+e)})}}]),Logger.controller("RegisterController",["$scope","$rootScope","$http",function(e,t,n){var o={"password-notMatch":"password do not match",SignUpInProgress:"Wait we are setting up your account."};e.register=function(e){function t(){$(".register-form-main-message").removeClass("show error")}function n(){window.location="/checkEmail"}if($(".register-form-main-message").addClass("show success").html(o.SignUpInProgress),$("#password").val()!=$("#password-confirm").val())return $(".register-form-main-message").addClass("show error").html(o["password-notMatch"]),void setTimeout(t,2e3);var r=$("#username").val(),i=$("#email").val();jQuery.post("/sessions",{username:r,password:e.password,email:i,option:e.option,phone:e.phone},function(e,t,o){1==e&&n()}).error(function(e){})}}]),Logger.directive("uniqueUsername",["isUsernameAvailable",function(e){return{restrict:"A",require:"ngModel",link:function(t,n,o,r){r.$asyncValidators.uniqueUsername=e}}}]),Logger.factory("isUsernameAvailable",["$q","$http","$rootScope",function(e,t,n){var o={"btn-loading":'<i class="fa fa-spinner fa-pulse"></i>',"btn-success":'<i class="fa fa-check"></i>',"btn-error":'<i class="fa fa-remove"></i>',"msg-success":"All Good! Redirecting...","msg-username-available":"good username available!","msg-username-taken":"oops username taken","msg-email-taken":"email taken","msg-your-phone-suck":"your phone is not valid",useAJAX:!0};return function(r){var i=e.defer();return t.get(n.endPoint+"/api/v1/users?username="+r+"&access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn").success(function(e){function t(){$(".register-form-main-message").removeClass("show success")}function n(){$(".register-form-main-message").removeClass("show error")}"available"==e?($(".register-form-main-message").addClass("show success").html(o["msg-username-available"]),setTimeout(t,2e3)):"taken"==e&&($(".register-form-main-message").addClass("show error").html(o["msg-username-taken"]),setTimeout(n,2e3)),i.reject()}).error(function(e){i.resolve()}),i.promise}}]),Logger.directive("uniqueEmail",["isEmailAvailable",function(e){return{restrict:"A",require:"ngModel",link:function(t,n,o,r){r.$asyncValidators.uniqueEmail=e}}}]),Logger.factory("isEmailAvailable",["$q","$http","$rootScope",function(e,t,n){var o={"btn-loading":'<i class="fa fa-spinner fa-pulse"></i>',"btn-success":'<i class="fa fa-check"></i>',"btn-error":'<i class="fa fa-remove"></i>',"msg-success":"All Good! Redirecting...","msg-username-available":"good username available!","msg-username-taken":"oops username taken","msg-email-taken":"email taken","msg-email-available":"email available","msg-your-phone-suck":"your phone is not valid",useAJAX:!0};return function(r){var i=e.defer();return t.get(n.endPoint+"/api/v1/users?email="+r+"&access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn").success(function(e){function t(){$(".register-form-main-message").removeClass("show success")}function n(){$(".register-form-main-message").removeClass("show error")}"email-available"==e?($(".register-form-main-message").addClass("show success").html(o["msg-email-available"]),setTimeout(t,2e3)):"email-taken"==e&&($(".register-form-main-message").addClass("show error").html(o["msg-email-taken"]),setTimeout(n,2e3)),i.reject();
}).error(function(){i.resolve()}),i.promise}}]),sync.controller("uploadDialogCtrl",["$scope","$uibModal","$mdDialog","$mdMedia",function(e,t,n,o){function r(e,t){e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.answer=function(e){t.hide(e)}}e.cancel=function(){n.hide()},e.customFullscreen=o("xs")||o("sm"),e.upload=function(t){n.show({parent:angular.element(document.body),controller:r,templateUrl:"views/upload.tpl.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!1}).then(function(t){e.status='You said the information was "'+t+'".'},function(){e.status="You cancelled the dialog."})},r.$inject=["$scope","$mdDialog"]}]),sync.controller("shareController",["$scope","$uibModal","$mdDialog","$mdMedia","urlShortener","Share","User",function(e,t,n,o,r,i,s){e.cancel=function(){n.hide()},e.customFullscreen=o("xs")||o("sm"),e.share=function(t,o){function i(e,t){e.getFile=function(){return e.file=r.makeShort(o)},e.hide=function(){t.hide()},e.cancel=function(){t.cancel()},e.answer=function(e){t.hide(e)}}n.show({parent:angular.element(document.body),controller:i,templateUrl:"views/share.tpl.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!1}).then(function(t){e.status='You said the information was "'+t+'".'},function(){e.status="You cancelled the dialog."}),i.$inject=["$scope","$mdDialog"]},e.shareFile=function(e){var t,n=e.emails,o=n.split(",");for(t=0;t<o.length;t++)i.share(e).then(function(e){console.log(e)})["catch"]()}}]),sync.service("Files",["$http","$q","$rootScope",function(e,t,n){return this.getGroupFiles=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/groups/"+o+"/groupfiles").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.single=function(o){var r=t.defer();return e.get(n.endPoint+"/preview/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getBoxFiles=function(){var o=1,r=t.defer();return e.get(n.endPoint+"/api/v1/files/"+o+"/boxfiles").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getMimeType=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/files/mimeType/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.downloadFile=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/files/download/"+o+"/of/StrimUp").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("People",["$q","$http","$rootScope",function(e,t,n){return this.get=function(){var o=e.defer();return t.get(n.endPoint+"/api/v1/suggestions").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this.allIfollow=function(){var o=e.defer();return t.get(n.endPoint+"/api/v1/me/followings").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this.unFollow=function(o){var r=e.defer();return t["delete"](n.endPoint+"/api/v1/me/following/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.follow=function(o){var r=e.defer();return t.put(n.endPoint+"/api/v1/me/followings",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Share",["$log","$http","$q","$rootScope",function(e,t,n,o){return this.share=function(e){var r=n.defer();return t.post(o.endPoint+"/api/v1/share",e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.getUser=function(e){var r=n.defer();return t.get(o.endPoint+"/api/v1/me/users/"+e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.fileMime=function(e){var r=n.defer();return t.get(o.endPoint+"/api/v1/mimeType/"+e).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("User",["$http","$q","$rootScope",function(e,t,n){return this.info=function(){var o=t.defer();return e.get(n.endPoint+"/api/v1/users/info").success(function(e){o.resolve(e)}).error(function(){o.reject()}),o.promise},this.groups=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/me/groups").success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Notification",["$http","$q","$rootScope",function(e,t,n){return this.getNotification=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/notifications",{cache:!1}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.createNotification=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/notifications",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.deleteNotification=function(o){var r=t.defer();return e["delete"](n.endPoint+"/api/v1/notifications/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("notificationController",["$scope","Notification","$log",function(e,t,n){e.init=function(){e.getNotification()},e.clearNotification=function(n){t.clearNotification(n).then(function(t){e.getNotification()},function(e){console.log(e)})},e.getNotification=function(){t.getNotification().then(function(t){e.notifications=t},function(e){})},e.init()}]),sync.directive("notify",[function(){return{restrict:"AE",scope:{},link:function(e,t,n){function o(e,t,n){if(!Notification)return void console.log("Desktop notifications not available in your browser..");if("granted"!==Notification.permission)Notification.requestPermission();else{var o=new Notification(e,{icon:"https://lh3.googleusercontent.com/-aCFiK4baXX4/VjmGJojsQ_I/AAAAAAAANJg/h-sLVX1M5zA/s48-Ic42/eggsmall.png",body:t});o.onclick=function(){window.open(n)},o.onclose=function(){console.log("Notification closed")}}}setTimeout(function(){var e="This will be title",t="Most popular article.",n="sync.com:8000";o(e,t,n)},2e3),document.addEventListener("DOMContentLoaded",function(){"granted"!==Notification.permission&&Notification.requestPermission()})}}}]),sync.factory("userInteractionNotification",function(){return{success:function(e){toastr.success(e,"Success")},warn:function(e){toastr.warning(e,"Hey")},info:function(e){toastr.info(e,"FYI")},error:function(e){toastr.error(e,"Oh No")}}}),sync.factory("userInteractionNotification",function(){return{success:function(e){toastr.success(e,"Success")},warn:function(e){toastr.warning(e,"Hey")},info:function(e){toastr.info(e,"FYI")},error:function(e){toastr.error(e,"Oh No")}}}),sync.service("Post",["$http","$q","$rootScope",function(e,t,n){return this.getPost=function(o){var r=t.defer();return e.get(n.endPoint+"/api/v1/me/posts?user_id"+o,{cache:!1}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.participate=function(o){var r=t.defer();return e.put(n.endPoint+"/api/v1/me/posts/",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.createPost=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/me/posts",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.deletePost=function(o){var r=t.defer();return e["delete"](n.endPoint+"/api/v1/me/posts/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("PostingController",["$scope","Post","$timeout","User","$interval","Notification","$log","userInteractionNotification",function(e,t,n,o,r,i,s,a,u){e.init=function(){e.postLoader(),e.getUser()},r(function(){e.postLoader()},8e3),e.getUser=function(){o._id().then(function(t){e.user=t,console.log(t)},function(e){})},e.loadMore=function(){},e.participateIntoPost=function(n,o){var r={post_id:n,user_id:o};t.participate(r).then(function(t){e.postLoader()},function(e){})},e.postLoader=function(){e.dataLoading=!0,t.getPost().then(function(t){e.posts=t,e.friends=[],e.replies=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("friends")&&t[n].replies&&t[n].friends?(e.friends.push(t[n].friends),e.replies.push(t[n].replies)):t[n].hasOwnProperty("friends")&&(e.friends=friends.concat(traverse(t[n].friends)),e.replies=replies.concat(traverse(t[n].replies)))},function(e){})},e.imageDesc=function(e){switch(e){case 0:return"60px";case 1:return"60px";case 2:return"60px";case 3:return"60px";case 4:return"60px";default:return"60px"}console.log(e)},e.share=function(e){s.closeOptionButtons(),a.info(e)},e.createPost=function(n){var o={message:n};t.createPost(o).then(function(t){e.message="",e.posts.push(t),u.success("New Post feed created!")},function(e){})},e.init()}]),sync.directive("feedsUploader",[function(){return{restrict:"AE",replace:!1,templateUrl:"App/js/scripts/views/feedAttachment.html",scope:{action:"@"},controller:["$scope",function(e){e.progress=0,e.avatar="",e.sendFile=function(t){var n=$(t).parents("form");return""===$(t).val()?!1:(n.attr("action",e.action),e.$apply(function(){e.progress=0}),void n.ajaxSubmit({type:"POST",beforeSend:function(e){e.setRequestHeader("authorization","Bearer OqFirQS44RQTjRuWniXjdHZJQXdCuEx49rq8JY5A")},uploadProgress:function(t,n,o,r){e.$apply(function(){})},error:function(e,t,o,r){n.removeAttr("action")},success:function(o,r,i,s){var a=$(t).val().split("\\"),u=a[a.length-1];n.removeAttr("action"),e.$apply(function(){e.avatar=u})}}))}}],link:function(e,t,n,o){t.find(".fake-uploader").click(function(){t.find('input[type="file"]').click()})}}}]),sync.controller("FilesController",["$scope","Files","$log","$window","User","$uibModal","$interval","pdfDelegate","$timeout","$stateParams","$rootScope","$exceptionHandler",function(e,t,n,o,r,i,s,a,u,c,l,f){e.init=function(){e.all()},e.all=function(){e.dataLoading=!0,t.getBoxFiles().then(function(t){e.files=t,console.log(t)},function(e){console.log(e)})["finally"](function(){e.dataLoading=!1})},e.fileType=function(e){switch(e){case"pdf":return"img/pdf.png";case"folder":return"img/universal_folder.png";case"folder+":return"img/Add_folder.png";case"php":return"img/code.png";case"txt":return"img/code.png";case"docx":return"img/word.png";case"jpg":return"fa fa-image";case"png":return"img/video.png";case"jpeg":return"img/universal_folder.png";case"zip":return"img/zip.png";default:return"img/universal_folder.png"}},e.init()}]),sync.directive("draggable",function(){return{restrict:"AE",link:function(e,t,n){var o=t[0];o.draggable=!0,o.addEventListener("dragstart",function(e){return e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("Text",this.id),this.classList.add("drag"),!1},!1),o.addEventListener("dragend",function(e){return this.classList.remove("drag"),!1},!1)}}}),sync.directive("droppable",["userInteractionNotification","Files",function(e,t){return{scope:{drop:"&",bin:"="},link:function(e,t){var n=t[0];n.addEventListener("dragover",function(e){return e.dataTransfer.dropEffect="move",e.preventDefault&&e.preventDefault(),this.classList.add("over"),!1},!1),n.addEventListener("dragenter",function(e){return this.classList.add("over"),!1},!1),n.addEventListener("dragleave",function(e){return this.classList.remove("over"),!1},!1),n.addEventListener("drop",function(t){t.stopPropagation&&t.stopPropagation(),this.classList.remove("over");var n=this.id,o=document.getElementById(t.dataTransfer.getData("Text"));try{return this.appendChild(o),e.$apply(function(e){var t=e.drop();"undefined"!=typeof t&&t(o.id,n)}),!1}catch(t){}},!1)}}}]),sync.controller("DragDropCtrl",["$scope","Files","$interval",function(e,t,n){e.handleDrop=function(){}}]),sync.controller("previewController",["$scope","pdfDelegate","$timeout","$stateParams","$rootScope","$exceptionHandler","Files","FileSaver","Blob",function(e,t,n,o,r,i,s,a,u){if(o.preview&&"pdf"==o.extension){e.previewable=!0;try{e.pdfUrl=r.endPoint+"/preview/"+o.preview+"/of/StrimUp",n(function(){t.$getByHandle("my-pdf-container").zoomIn(.5)},3e3)}catch(c){throw new Error(c)}}else o.preview&&"jpg"==o.extension||"png"==o.extension?(e.file_name=o.preview,e.previewable=!1):(e.file_name=o.preview,e.previewable=!1);e.goNext=function(){e.increment=1,t.$getByHandle("my-pdf-container").next(e.increment+1)},e.goPrev=function(n){t.$getByHandle("my-pdf-container").prev(e.increment-1)}}]),sync.directive("fileDownload",[function(){return{restrict:"A",replace:!0,template:'<button class="btn btn-default" data-ng-click="download()"><span class=""></span>Download</button>',controller:["$rootScope","$scope","$element","$attrs","$timeout",function(e,t,n,o,r){function i(e){u()}function s(t){e.$broadcast("dialogs.wait.complete")}function a(e,t){}function u(){r(function(){t.progress<95&&(t.progress+=(96-t.progress)/2,u())},250)}t.progress=0,t.download=function(){t.progress=0,$.fileDownload("http://syncme.com:8000/api/v1/files/download/phpxFnlheDVE5j5mcVDX.png/of/StrimUp?access_token=Bc7DWS7KKRLtxmddUZI1T1lZu2J1YhR8OLXGWNZn",{prepareCallback:i,successCallback:s,failCallback:a})}}]}}]),sync.controller("PeopleController",["$scope","People",function(e,t){e.init=function(){e.getPeopleToFollow()},e.getPeopleToFollow=function(){t.get().then(function(t){e.people=t},function(e){})},e.$on("followMember",function(n,o){n.preventDefault(),t.follow(o).then(function(t){e.getPeopleToFollow()},function(e){console.log(e)})}),e.follow=function(t){var n={id:t,option:"addPeople"};e.$emit("followMember",n)},e.init()}]),sync.service("Group",["$http","$rootScope","$q",function(e,t,n){return this.create=function(o){var r=n.defer();return e.post(t.endPoint+"/api/v1/me/groups",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this["delete"]=function(o){var r=n.defer();return e["delete"](t.endPoint+"/api/v1/me/groups/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.myGroups=function(){var o=n.defer();return e.get(t.endPoint+"/api/v1/me/groups").success(function(e){o.resolve(e)}).error(function(e){console.log("differed slow:"+e),o.reject(e)}),o.promise},this.addPeople=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.resolve(e)}),r.promise},this.addFileToGroup=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.removePeople=function(o){var r=n.defer();return e.put(t.endPoint+"/api/v1/me/groups/"+JSON.stringify(o)).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this.suggestPeople=function(o){var r=n.defer();return e.get(t.endPoint+"/api/v1/me/groups/"+o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.controller("GroupController",["$scope","Group","User","Files","userInteractionNotification",function(e,t,n,o,r){e.init=function(){e.myGroups(),e.suggestedPeopleToGroup()},e.userId=function(){n._id().then(function(t){e.userId=t},function(e){console.log(e)})},e.myGroups=function(){t.myGroups().then(function(t){e.group=t},function(e){})},e.suggestedPeopleToGroup=function(n){e.showFiles=!1,e.showGroup=!1,e.showBox=!1,angular.isUndefined(n)||t.suggestPeople(n).then(function(t){e.followers=t},function(e){console.log(e)})},e.$on("refreshGroup",function(){e.init()}),e.$on("groupDeleted",function(t,n){t.preventDefault(),e.myGroups()}),e.$on("groupTobindwith",function(t,n){t.preventDefault(),e.emitted=n,1==e.showFiles&&(e.showFiles=!1),e.suggestedPeopleToGroup(n),e.addPeople=!0}),e.getGroupFiles=function(t){o.getGroupFiles(t).then(function(t){e.files=t,e.groups=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("groups")&&t[n].groups?e.groups.push(t[n].friends):t[n].hasOwnProperty("groups")&&(e.groups=groups.concat(traverse(t[n].groups)))},function(e){console.log(e)})},e.getBoxFiles=function(t){e.emitted=t,o.getBoxFiles(t).then(function(t){e.files=t,e.groups=[];for(var n=0;n<t.length;n++)t[n].hasOwnProperty("groups")&&t[n].groups?e.groups.push(t[n].friends):t[n].hasOwnProperty("groups")&&(e.groups=groups.concat(traverse(t[n].groups)))},function(e){console.log(e)})},e.$on("showOptions",function(t,n){"box"===n.owner?(e.addPeople=!1,e.showGroup=!1,e.showBox=!0,1==e.addPeople&&(e.addPeople=!1),e.getBoxFiles(n.group_id)):"group"===n.owner&&(e.showBox=!1,e.addPeople=!1,e.showGroup=!0,1==e.addPeople&&(e.addPeople=!1),e.getGroupFiles(n.group_id))}),e.init()}]),sync.directive("myGroups",["Group","Report","userInteractionNotification",function(e,t,n,o){return{priority:10,templateUrl:"App/scripts/js/directives/groups.html",restrict:"E",scope:{id:"=userId",groups:"=",followers:"=",emitted:"=",showPeople:"=",showGroup:"=",files:"=",showBox:"="},link:function(o,r,i){o.deleteGroup=function(r){e["delete"](r).then(function(e){n.info("Group deleted"),o.$emit("groupDeleted","group deleted")},function(e){t.send("delete group error:"+e).then(function(){},function(){})})},o.createGroup=function(t){e.create(t).then(function(e){n.success("Created new Group"),o.$emit("refreshGroup",null)},function(e){console.log(e)})},o.initAddPeople=function(e){o.$emit("groupTobindwith",e)},o.addPeople=function(t){var r={option:"addMember",userId:t.userId,groupId:t.groupId};angular.isUndefined(t)||e.addPeople(r).then(function(e){n.success("Added Member in group."),o.initAddPeople(t.groupId),o.$emit("refreshGroup",""),console.log(e)},function(e,t){console.log(e)})},o.removePeople=function(t){var r={option:"removeMember",userId:t.userId,groupId:t.groupId};angular.isUndefined(t)||e.removePeople(r).then(function(e){n.info("Removed Member in group."),o.initAddPeople(t.groupId),o.$emit("refreshGroup",""),console.log(e)},function(e,t){console.log(e)})},o.removeFromGroup=function(){console.log("we can remove file in group")},o.addFileToGroup=function(t){var o={option:"addFiles",fileId:t.fileId,groupId:t.groupId};e.addFileToGroup(o).then(function(e){console.log(e)},function(e){n.warn("Some error occured during adding file")})},o.filesInBox=function(e){var t={group_id:e,owner:"box"};o.$emit("showOptions",t)},o.filesInGroup=function(e){var t={group_id:e,owner:"group"};o.$emit("showOptions",t)}}}}]),sync.service("Report",[function(e,t,n){return this.send=function(o){var r=t.defer();return e.post(n.endPoint+"/api/v1/issues",o).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},this}]),sync.service("Settings",["$http","$rootScope","$q",function(e,t,n){return this.current=function(){var o=n.defer();return e.get(t.endPoint+"/api/v1/settings").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise},this}]),sync.controller("SettingsController",["$scope","Settings","$log",function(e,t,n){e.init=function(){e.loadCurrentSettings()},e.loadCurrentSettings=function(){t.current().then(function(t){e.settings=t},function(e){n.info("errror prevent promise to be fullfill")})},e.init()}]),sync.controller("ShareController",["$scope","$rootScope","$routeParams","$route","$log","$uibModal","Share","User",function(e,t,n,o,r,i,s,a){e.share=function(e){console.log(e)}}]),angular,sync.controller("UploadController",["$scope","FileUploader","$rootScope","Files",function(e,t,n,o){var r=e.uploader=new t({url:n.endPoint+"/api/v1/upload"});r.filters.push({name:"customFilter",fn:function(e,t){return this.queue.length<10}}),r.onWhenAddingFileFailed=function(e,t,n){console.info("onWhenAddingFileFailed",e,t,n)},r.onAfterAddingFile=function(e){console.info("onAfterAddingFile",e)},r.onAfterAddingAll=function(e){console.info("onAfterAddingAll",e)},r.onBeforeUploadItem=function(e){console.info("onBeforeUploadItem",e)},r.onProgressItem=function(e,t){console.info("onProgressItem",e,t)},r.onProgressAll=function(e){console.info("onProgressAll",e)},r.onSuccessItem=function(e,t,n,o){console.info("onSuccessItem",e,t,n,o)},r.onErrorItem=function(e,t,n,o){console.info("onErrorItem",e,t,n,o)},r.onCancelItem=function(e,t,n,o){console.info("onCancelItem",e,t,n,o)},r.onCompleteItem=function(e,t,n,o){console.info("onCompleteItem",e,t,n,o)},r.onCompleteAll=function(){o.getBoxFiles().then(function(t){e.files=t},function(e){console.log(e)})["finally"](function(){e.dataLoading=!1}),console.info("onCompleteAll")},console.info("uploader",r)}]),sync.service("urlShortener",[function(){this.makeShort=function(e){return e}}]),Array.remove=function(e,t,n){var o=e.slice((n||t)+1||e.length);return e.length=0>t?e.length+t:t,e.push.apply(e,o)};var total_popups=0,popups=[];$(document).ready(function(){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}}),$("#chat").keypress(function(e){if(13==e.which){alert("we are listning to enter event");var t=$("#shout_username").val(),n=$("#shout_message").val();post_data={username:t,message:n},$.post("shout.php",post_data,function(e){$(e).hide().appendTo(".message_box").fadeIn();var t=$(".message_box")[0].scrollHeight;$(".message_box").scrollTop(t),$("#shout_message").val("")}).fail(function(e){alert(e.statusText)})}}),$(".close_btn").click(function(e){var t=$(".toggle_chat").css("display");$(".toggle_chat").slideToggle(),"block"==t?$(".header div").attr("class","open_btn"):$(".header div").attr("class","close_btn")})}),window.addEventListener("resize",calculate_popups),window.addEventListener("load",calculate_popups),sync.controller("MessageController",["$http","$scope","$q","$rootScope",function(e,t,n,o){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}}),t.name="Muragijimana";var r=e.get(o.endPoint+"/api/v1/post"),i=e.get(o.endPoint+"/api/v1/post");n.all([r,i]).then(function(e){var t=[];return angular.forEach(e,function(e){t.push(e.data)}),t}).then(function(e){t.posts=e[0]}),$(".post-in").atwho({at:"@",data:["Peter","Tom","Anne"]})}]),sync.controller("TutorialModal",["$scope",function(e){e.open=function(){e.showModal=!0},e.ok=function(){e.showModal=!1},e.cancel=function(){e.showModal=!1}}]),sync.controller("StriminModal",["$scope",function(e){e.open=function(){e.showModal=!0},e.ok=function(){e.showModal=!1},e.cancel=function(){e.showModal=!1}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlZWRzL2NvbnRyb2xsZXIvY2hhdFBvcHVwQ29udHJvbGxlci5qcyIsImFuZ3VsYXItdXBsb2FkLmpzIiwiYXBwQ29uZmlnLmpzIiwiYnV0dG9uLmpzIiwiZGlyZWN0aXZlcy5qcyIsImxvZ2luQ29udHJvbGxlci5qcyIsInJlZ2lzdGVyQ29udHJvbGxlci5qcyIsImRpYWxvZ3MvZGlhbG9nQ3RybC5qcyIsIm1vZHVsZXMuanMiLCJjb21tb24vRmlsZVNlcnZpY2UuanMiLCJjb21tb24vUGVvcGxlU2VydmljZS5qcyIsImNvbW1vbi9TaGFyZVNlcnZpY2UuanMiLCJjb21tb24vVXNlclNlcnZpY2UuanMiLCJjb21tb24vbm90aWZpY2F0aW9uLmpzIiwiY29tbW9uL3VzZXJJbnRlcmFjdGlvbk1hbmFnZXIuanMiLCJjb21tb24vdXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLmpzIiwiZmVlZHMvZmVlZHMuanMiLCJmaWxlcy9maWxlLmpzIiwiZmlsZXMvcHJldmlldy5qcyIsImZvbGxvd2Vycy9mb2xsb3dlcnMuanMiLCJncm91cHMvZ3JvdXBzLmpzIiwic2V0dGluZ3Mvc2V0dGluZ3MuanMiLCJzaGFyaW5nL3NoYXJpbmcuanMiLCJ1cGxvYWRlci91cGxvYWRlci5qcyIsInVybFNob3J0bmVyL3Nob3J0bmVyLmpzIiwiZmVlZHMvY29udHJvbGxlci9tZXNzYWdlQ29udHJvbGxlci5qcyIsImZlZWRzL2NvbnRyb2xsZXIvbW9kZWwuanMiXSwibmFtZXMiOlsiY2xvc2VfcG9wdXAiLCJpZCIsImlpaSIsInBvcHVwcyIsImxlbmd0aCIsIkFycmF5IiwicmVtb3ZlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsImNhbGN1bGF0ZV9wb3B1cHMiLCJkaXNwbGF5X3BvcHVwcyIsInJpZ2h0IiwidG90YWxfcG9wdXBzIiwidW5kZWZpbmVkIiwiZWxlbWVudCIsImpqaiIsInJlZ2lzdGVyX3BvcHVwIiwibmFtZSIsInVuc2hpZnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlubmVySFRNTCIsIndpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsInBhcnNlSW50Iiwicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9pbnRlcm9wUmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJDT05GSUciLCJvcHRpb25zIiwic2VydmljZUZpbGVVcGxvYWRlciIsInNlcnZpY2VGaWxlTGlrZU9iamVjdCIsInNlcnZpY2VGaWxlSXRlbSIsInNlcnZpY2VGaWxlRGlyZWN0aXZlIiwic2VydmljZUZpbGVTZWxlY3QiLCJzZXJ2aWNlRmlsZURyb3AiLCJzZXJ2aWNlRmlsZU92ZXIiLCJkaXJlY3RpdmVGaWxlU2VsZWN0IiwiZGlyZWN0aXZlRmlsZURyb3AiLCJkaXJlY3RpdmVGaWxlT3ZlciIsImFuZ3VsYXIiLCJ2YWx1ZSIsImRpcmVjdGl2ZSIsInJ1biIsIkZpbGVVcGxvYWRlciIsIkZpbGVMaWtlT2JqZWN0IiwiRmlsZUl0ZW0iLCJGaWxlRGlyZWN0aXZlIiwiRmlsZVNlbGVjdCIsIkZpbGVEcm9wIiwiRmlsZU92ZXIiLCJ1cmwiLCJhbGlhcyIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwicXVldWUiLCJwcm9ncmVzcyIsImF1dG9VcGxvYWQiLCJyZW1vdmVBZnRlclVwbG9hZCIsIm1ldGhvZCIsImZpbHRlcnMiLCJmb3JtRGF0YSIsInF1ZXVlTGltaXQiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJrZXkiLCJwcm9wIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiY29weSIsImV4dGVuZCIsImZvckVhY2giLCJpc09iamVjdCIsImlzTnVtYmVyIiwiaXNEZWZpbmVkIiwiaXNBcnJheSIsImZpbGVVcGxvYWRlck9wdGlvbnMiLCIkcm9vdFNjb3BlIiwiJGh0dHAiLCIkd2luZG93IiwiRmlsZSIsIkZvcm1EYXRhIiwic2V0dGluZ3MiLCJpc1VwbG9hZGluZyIsIl9uZXh0SW5kZXgiLCJfZmFpbEZpbHRlckluZGV4IiwiX2RpcmVjdGl2ZXMiLCJzZWxlY3QiLCJkcm9wIiwib3ZlciIsImZuIiwiX3F1ZXVlTGltaXRGaWx0ZXIiLCJfZm9sZGVyRmlsdGVyIiwiYWRkVG9RdWV1ZSIsImZpbGVzIiwiX3RoaXMiLCJsaXN0IiwiaXNBcnJheUxpa2VPYmplY3QiLCJhcnJheU9mRmlsdGVycyIsIl9nZXRGaWx0ZXJzIiwiY291bnQiLCJhZGRlZEZpbGVJdGVtcyIsInNvbWUiLCJ0ZW1wIiwiX2lzVmFsaWRGaWxlIiwiZmlsZUl0ZW0iLCJwdXNoIiwiX29uQWZ0ZXJBZGRpbmdGaWxlIiwiZmlsdGVyIiwiX29uV2hlbkFkZGluZ0ZpbGVGYWlsZWQiLCJfb25BZnRlckFkZGluZ0FsbCIsIl9nZXRUb3RhbFByb2dyZXNzIiwiX3JlbmRlciIsInVwbG9hZEFsbCIsInJlbW92ZUZyb21RdWV1ZSIsImluZGV4IiwiZ2V0SW5kZXhPZkl0ZW0iLCJpdGVtIiwiY2FuY2VsIiwic3BsaWNlIiwiX2Rlc3Ryb3kiLCJjbGVhclF1ZXVlIiwidXBsb2FkSXRlbSIsInRyYW5zcG9ydCIsImlzSFRNTDUiLCJfcHJlcGFyZVRvVXBsb2FkaW5nIiwiY2FuY2VsSXRlbSIsImFib3J0IiwiaXRlbXMiLCJnZXROb3RVcGxvYWRlZEl0ZW1zIiwidXBsb2FkIiwiY2FuY2VsQWxsIiwiaXNGaWxlIiwiY29uc3RydWN0b3IiLCJpc0ZpbGVMaWtlT2JqZWN0IiwiaW5kZXhPZiIsImlzVXBsb2FkZWQiLCJnZXRSZWFkeUl0ZW1zIiwiaXNSZWFkeSIsInNvcnQiLCJpdGVtMSIsIml0ZW0yIiwiZGVzdHJveSIsIm9iamVjdCIsIm9uQWZ0ZXJBZGRpbmdBbGwiLCJmaWxlSXRlbXMiLCJvbkFmdGVyQWRkaW5nRmlsZSIsIm9uV2hlbkFkZGluZ0ZpbGVGYWlsZWQiLCJvbkJlZm9yZVVwbG9hZEl0ZW0iLCJvblByb2dyZXNzSXRlbSIsIm9uUHJvZ3Jlc3NBbGwiLCJvblN1Y2Nlc3NJdGVtIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJvbkVycm9ySXRlbSIsIm9uQ2FuY2VsSXRlbSIsIm9uQ29tcGxldGVJdGVtIiwib25Db21wbGV0ZUFsbCIsIm5vdFVwbG9hZGVkIiwidXBsb2FkZWQiLCJyYXRpbyIsImN1cnJlbnQiLCJNYXRoIiwicm91bmQiLCJuYW1lcyIsIm1hdGNoIiwiJCRwaGFzZSIsIiRhcHBseSIsInNpemUiLCJ0eXBlIiwiZmlsZSIsImV2ZXJ5IiwiX2lzU3VjY2Vzc0NvZGUiLCJfdHJhbnNmb3JtUmVzcG9uc2UiLCJoZWFkZXJzR2V0dGVyIiwiX2hlYWRlcnNHZXR0ZXIiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtRm4iLCJfcGFyc2VIZWFkZXJzIiwidmFsIiwiaSIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInNsaWNlIiwidHJpbSIsInRvTG93ZXJDYXNlIiwicGFyc2VkSGVhZGVycyIsIl94aHJUcmFuc3BvcnQiLCJ4aHIiLCJfeGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJmb3JtIiwiX29uQmVmb3JlVXBsb2FkSXRlbSIsImFwcGVuZCIsIl9maWxlIiwib25wcm9ncmVzcyIsImV2ZW50IiwibGVuZ3RoQ29tcHV0YWJsZSIsInRvdGFsIiwiX29uUHJvZ3Jlc3NJdGVtIiwib25sb2FkIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiZ2lzdCIsIl9vbkNvbXBsZXRlSXRlbSIsIm9uZXJyb3IiLCJfb25FcnJvckl0ZW0iLCJvbmFib3J0IiwiX29uQ2FuY2VsSXRlbSIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIl9pZnJhbWVUcmFuc3BvcnQiLCJpZnJhbWUiLCJEYXRlIiwibm93IiwiaW5wdXQiLCJfaW5wdXQiLCJfZm9ybSIsInJlcGxhY2VXaXRoIiwiZWxlbWVudF8iLCJhY3Rpb24iLCJlbmN0eXBlIiwiZW5jb2RpbmciLCJiaW5kIiwiaHRtbCIsImNvbnRlbnREb2N1bWVudCIsImJvZHkiLCJlIiwiZHVtbXkiLCJfb25TdWNjZXNzSXRlbSIsInVuYmluZCIsImFmdGVyIiwic3VibWl0IiwiX29uQmVmb3JlVXBsb2FkIiwiX29uUHJvZ3Jlc3MiLCJfb25TdWNjZXNzIiwiX29uRXJyb3IiLCJfb25DYW5jZWwiLCJfb25Db21wbGV0ZSIsIm5leHRJdGVtIiwiaW5oZXJpdCIsInNvdXJjZSIsImNyZWF0ZSIsInN1cGVyXyIsIiRpbmplY3QiLCJpc0VsZW1lbnQiLCJpc1N0cmluZyIsImZpbGVPcklucHV0IiwiaXNJbnB1dCIsImZha2VQYXRoT3JPYmplY3QiLCJwb3N0Zml4IiwiX2NyZWF0ZUZyb21GYWtlUGF0aCIsInBhdGgiLCJsYXN0TW9kaWZpZWREYXRlIiwibGFzdEluZGV4T2YiLCJfY3JlYXRlRnJvbU9iamVjdCIsIiRjb21waWxlIiwidXBsb2FkZXIiLCJpc1N1Y2Nlc3MiLCJpc0NhbmNlbCIsImlzRXJyb3IiLCJfcmVwbGFjZU5vZGUiLCJvbkJlZm9yZVVwbG9hZCIsIm9uUHJvZ3Jlc3MiLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwib25DYW5jZWwiLCJvbkNvbXBsZXRlIiwiY2xvbmUiLCJzY29wZSIsImNzcyIsIl9zYXZlTGlua3MiLCJldmVudHMiLCJfZ2V0IiwiZ2V0IiwicHJvcGVydHkiLCJyZWNlaXZlciIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJwYXJlbnQiLCJnZXRQcm90b3R5cGVPZiIsImdldHRlciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImVudW1lcmFibGUiLCJfX3Byb3RvX18iLCJfRmlsZURpcmVjdGl2ZSIsImV4dGVuZGVkT3B0aW9ucyIsIiRkZXN0cm95IiwiY2hhbmdlIiwicmVtb3ZlQXR0ciIsImdldE9wdGlvbnMiLCJnZXRGaWx0ZXJzIiwiaXNFbXB0eUFmdGVyU2VsZWN0aW9uIiwiYXR0ciIsIm9uQ2hhbmdlIiwiZHJhZ292ZXIiLCJkcmFnbGVhdmUiLCJvbkRyb3AiLCJ0cmFuc2ZlciIsIl9nZXRUcmFuc2ZlciIsIl9wcmV2ZW50QW5kU3RvcCIsIl9yZW1vdmVPdmVyQ2xhc3MiLCJvbkRyYWdPdmVyIiwiX2hhdmVGaWxlcyIsInR5cGVzIiwiZHJvcEVmZmVjdCIsIl9hZGRPdmVyQ2xhc3MiLCJvbkRyYWdMZWF2ZSIsImN1cnJlbnRUYXJnZXQiLCJkYXRhVHJhbnNmZXIiLCJvcmlnaW5hbEV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjb250YWlucyIsImFkZE92ZXJDbGFzcyIsInJlbW92ZU92ZXJDbGFzcyIsIm92ZXJDbGFzcyIsImFkZENsYXNzIiwiZ2V0T3ZlckNsYXNzIiwicmVtb3ZlQ2xhc3MiLCIkcGFyc2UiLCJsaW5rIiwiYXR0cmlidXRlcyIsIiRldmFsIiwic2VydmljZSIsInVzZXJJc0F1dGhlbnRpY2F0ZWQiLCJzZXRVc2VyQXV0aGVudGljYXRlZCIsImdldFVzZXJBdXRoZW50aWNhdGVkIiwic3luYyIsIkxvZ2dlciIsImVuZFBvaW50Iiwicm91dGVzIiwiL0ZpbGVzIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwicmVxdWlyZUxvZ2luIiwicHJldmlldyIsIi9Hcm91cHMiLCIkbG9nIiwiJG9uIiwibmV4dCIsIlNlc3Npb25TZXJ2aWNlIiwiYWxlcnQiLCJwcm92aWRlciIsIiRleGNlcHRpb25IYW5kbGVyIiwiaGFuZGxlciIsImV4Y2VwdGlvbiIsImNhdXNlIiwiY29uc29sZSIsImxvZyIsIiRnZXQiLCJjb25maWciLCIkc2NlUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiY2ZwTG9hZGluZ0JhclByb3ZpZGVyIiwiY29tbW9uIiwicG9zdCIsImVuYWJsZWQiLCJpbmNsdWRlQmFyIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkc2NvcGUiLCJzdGF0ZSIsIm90aGVyd2lzZSIsIm1mYiIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0IiwicmVzdHJpY3QiLCJyZXF1aXJlIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCJtZmJNZW51Q29udHJvbGxlciIsImNsb3NlIiwiJHRpbWVvdXQiLCJ0cmFuc2NsdWRlIiwicmVwbGFjZSIsInBvc2l0aW9uIiwiZWZmZWN0IiwibGFiZWwiLCJyZXN0aW5nIiwiYWN0aXZlIiwibWFpbkFjdGlvbiIsIm1lbnVTdGF0ZSIsInRvZ2dsaW5nTWV0aG9kIiwiZWxlbSIsImF0dHJzIiwiY2xpY2tlZCIsIl9pc0hvdmVyQWN0aXZlIiwidG9nZ2xlIiwiaG92ZXJlZCIsIm9wZW5TdGF0ZSIsImNsb3NlZFN0YXRlIiwiX2lzVG91Y2hEZXZpY2UiLCJNb2Rlcm5penIiLCJ0b3VjaCIsInVzZUNsaWNrIiwiJG9ic2VydmUiLCJjdXJyZW50U3RhdGUiLCJpY29uIiwiZGF0YSIsInVzZXIiLCJwb3N0cyIsInJlcGxpZXMiLCJjcmVhdGVQb3N0IiwiaW52b2tlIiwiZWwiLCJNb3VzZXRyYXAiLCJvbiIsImNyZWRlZGVudGlhbC1ub3QtZm91bmQiLCJzdWNjZXNzIiwibG9naW4iLCJpbmZvIiwibm90VmVyaWZpZWQiLCJsb2NhdGlvbiIsImhyZWYiLCJSZWRpcmVjdGluZyIsIiQiLCJlcnJvciIsInBhc3N3b3JkLW5vdE1hdGNoIiwiU2lnblVwSW5Qcm9ncmVzcyIsInJlZ2lzdGVyIiwibWVzc2FnZVJlbW92ZSIsInNldFRpbWVvdXQiLCJ1c2VybmFtZSIsImVtYWlsIiwialF1ZXJ5IiwicGFzc3dvcmQiLCJvcHRpb24iLCJwaG9uZSIsInRleHRTdGF0dXMiLCJpc1VzZXJuYW1lQXZhaWxhYmxlIiwibmdNb2RlbCIsIiRhc3luY1ZhbGlkYXRvcnMiLCJ1bmlxdWVVc2VybmFtZSIsIiRxIiwiYnRuLWxvYWRpbmciLCJidG4tc3VjY2VzcyIsImJ0bi1lcnJvciIsIm1zZy1zdWNjZXNzIiwibXNnLXVzZXJuYW1lLWF2YWlsYWJsZSIsIm1zZy11c2VybmFtZS10YWtlbiIsIm1zZy1lbWFpbC10YWtlbiIsIm1zZy15b3VyLXBob25lLXN1Y2siLCJ1c2VBSkFYIiwiZGVmZXJyZWQiLCJkZWZlciIsInVzZXJuYW1lVGFrZW4iLCJyZWplY3QiLCJlcnIiLCJyZXNvbHZlIiwicHJvbWlzZSIsImlzRW1haWxBdmFpbGFibGUiLCJ1bmlxdWVFbWFpbCIsIm1zZy1lbWFpbC1hdmFpbGFibGUiLCJtZXNzYWdlRW1haWxUYWtlbiIsIiR1aWJNb2RhbCIsIiRtZERpYWxvZyIsIiRtZE1lZGlhIiwiRGlhbG9nQ29udHJvbGxlciIsImhpZGUiLCJhbnN3ZXIiLCJjdXN0b21GdWxsc2NyZWVuIiwiZXYiLCJzaG93IiwidGFyZ2V0RXZlbnQiLCJjbGlja091dHNpZGVUb0Nsb3NlIiwidGhlbiIsInVybFNob3J0ZW5lciIsIlNoYXJlIiwiVXNlciIsInNoYXJlIiwiZmlsZU5hbWUiLCJnZXRGaWxlIiwibWFrZVNob3J0Iiwic2hhcmVGaWxlIiwidm0iLCJlbWFpbHMiLCJlbWFpbF9hcnJheSIsInJlcyIsImdldEdyb3VwRmlsZXMiLCJncm91cElkIiwiZGlmZmVyZWQiLCJzaW5nbGUiLCJnZXRCb3hGaWxlcyIsImdldE1pbWVUeXBlIiwiZmlsZV9uYW1lIiwiZG93bmxvYWRGaWxlIiwiYWxsSWZvbGxvdyIsInVuRm9sbG93IiwiZm9sbG93IiwicGFyYW0iLCJzaGFyZWJsZU9iaiIsImdldFVzZXIiLCJmaWxlTWltZSIsImdyb3VwcyIsImdldE5vdGlmaWNhdGlvbiIsInVzZXJfaWQiLCJjYWNoZSIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsIk5vdGlmaWNhdGlvbiIsImRlbGV0ZU5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbiIsImluaXQiLCJjbGVhck5vdGlmaWNhdGlvbiIsInJlc3VsdCIsIm5vdGlmaWNhdGlvbnMiLCJpQXR0cnMiLCJub3RpZnlCcm93c2VyIiwidGl0bGUiLCJwZXJtaXNzaW9uIiwicmVxdWVzdFBlcm1pc3Npb24iLCJvbmNsaWNrIiwib25jbG9zZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtZXNzYWdlIiwidG9hc3RyIiwid2FybiIsIndhcm5pbmciLCJnZXRQb3N0IiwicGFydGljaXBhdGUiLCJkZWxldGVQb3N0IiwiUG9zdCIsIiRpbnRlcnZhbCIsIiRpb25pY0xpc3REZWxlZ2F0ZSIsInVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbiIsInBvc3RMb2FkZXIiLCJfaWQiLCJsb2FkTW9yZSIsInBhcnRpY2lwYXRlSW50b1Bvc3QiLCJwb3N0X2lkIiwiZGF0YUxvYWRpbmciLCJ0cmVlIiwiZnJpZW5kcyIsImhhc093blByb3BlcnR5IiwiY29uY2F0IiwidHJhdmVyc2UiLCJpbWFnZURlc2MiLCJjbG9zZU9wdGlvbkJ1dHRvbnMiLCJwb3N0aW5nIiwicG9zdENyZWF0ZWQiLCJhdmF0YXIiLCJzZW5kRmlsZSIsIiRmb3JtIiwicGFyZW50cyIsImFqYXhTdWJtaXQiLCJiZWZvcmVTZW5kIiwidXBsb2FkUHJvZ3Jlc3MiLCJldnQiLCJwb3MiLCJ0b3QiLCJwZXJjQ29tcGxldGUiLCJzdGF0dXNUZXh0IiwiYXIiLCJmaWxlbmFtZSIsImN0cmwiLCJmaW5kIiwiY2xpY2siLCJGaWxlcyIsInBkZkRlbGVnYXRlIiwiJHN0YXRlUGFyYW1zIiwiYWxsIiwiZmlsZVR5cGUiLCJkcmFnZ2FibGUiLCJlZmZlY3RBbGxvd2VkIiwic2V0RGF0YSIsImNsYXNzTGlzdCIsImFkZCIsImJpbiIsImJpbklkIiwiZ2V0RGF0YSIsImFwcGVuZENoaWxkIiwiaGFuZGxlRHJvcCIsIkZpbGVTYXZlciIsIkJsb2IiLCJleHRlbnNpb24iLCJwcmV2aWV3YWJsZSIsInBkZlVybCIsIiRnZXRCeUhhbmRsZSIsInpvb21JbiIsIkVycm9yIiwiZ29OZXh0IiwiaW5jcmVtZW50IiwiZ29QcmV2IiwicGFnZSIsInByZXYiLCJ0ZW1wbGF0ZSIsInByZXBhcmUiLCJmYWtlUHJvZ3Jlc3MiLCIkYnJvYWRjYXN0IiwiZG93bmxvYWQiLCJmaWxlRG93bmxvYWQiLCJwcmVwYXJlQ2FsbGJhY2siLCJzdWNjZXNzQ2FsbGJhY2siLCJmYWlsQ2FsbGJhY2siLCJQZW9wbGUiLCJnZXRQZW9wbGVUb0ZvbGxvdyIsInBlb3BsZSIsInBhcmFtcyIsIiRlbWl0IiwibXlHcm91cHMiLCJhZGRQZW9wbGUiLCJtZW1iZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkRmlsZVRvR3JvdXAiLCJmaWxlT2JqIiwicmVtb3ZlUGVvcGxlIiwic3VnZ2VzdFBlb3BsZSIsIkdyb3VwIiwic3VnZ2VzdGVkUGVvcGxlVG9Hcm91cCIsInVzZXJJZCIsImdyb3VwIiwic2hvd0ZpbGVzIiwic2hvd0dyb3VwIiwic2hvd0JveCIsImlzVW5kZWZpbmVkIiwiZm9sbG93ZXJzIiwiYXJncyIsImdyb3VwaWQiLCJlbWl0dGVkIiwib3duZXIiLCJfIiwiZ3JvdXBfaWQiLCJSZXBvcnQiLCJwcmlvcml0eSIsInNob3dQZW9wbGUiLCJpRWxlbWVudCIsImRlbGV0ZUdyb3VwIiwiY3JlYXRlR3JvdXAiLCJpbml0QWRkUGVvcGxlIiwibmV3UGFyYW1zIiwicmVtb3ZlRnJvbUdyb3VwIiwiZmlsZUlkIiwiZmlsZXNJbkJveCIsImZpbGVzSW5Hcm91cCIsImlzc3VlIiwicmVzcCIsIlNldHRpbmdzIiwibG9hZEN1cnJlbnRTZXR0aW5ncyIsIiRyb3V0ZVBhcmFtcyIsIiRyb3V0ZSIsImZpbGVfaWQiLCJsb25nVXJsIiwiYXJyYXkiLCJmcm9tIiwidG8iLCJyZXN0IiwiYXBwbHkiLCJyZWFkeSIsImFqYXhTZXR1cCIsIlgtQ1NSRi1UT0tFTiIsImtleXByZXNzIiwid2hpY2giLCJpdXNlcm5hbWUiLCJpbWVzc2FnZSIsInBvc3RfZGF0YSIsImFwcGVuZFRvIiwiZmFkZUluIiwic2Nyb2xsdG9oIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsVG9wIiwiZmFpbCIsInRvZ2dsZVN0YXRlIiwic2xpZGVUb2dnbGUiLCJpbnN0aXR1dGlvbnMiLCJ0bXAiLCJ0bXBSZXN1bHQiLCJhdHdobyIsImF0Iiwic2hvd01vZGFsIiwib2siXSwibWFwcGluZ3MiOiJBQVFZLFFBQVNBLGFBQVlDLEdBRWpCLElBQUksR0FBSUMsR0FBTSxFQUFHQSxFQUFNQyxPQUFPQyxPQUFRRixJQUVsQyxHQUFHRCxHQUFNRSxPQUFPRCxHQVFaLE1BTkFHLE9BQU1DLE9BQU9ILE9BQVFELEdBRXJCSyxTQUFTQyxlQUFlUCxHQUFJUSxNQUFNQyxRQUFVLFdBRTVDQyxvQkFRWixRQUFTQyxrQkFFTCxHQUFJQyxHQUFRLElBRVJYLEVBQU0sQ0FDVixLQUFJQSxFQUFXWSxhQUFOWixFQUFvQkEsSUFFekIsR0FBa0JhLFFBQWZaLE9BQU9ELEdBQ1YsQ0FDSSxHQUFJYyxHQUFVVCxTQUFTQyxlQUFlTCxPQUFPRCxHQUM3Q2MsR0FBUVAsTUFBTUksTUFBUUEsRUFBUSxLQUM5QkEsR0FBZ0IsSUFDaEJHLEVBQVFQLE1BQU1DLFFBQVUsUUFJaEMsSUFBSSxHQUFJTyxHQUFNZixFQUFLZSxFQUFNZCxPQUFPQyxPQUFRYSxJQUN4QyxDQUNJLEdBQUlELEdBQVVULFNBQVNDLGVBQWVMLE9BQU9jLEdBQzdDRCxHQUFRUCxNQUFNQyxRQUFVLFFBZ0VoQyxRQUFTUSxnQkFBZWpCLEVBQUlrQixHQUd4QixJQUFJLEdBQUlqQixHQUFNLEVBQUdBLEVBQU1DLE9BQU9DLE9BQVFGLElBR2xDLEdBQUdELEdBQU1FLE9BQU9ELEdBU1osTUFQQUcsT0FBTUMsT0FBT0gsT0FBUUQsR0FFckJDLE9BQU9pQixRQUFRbkIsT0FFZlUsbUJBT1IsSUFBSUssR0FBUSx5Q0FBMENmLEVBQUksSUFDdERlLElBQW1CLHlHQUNuQkEsR0FBbUIsNkJBQ25CQSxHQUFtQixrQ0FDbkJBLEdBQW1CLCtIQVN2QlQsU0FBU2MscUJBQXFCLFFBQVEsR0FBR0MsVUFBWWYsU0FBU2MscUJBQXFCLFFBQVEsR0FB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LFNBQVNzQyxHQUN6QyxHQUFJaUssS0FJSixPQUhBbm9CLFNBQVE0QyxRQUFRc2IsRUFBUSxTQUFTclcsR0FDL0JzZ0IsRUFBSXBqQixLQUFLOEMsRUFBUzRQLFFBRWIwUSxJQUNOdk0sS0FBSyxTQUFTd00sR0FHZmpULEVBQU93QyxNQUFReVEsRUFBVSxLQUU1QjFQLEVBQUUsWUFBWTJQLE9BQ1hDLEdBQUksSUFDSjdRLE1BQU0sUUFBUyxNQUFPLGFDekJsQ3hFLEtBQUtNLFdBQVcsaUJBQUEsU0FBaUIsU0FBUzRCLEdBRXhDQSxFQUFPNUosS0FBTyxXQUNaNEosRUFBT29ULFdBQVksR0FFckJwVCxFQUFPcVQsR0FBSyxXQUNWclQsRUFBT29ULFdBQVksR0FHckJwVCxFQUFPeFAsT0FBUyxXQUNkd1AsRUFBT29ULFdBQVksTUFLdkJ0VixLQUFLTSxXQUFXLGdCQUFBLFNBQWdCLFNBQVM0QixHQUV2Q0EsRUFBTzVKLEtBQU8sV0FDWjRKLEVBQU9vVCxXQUFZLEdBRXJCcFQsRUFBT3FULEdBQUssV0FDVnJULEVBQU9vVCxXQUFZLEdBR3JCcFQsRUFBT3hQLE9BQVMsV0FDZHdQLEVBQU9vVCxXQUFZIiwiZmlsZSI6Im1vZHVsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgICAgICAgIC8vdGhpcyBmdW5jdGlvbiBjYW4gcmVtb3ZlIGFuIGFycmF5IGVsZW1lbnQuXG4gICAgICAgICAgICBBcnJheS5yZW1vdmUgPSBmdW5jdGlvbihhcnJheSwgZnJvbSwgdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdCA9IGFycmF5LnNsaWNlKCh0byB8fCBmcm9tKSArIDEgfHwgYXJyYXkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBhcnJheS5sZW5ndGggPSBmcm9tIDwgMCA/IGFycmF5Lmxlbmd0aCArIGZyb20gOiBmcm9tO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5wdXNoLmFwcGx5KGFycmF5LCByZXN0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdG90YWxfcG9wdXBzID0gMDtcbiAgICAgICAgICAgIHZhciBwb3B1cHMgPSBbXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlX3BvcHVwKGlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaWlpID0gMDsgaWlpIDwgcG9wdXBzLmxlbmd0aDsgaWlpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZihpZCA9PSBwb3B1cHNbaWlpXSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucmVtb3ZlKHBvcHVwcywgaWlpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlX3BvcHVwcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZGlzcGxheXMgdGhlIHBvcHVwcy4gRGlzcGxheXMgYmFzZWQgb24gdGhlIG1heGltdW0gbnVtYmVyIG9mIHBvcHVwcyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlfcG9wdXBzKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSAyMjA7XG5cbiAgICAgICAgICAgICAgICB2YXIgaWlpID0gMDtcbiAgICAgICAgICAgICAgICBmb3IoaWlpOyBpaWkgPCB0b3RhbF9wb3B1cHM7IGlpaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocG9wdXBzW2lpaV0gIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcHVwc1tpaWldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmlnaHQgPSByaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gcmlnaHQgKyAzMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGpqaiA9IGlpaTsgampqIDwgcG9wdXBzLmxlbmd0aDsgampqKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcHVwc1tqampdKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgdGhpcyBzY3JpcHQgaGFzIGJlZW4gYWRkZWQgYnkgbWUgZm9yIG15IGN1c3RvbWVcblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheFNldHVwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUNTUkYtVE9LRU4nOiAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2hhdFwiKS5rZXlwcmVzcyhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2dC53aGljaCA9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwid2UgYXJlIGxpc3RuaW5nIHRvIGVudGVyIGV2ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXVzZXJuYW1lID0gJCgnI3Nob3V0X3VzZXJuYW1lJykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWVzc2FnZSA9ICQoJyNzaG91dF9tZXNzYWdlJykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHsndXNlcm5hbWUnOml1c2VybmFtZSwgJ21lc3NhZ2UnOmltZXNzYWdlfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlbmQgZGF0YSB0byBcInNob3V0LnBocFwiIHVzaW5nIGpRdWVyeSAkLnBvc3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QoJ3Nob3V0LnBocCcsIHBvc3RfZGF0YSwgZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGVuZCBkYXRhIGludG8gbWVzc2FnZWJveCB3aXRoIGpRdWVyeSBmYWRlIGVmZmVjdCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZGF0YSkuaGlkZSgpLmFwcGVuZFRvKCcubWVzc2FnZV9ib3gnKS5mYWRlSW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9rZWVwIHNjcm9sbGVkIHRvIGJvdHRvbSBvZiBjaGF0IVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbHRvaCA9ICQoJy5tZXNzYWdlX2JveCcpWzBdLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlX2JveCcpLnNjcm9sbFRvcChzY3JvbGx0b2gpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IHZhbHVlIG9mIG1lc3NhZ2UgYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2hvdXRfbWVzc2FnZScpLnZhbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0IEhUVFAgc2VydmVyIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KGVyci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvL3RvZ2dsZSBoaWRlL3Nob3cgc2hvdXQgYm94XG4gICAgICAgICAgICAgICAgICAgICQoXCIuY2xvc2VfYnRuXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBDU1MgZGlzcGxheSBzdGF0ZSBvZiAudG9nZ2xlX2NoYXQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZVN0YXRlID0gJCgnLnRvZ2dsZV9jaGF0JykuY3NzKCdkaXNwbGF5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9nZ2xlIHNob3cvaGlkZSBjaGF0IGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnRvZ2dsZV9jaGF0Jykuc2xpZGVUb2dnbGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy91c2UgdG9nZ2xlU3RhdGUgdmFyIHRvIGNoYW5nZSBjbG9zZS9vcGVuIGljb24gaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvZ2dsZVN0YXRlID09ICdibG9jaycpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5oZWFkZXIgZGl2XCIpLmF0dHIoJ2NsYXNzJywgJ29wZW5fYnRuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmhlYWRlciBkaXZcIikuYXR0cignY2xhc3MnLCAnY2xvc2VfYnRuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvKmRvbmUgYWRkaW5nIG15IGN1c3RvbSBzY3JpcHRzKi9cbiAgICAgICAgICAgIC8vY3JlYXRlcyBtYXJrdXAgZm9yIGEgbmV3IHBvcHVwLiBBZGRzIHRoZSBpZCB0byBwb3B1cHMgYXJyYXkuXG4gICAgICAgICAgICBmdW5jdGlvbiByZWdpc3Rlcl9wb3B1cChpZCwgbmFtZSlcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWlpID0gMDsgaWlpIDwgcG9wdXBzLmxlbmd0aDsgaWlpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvL2FscmVhZHkgcmVnaXN0ZXJlZC4gQnJpbmcgaXQgdG8gZnJvbnQuXG4gICAgICAgICAgICAgICAgICAgIGlmKGlkID09IHBvcHVwc1tpaWldKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5yZW1vdmUocG9wdXBzLCBpaWkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cHMudW5zaGlmdChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZV9wb3B1cHMoKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudD0nPGRpdiBjbGFzcz1cInBvcHVwLWJveCBjaGF0LXBvcHVwXCIgaWQ9XCInKyBpZCArJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPWVsZW1lbnQgKyAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQ6I2RkZDtjb2xvcjojZmZmO1wiIGNsYXNzPVwiaGVhZGVyXCI+R3JvdXA8ZGl2IGNsYXNzPVwiY2xvc2VfYnRuXCI+Jm5ic3A7PC9kaXY+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ZWxlbWVudCArICcgPGRpdiBjbGFzcz1cInRvZ2dsZV9jaGF0XCI+JztcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ZWxlbWVudCArICc8ZGl2IGNsYXNzPVwibWVzc2FnZV9ib3hcIj48L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID1lbGVtZW50ICsgJzx0ZXh0YXJlYSBzdHlsZT1cImJhY2tncm91bmQ6d2hpdGU7bWFyZ2luLXRvcDoxODBweDtcIiBpZD1cImNoYXRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHJvd3M9XCIzXCIgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiPjwvdGV4dGFyZWE+JztcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCA9ZWxlbWVudCArXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgY2xhc3M9XCJwb3B1cC1oZWFkLXJpZ2h0XCI+PGEgaHJlZj1cImphdmFzY3JpcHQ6Y2xvc2VfcG9wdXAoXFwnJysgaWQgKydcXCcpO1wiPiYjMTAwMDU7PC9hPjwvZGl2Pic7XG4gICAgICAgICAgICAgICAgLy8gdmFyIGVsZW1lbnQgPSAnPGRpdiBjbGFzcz1cInBvcHVwLWJveCBjaGF0LXBvcHVwXCIgaWQ9XCInKyBpZCArJ1wiPic7XG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCA9IGVsZW1lbnQgKyAnPGRpdiBjbGFzcz1cInBvcHVwLWhlYWRcIj4nO1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgY2xhc3M9XCJwb3B1cC1oZWFkLWxlZnRcIj4nKyBuYW1lICsnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50ID0gZWxlbWVudCArICc8ZGl2IGNsYXNzPVwicG9wdXAtaGVhZC1yaWdodFwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OmNsb3NlX3BvcHVwKFxcJycrIGlkICsnXFwnKTtcIj4mIzEwMDA1OzwvYT48L2Rpdj4nO1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgc3R5bGU9XCJjbGVhcjogYm90aDtcIj48L2Rpdj48L2Rpdj48cCBvbmNsaWNrPVwidCgpXCIgaWQ9XCJtXCI+PC9wPjxkaXYgY2xhc3M9XCJwb3B1cC1tZXNzYWdlc1wiPjx0ZXh0YXJlYSAgY2xhc3M9XCJ0b3BcIj48L3RleHRhcmVhPjwvZGl2PjwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uaW5uZXJIVE1MID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLmlubmVySFRNTCArIGVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBwb3B1cHMudW5zaGlmdChpZCk7XG5cbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVfcG9wdXBzKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9jYWxjdWxhdGUgdGhlIHRvdGFsIG51bWJlciBvZiBwb3B1cHMgc3VpdGFibGUgYW5kIHRoZW4gcG9wdWxhdGUgdGhlIHRvYXRhbF9wb3B1cHMgdmFyaWFibGUuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVfcG9wdXBzKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICBpZih3aWR0aCA8IDU0MClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX3BvcHVwcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gd2lkdGggLSAyMDA7XG4gICAgICAgICAgICAgICAgICAgIC8vMzIwIGlzIHdpZHRoIG9mIGEgc2luZ2xlIHBvcHVwIGJveFxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9wb3B1cHMgPSBwYXJzZUludCh3aWR0aC8zMjApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpc3BsYXlfcG9wdXBzKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9yZWNhbGN1bGF0ZSB3aGVuIHdpbmRvdyBpcyBsb2FkZWQgYW5kIGFsc28gd2hlbiB3aW5kb3cgaXMgcmVzaXplZC5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGNhbGN1bGF0ZV9wb3B1cHMpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNhbGN1bGF0ZV9wb3B1cHMpOyIsIi8qXG4gYW5ndWxhci1maWxlLXVwbG9hZCB2Mi4yLjBcbiBodHRwczovL2dpdGh1Yi5jb20vbmVydmdoL2FuZ3VsYXItZmlsZS11cGxvYWRcbiovXG5cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFuZ3VsYXItZmlsZS11cGxvYWRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYW5ndWxhci1maWxlLXVwbG9hZFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgb3B0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcblxuXHR2YXIgc2VydmljZUZpbGVVcGxvYWRlciA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcblxuXHR2YXIgc2VydmljZUZpbGVMaWtlT2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oNCkpO1xuXG5cdHZhciBzZXJ2aWNlRmlsZUl0ZW0gPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg1KSk7XG5cblx0dmFyIHNlcnZpY2VGaWxlRGlyZWN0aXZlID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuXG5cdHZhciBzZXJ2aWNlRmlsZVNlbGVjdCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKTtcblxuXHR2YXIgc2VydmljZUZpbGVEcm9wID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oOCkpO1xuXG5cdHZhciBzZXJ2aWNlRmlsZU92ZXIgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg5KSk7XG5cblx0dmFyIGRpcmVjdGl2ZUZpbGVTZWxlY3QgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxMCkpO1xuXG5cdHZhciBkaXJlY3RpdmVGaWxlRHJvcCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDExKSk7XG5cblx0dmFyIGRpcmVjdGl2ZUZpbGVPdmVyID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMTIpKTtcblxuXHRhbmd1bGFyLm1vZHVsZShDT05GSUcubmFtZSwgW10pLnZhbHVlKFwiZmlsZVVwbG9hZGVyT3B0aW9uc1wiLCBvcHRpb25zKS5mYWN0b3J5KFwiRmlsZVVwbG9hZGVyXCIsIHNlcnZpY2VGaWxlVXBsb2FkZXIpLmZhY3RvcnkoXCJGaWxlTGlrZU9iamVjdFwiLCBzZXJ2aWNlRmlsZUxpa2VPYmplY3QpLmZhY3RvcnkoXCJGaWxlSXRlbVwiLCBzZXJ2aWNlRmlsZUl0ZW0pLmZhY3RvcnkoXCJGaWxlRGlyZWN0aXZlXCIsIHNlcnZpY2VGaWxlRGlyZWN0aXZlKS5mYWN0b3J5KFwiRmlsZVNlbGVjdFwiLCBzZXJ2aWNlRmlsZVNlbGVjdCkuZmFjdG9yeShcIkZpbGVEcm9wXCIsIHNlcnZpY2VGaWxlRHJvcCkuZmFjdG9yeShcIkZpbGVPdmVyXCIsIHNlcnZpY2VGaWxlT3ZlcikuZGlyZWN0aXZlKFwibnZGaWxlU2VsZWN0XCIsIGRpcmVjdGl2ZUZpbGVTZWxlY3QpLmRpcmVjdGl2ZShcIm52RmlsZURyb3BcIiwgZGlyZWN0aXZlRmlsZURyb3ApLmRpcmVjdGl2ZShcIm52RmlsZU92ZXJcIiwgZGlyZWN0aXZlRmlsZU92ZXIpLnJ1bihbXCJGaWxlVXBsb2FkZXJcIiwgXCJGaWxlTGlrZU9iamVjdFwiLCBcIkZpbGVJdGVtXCIsIFwiRmlsZURpcmVjdGl2ZVwiLCBcIkZpbGVTZWxlY3RcIiwgXCJGaWxlRHJvcFwiLCBcIkZpbGVPdmVyXCIsIGZ1bmN0aW9uIChGaWxlVXBsb2FkZXIsIEZpbGVMaWtlT2JqZWN0LCBGaWxlSXRlbSwgRmlsZURpcmVjdGl2ZSwgRmlsZVNlbGVjdCwgRmlsZURyb3AsIEZpbGVPdmVyKSB7XG5cdCAgICAvLyBvbmx5IGZvciBjb21wYXRpYmlsaXR5XG5cdCAgICBGaWxlVXBsb2FkZXIuRmlsZUxpa2VPYmplY3QgPSBGaWxlTGlrZU9iamVjdDtcblx0ICAgIEZpbGVVcGxvYWRlci5GaWxlSXRlbSA9IEZpbGVJdGVtO1xuXHQgICAgRmlsZVVwbG9hZGVyLkZpbGVEaXJlY3RpdmUgPSBGaWxlRGlyZWN0aXZlO1xuXHQgICAgRmlsZVVwbG9hZGVyLkZpbGVTZWxlY3QgPSBGaWxlU2VsZWN0O1xuXHQgICAgRmlsZVVwbG9hZGVyLkZpbGVEcm9wID0gRmlsZURyb3A7XG5cdCAgICBGaWxlVXBsb2FkZXIuRmlsZU92ZXIgPSBGaWxlT3Zlcjtcblx0fV0pO1xuXG4vKioqLyB9LFxuXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0XHRcIm5hbWVcIjogXCJhbmd1bGFyRmlsZVVwbG9hZFwiXG5cdH07XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICAgIHVybDogXCIvXCIsXG5cdCAgICBhbGlhczogXCJmaWxlXCIsXG5cdCAgICBoZWFkZXJzOiB7J2F1dGhvcml6YXRpb24nOiAnQmVhcmVyIDhFdXFjTU5rRjJ5UDUwRGljcHY5aExSUnA3V09TYWJQbEN1MjJsaVknfSxcblx0ICAgIHF1ZXVlOiBbXSxcblx0ICAgIHByb2dyZXNzOiAwLFxuXHQgICAgYXV0b1VwbG9hZDogZmFsc2UsXG5cdCAgICByZW1vdmVBZnRlclVwbG9hZDogZmFsc2UsXG5cdCAgICBtZXRob2Q6IFwiUE9TVFwiLFxuXHQgICAgZmlsdGVyczogW10sXG5cdCAgICBmb3JtRGF0YTogW10sXG5cdCAgICBxdWV1ZUxpbWl0OiBOdW1iZXIuTUFYX1ZBTFVFLFxuXHQgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdHZhciBjb3B5ID0gYW5ndWxhci5jb3B5O1xuXHR2YXIgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQ7XG5cdHZhciBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoO1xuXHR2YXIgaXNPYmplY3QgPSBhbmd1bGFyLmlzT2JqZWN0O1xuXHR2YXIgaXNOdW1iZXIgPSBhbmd1bGFyLmlzTnVtYmVyO1xuXHR2YXIgaXNEZWZpbmVkID0gYW5ndWxhci5pc0RlZmluZWQ7XG5cdHZhciBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5O1xuXHR2YXIgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudDtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmaWxlVXBsb2FkZXJPcHRpb25zLCAkcm9vdFNjb3BlLCAkaHR0cCwgJHdpbmRvdywgRmlsZUxpa2VPYmplY3QsIEZpbGVJdGVtKSB7XG5cdCAgICB2YXIgRmlsZSA9ICR3aW5kb3cuRmlsZTtcblx0ICAgIHZhciBGb3JtRGF0YSA9ICR3aW5kb3cuRm9ybURhdGE7XG5cblx0ICAgIHZhciBGaWxlVXBsb2FkZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICogUFVCTElDXG5cdCAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBGaWxlVXBsb2FkZXJcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlVXBsb2FkZXIob3B0aW9ucykge1xuXHQgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVVwbG9hZGVyKTtcblxuXHQgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBjb3B5KGZpbGVVcGxvYWRlck9wdGlvbnMpO1xuXG5cdCAgICAgICAgICAgIGV4dGVuZCh0aGlzLCBzZXR0aW5ncywgb3B0aW9ucywge1xuXHQgICAgICAgICAgICAgICAgaXNVcGxvYWRpbmc6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgX25leHRJbmRleDogMCxcblx0ICAgICAgICAgICAgICAgIF9mYWlsRmlsdGVySW5kZXg6IC0xLFxuXHQgICAgICAgICAgICAgICAgX2RpcmVjdGl2ZXM6IHsgc2VsZWN0OiBbXSwgZHJvcDogW10sIG92ZXI6IFtdIH1cblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgLy8gYWRkIGRlZmF1bHQgZmlsdGVyc1xuXHQgICAgICAgICAgICB0aGlzLmZpbHRlcnMudW5zaGlmdCh7IG5hbWU6IFwicXVldWVMaW1pdFwiLCBmbjogdGhpcy5fcXVldWVMaW1pdEZpbHRlciB9KTtcblx0ICAgICAgICAgICAgdGhpcy5maWx0ZXJzLnVuc2hpZnQoeyBuYW1lOiBcImZvbGRlclwiLCBmbjogdGhpcy5fZm9sZGVyRmlsdGVyIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhGaWxlVXBsb2FkZXIsIHtcblx0ICAgICAgICAgICAgYWRkVG9RdWV1ZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBBZGRzIGl0ZW1zIHRvIHRoZSBxdWV1ZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlfEhUTUxJbnB1dEVsZW1lbnR8T2JqZWN0fEZpbGVMaXN0fEFycmF5PE9iamVjdD59IGZpbGVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5PEZ1bmN0aW9uPnxTdHJpbmd9IGZpbHRlcnNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVG9RdWV1ZShmaWxlcywgb3B0aW9ucywgZmlsdGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXMuaXNBcnJheUxpa2VPYmplY3QoZmlsZXMpID8gZmlsZXMgOiBbZmlsZXNdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheU9mRmlsdGVycyA9IHRoaXMuX2dldEZpbHRlcnMoZmlsdGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5xdWV1ZS5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGVkRmlsZUl0ZW1zID0gW107XG5cblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChzb21lIC8qe0ZpbGV8SFRNTElucHV0RWxlbWVudHxPYmplY3R9Ki8pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBuZXcgRmlsZUxpa2VPYmplY3Qoc29tZSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pc1ZhbGlkRmlsZSh0ZW1wLCBhcnJheU9mRmlsdGVycywgb3B0aW9ucykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlSXRlbSA9IG5ldyBGaWxlSXRlbShfdGhpcywgc29tZSwgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZEZpbGVJdGVtcy5wdXNoKGZpbGVJdGVtKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXVlLnB1c2goZmlsZUl0ZW0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQWZ0ZXJBZGRpbmdGaWxlKGZpbGVJdGVtKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBhcnJheU9mRmlsdGVyc1tfdGhpcy5fZmFpbEZpbHRlckluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbldoZW5BZGRpbmdGaWxlRmFpbGVkKHRlbXAsIGZpbHRlciwgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCAhPT0gY291bnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25BZnRlckFkZGluZ0FsbChhZGRlZEZpbGVJdGVtcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLl9nZXRUb3RhbFByb2dyZXNzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1VwbG9hZCkgdGhpcy51cGxvYWRBbGwoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgcmVtb3ZlRnJvbVF1ZXVlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJlbW92ZSBpdGVtcyBmcm9tIHRoZSBxdWV1ZS4gUmVtb3ZlIGxhc3Q6IGluZGV4ID0gLTFcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW18TnVtYmVyfSB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVGcm9tUXVldWUodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldEluZGV4T2ZJdGVtKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMucXVldWVbaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzVXBsb2FkaW5nKSBpdGVtLmNhbmNlbCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9kZXN0cm95KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuX2dldFRvdGFsUHJvZ3Jlc3MoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgY2xlYXJRdWV1ZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDbGVhcnMgdGhlIHF1ZXVlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyUXVldWUoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWVbMF0ucmVtb3ZlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB1cGxvYWRJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFVwbG9hZHMgYSBpdGVtIGZyb20gdGhlIHF1ZXVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfE51bWJlcn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkSXRlbSh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0SW5kZXhPZkl0ZW0odmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5xdWV1ZVtpbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuaXNIVE1MNSA/IFwiX3hoclRyYW5zcG9ydFwiIDogXCJfaWZyYW1lVHJhbnNwb3J0XCI7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9wcmVwYXJlVG9VcGxvYWRpbmcoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1VwbG9hZGluZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgfXRoaXMuaXNVcGxvYWRpbmcgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNbdHJhbnNwb3J0XShpdGVtKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgY2FuY2VsSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYW5jZWxzIHVwbG9hZGluZyBvZiBpdGVtIGZyb20gdGhlIHF1ZXVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfE51bWJlcn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsSXRlbSh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0SW5kZXhPZkl0ZW0odmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5xdWV1ZVtpbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSB0aGlzLmlzSFRNTDUgPyBcIl94aHJcIiA6IFwiX2Zvcm1cIjtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLmlzVXBsb2FkaW5nKSBpdGVtW3Byb3BdLmFib3J0KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHVwbG9hZEFsbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBVcGxvYWRzIGFsbCBub3QgdXBsb2FkZWQgaXRlbXMgb2YgcXVldWVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkQWxsKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZ2V0Tm90VXBsb2FkZWRJdGVtcygpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWl0ZW0uaXNVcGxvYWRpbmc7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIH1mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5fcHJlcGFyZVRvVXBsb2FkaW5nKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbXNbMF0udXBsb2FkKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGNhbmNlbEFsbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYW5jZWxzIGFsbCB1cGxvYWRzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFsbCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmdldE5vdFVwbG9hZGVkSXRlbXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jYW5jZWwoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgaXNGaWxlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgXCJ0cnVlXCIgaWYgdmFsdWUgYW4gaW5zdGFuY2Ugb2YgRmlsZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0ZpbGUodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5pc0ZpbGUodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpc0ZpbGVMaWtlT2JqZWN0OiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgXCJ0cnVlXCIgaWYgdmFsdWUgYW4gaW5zdGFuY2Ugb2YgRmlsZUxpa2VPYmplY3Rcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWxlTGlrZU9iamVjdCh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmlzRmlsZUxpa2VPYmplY3QodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpc0FycmF5TGlrZU9iamVjdDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGlzIGFycmF5IGxpa2Ugb2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5pc0FycmF5TGlrZU9iamVjdCh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGdldEluZGV4T2ZJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgYSBpbmRleCBvZiBpdGVtIGZyb20gdGhlIHF1ZXVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0l0ZW18TnVtYmVyfSB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge051bWJlcn1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5kZXhPZkl0ZW0odmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpID8gdmFsdWUgOiB0aGlzLnF1ZXVlLmluZGV4T2YodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBnZXROb3RVcGxvYWRlZEl0ZW1zOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgbm90IHVwbG9hZGVkIGl0ZW1zXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5vdFVwbG9hZGVkSXRlbXMoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXRlbS5pc1VwbG9hZGVkO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBnZXRSZWFkeUl0ZW1zOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgaXRlbXMgcmVhZHkgZm9yIHVwbG9hZFxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0FycmF5fVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWFkeUl0ZW1zKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pc1JlYWR5ICYmICFpdGVtLmlzVXBsb2FkaW5nO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGl0ZW0xLCBpdGVtMikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTEuaW5kZXggLSBpdGVtMi5pbmRleDtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZGVzdHJveToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBEZXN0cm95cyBpbnN0YW5jZSBvZiBGaWxlVXBsb2FkZXJcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaCh0aGlzLl9kaXJlY3RpdmVzLCBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2goX3RoaXMuX2RpcmVjdGl2ZXNba2V5XSwgZnVuY3Rpb24gKG9iamVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmRlc3Ryb3koKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQWZ0ZXJBZGRpbmdBbGw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbGVJdGVtc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkFmdGVyQWRkaW5nQWxsKGZpbGVJdGVtcykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25BZnRlckFkZGluZ0ZpbGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGZpbGVJdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWZ0ZXJBZGRpbmdGaWxlKGZpbGVJdGVtKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbldoZW5BZGRpbmdGaWxlRmFpbGVkOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGV8T2JqZWN0fSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZmlsdGVyXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbldoZW5BZGRpbmdGaWxlRmFpbGVkKGl0ZW0sIGZpbHRlciwgb3B0aW9ucykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25CZWZvcmVVcGxvYWRJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBmaWxlSXRlbVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkJlZm9yZVVwbG9hZEl0ZW0oZmlsZUl0ZW0pIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uUHJvZ3Jlc3NJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBmaWxlSXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb2dyZXNzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3NJdGVtKGZpbGVJdGVtLCBwcm9ncmVzcykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25Qcm9ncmVzc0FsbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb2dyZXNzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3NBbGwocHJvZ3Jlc3MpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uU3VjY2Vzc0l0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3VjY2Vzc0l0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25FcnJvckl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3JJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQ2FuY2VsSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DYW5jZWxJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQ29tcGxldGVJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkNvbXBsZXRlQWxsOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ29tcGxldGVBbGwoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfZ2V0VG90YWxQcm9ncmVzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAqIFBSSVZBVEVcblx0ICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSB0b3RhbCBwcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IFt2YWx1ZV1cblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VG90YWxQcm9ncmVzcyh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbW92ZUFmdGVyVXBsb2FkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSB8fCAwO1xuXHQgICAgICAgICAgICAgICAgICAgIH12YXIgbm90VXBsb2FkZWQgPSB0aGlzLmdldE5vdFVwbG9hZGVkSXRlbXMoKS5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHVwbG9hZGVkID0gbm90VXBsb2FkZWQgPyB0aGlzLnF1ZXVlLmxlbmd0aCAtIG5vdFVwbG9hZGVkIDogdGhpcy5xdWV1ZS5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJhdGlvID0gMTAwIC8gdGhpcy5xdWV1ZS5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAodmFsdWUgfHwgMCkgKiByYXRpbyAvIDEwMDtcblxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHVwbG9hZGVkICogcmF0aW8gKyBjdXJyZW50KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2dldEZpbHRlcnM6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBhcnJheSBvZiBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5PEZ1bmN0aW9uPnxTdHJpbmd9IGZpbHRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtBcnJheTxGdW5jdGlvbj59XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmlsdGVycyhmaWx0ZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnM7XG5cdCAgICAgICAgICAgICAgICAgICAgfWlmIChpc0FycmF5KGZpbHRlcnMpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJzO1xuXHQgICAgICAgICAgICAgICAgICAgIH12YXIgbmFtZXMgPSBmaWx0ZXJzLm1hdGNoKC9bXlxccyxdKy9nKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzLmZpbHRlcihmdW5jdGlvbiAoZmlsdGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lcy5pbmRleE9mKGZpbHRlci5uYW1lKSAhPT0gLTE7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9yZW5kZXI6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVXBkYXRlcyBodG1sXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfZm9sZGVyRmlsdGVyOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgXCJ0cnVlXCIgaWYgaXRlbSBpcyBhIGZpbGUgKG5vdCBmb2xkZXIpXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGV8RmlsZUxpa2VPYmplY3R9IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2ZvbGRlckZpbHRlcihpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhKGl0ZW0uc2l6ZSB8fCBpdGVtLnR5cGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfcXVldWVMaW1pdEZpbHRlcjoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHRoZSBsaW1pdCBoYXMgbm90IGJlZW4gcmVhY2hlZFxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcXVldWVMaW1pdEZpbHRlcigpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5sZW5ndGggPCB0aGlzLnF1ZXVlTGltaXQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9pc1ZhbGlkRmlsZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIGZpbGUgcGFzcyBhbGwgZmlsdGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlfE9iamVjdH0gZmlsZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj59IGZpbHRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1ZhbGlkRmlsZShmaWxlLCBmaWx0ZXJzLCBvcHRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZhaWxGaWx0ZXJJbmRleCA9IC0xO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZmlsdGVycy5sZW5ndGggPyB0cnVlIDogZmlsdGVycy5ldmVyeShmdW5jdGlvbiAoZmlsdGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9mYWlsRmlsdGVySW5kZXgrKztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5mbi5jYWxsKF90aGlzLCBmaWxlLCBvcHRpb25zKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2lzU3VjY2Vzc0NvZGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdXBsb2FkIHN1Y2Nlc3NmdWxcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzU3VjY2Vzc0NvZGUoc3RhdHVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfdHJhbnNmb3JtUmVzcG9uc2U6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVHJhbnNmb3JtcyB0aGUgc2VydmVyIHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMgeyp9XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UsIGhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyc0dldHRlciA9IHRoaXMuX2hlYWRlcnNHZXR0ZXIoaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaCgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24gKHRyYW5zZm9ybUZuKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gdHJhbnNmb3JtRm4ocmVzcG9uc2UsIGhlYWRlcnNHZXR0ZXIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3BhcnNlSGVhZGVyczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBQYXJzZWQgcmVzcG9uc2UgaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG5cdCAgICAgICAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi9tYXN0ZXIvc3JjL25nL2h0dHAuanNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXJzZUhlYWRlcnMoaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSB7fSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWwsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDtcblx0ICAgICAgICAgICAgICAgICAgICB9Zm9yRWFjaChoZWFkZXJzLnNwbGl0KFwiXFxuXCIpLCBmdW5jdGlvbiAobGluZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpID0gbGluZS5pbmRleE9mKFwiOlwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gbGluZS5zbGljZSgwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbGluZS5zbGljZShpICsgMSkudHJpbSgpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArIFwiLCBcIiArIHZhbCA6IHZhbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2hlYWRlcnNHZXR0ZXI6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBmdW5jdGlvbiB0aGF0IHJldHVybnMgaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZEhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oZWFkZXJzR2V0dGVyKHBhcnNlZEhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRIZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkSGVhZGVycztcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfeGhyVHJhbnNwb3J0OiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFRoZSBYTUxIdHRwUmVxdWVzdCB0cmFuc3BvcnRcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF94aHJUcmFuc3BvcnQoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gaXRlbS5feGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQmVmb3JlVXBsb2FkSXRlbShpdGVtKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2goaXRlbS5mb3JtRGF0YSwgZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKGtleSwgdmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5fZmlsZS5zaXplICE9IFwibnVtYmVyXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaWxlIHNwZWNpZmllZCBpcyBubyBsb25nZXIgdmFsaWRcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoaXRlbS5hbGlhcywgaXRlbS5fZmlsZSwgaXRlbS5maWxlLm5hbWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgucm91bmQoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSA/IGV2ZW50LmxvYWRlZCAqIDEwMCAvIGV2ZW50LnRvdGFsIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vblByb2dyZXNzSXRlbShpdGVtLCBwcm9ncmVzcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0gX3RoaXMuX3BhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBfdGhpcy5fdHJhbnNmb3JtUmVzcG9uc2UoeGhyLnJlc3BvbnNlLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdpc3QgPSBfdGhpcy5faXNTdWNjZXNzQ29kZSh4aHIuc3RhdHVzKSA/IFwiU3VjY2Vzc1wiIDogXCJFcnJvclwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gXCJfb25cIiArIGdpc3QgKyBcIkl0ZW1cIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXNbbWV0aG9kXShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IF90aGlzLl9wYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gX3RoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHhoci5yZXNwb25zZSwgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkVycm9ySXRlbShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IF90aGlzLl9wYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gX3RoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHhoci5yZXNwb25zZSwgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkNhbmNlbEl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICB4aHIub3BlbihpdGVtLm1ldGhvZCwgaXRlbS51cmwsIHRydWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGl0ZW0ud2l0aENyZWRlbnRpYWxzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChpdGVtLmhlYWRlcnMsIGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZChmb3JtKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2lmcmFtZVRyYW5zcG9ydDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBUaGUgSUZyYW1lIHRyYW5zcG9ydFxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lmcmFtZVRyYW5zcG9ydChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtID0gZWxlbWVudChcIjxmb3JtIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lO1xcXCIgLz5cIik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGlmcmFtZSA9IGVsZW1lbnQoXCI8aWZyYW1lIG5hbWU9XFxcImlmcmFtZVRyYW5zcG9ydFwiICsgRGF0ZS5ub3coKSArIFwiXFxcIj5cIik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gaXRlbS5faW5wdXQ7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5fZm9ybSkgaXRlbS5fZm9ybS5yZXBsYWNlV2l0aChpbnB1dCk7IC8vIHJlbW92ZSBvbGQgZm9ybVxuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX2Zvcm0gPSBmb3JtOyAvLyBzYXZlIGxpbmsgdG8gbmV3IGZvcm1cblxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQmVmb3JlVXBsb2FkSXRlbShpdGVtKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlucHV0LnByb3AoXCJuYW1lXCIsIGl0ZW0uYWxpYXMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChpdGVtLmZvcm1EYXRhLCBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRfID0gZWxlbWVudChcIjxpbnB1dCB0eXBlPVxcXCJoaWRkZW5cXFwiIG5hbWU9XFxcIlwiICsga2V5ICsgXCJcXFwiIC8+XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudF8udmFsKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKGVsZW1lbnRfKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBmb3JtLnByb3Aoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGl0ZW0udXJsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGlmcmFtZS5wcm9wKFwibmFtZVwiKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5jdHlwZTogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiAvLyBvbGQgSUVcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5iaW5kKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gXCJcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IDIwMDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4IGZvciBsZWdhY3kgSUUgYnJvd3NlcnMgdGhhdCBsb2FkcyBpbnRlcm5hbCBlcnJvciBwYWdlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIGZhaWxlZCBXUyByZXNwb25zZSByZWNlaXZlZC4gSW4gY29uc2VxdWVuY2UgaWZyYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250ZW50IGFjY2VzcyBkZW5pZWQgZXJyb3IgaXMgdGhyb3duIGJlY291c2UgdHJ5aW5nIHRvXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3MgY3Jvc3MgZG9tYWluIHBhZ2UuIFdoZW4gc3VjaCB0aGluZyBvY2N1cnMgbm90aWZ5aW5nXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGVtcHR5IHJlc3BvbnNlIG9iamVjdC4gU2VlIG1vcmUgaW5mbyBhdDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTUxMzYyL2FjY2Vzcy1pcy1kZW5pZWQtZXJyb3Itb24tYWNjZXNzaW5nLWlmcmFtZS1kb2N1bWVudC1vYmplY3Rcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBpZiBub24gc3RhbmRhcmQgNHh4IG9yIDV4eCBlcnJvciBjb2RlIHJldHVybmVkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tIFdTIHRoZW4gcmVzcG9uc2UgY29udGVudCBjYW4gYmUgYWNjZXNzZWQgd2l0aG91dCBlcnJvclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0ICdYSFInIHN0YXR1cyBiZWNvbWVzIDIwMC4gSW4gb3JkZXIgdG8gYXZvaWQgY29uZnVzaW9uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5pbmcgcmVzcG9uc2UgdmlhIHNhbWUgJ3N1Y2Nlc3MnIGV2ZW50IGhhbmRsZXIuXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpeGVkIGFuZ3VsYXIuY29udGVudHMoKSBmb3IgaWZyYW1lc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGlmcmFtZVswXS5jb250ZW50RG9jdW1lbnQuYm9keS5pbm5lckhUTUw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UgcnVuIGludG8gdGhlIGFjY2Vzcy1pcy1kZW5pZWQgZXJyb3Igb3Igd2UgaGF2ZSBhbm90aGVyIGVycm9yIG9uIHRoZSBzZXJ2ZXIgc2lkZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGludGVudGlvbmFsIDUwMCw0MC4uLiBlcnJvcnMpLCB3ZSBhdCBsZWFzdCBzYXkgJ3NvbWV0aGluZyB3ZW50IHdyb25nJyAtPiA1MDBcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDUwMDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSB7IHJlc3BvbnNlOiBodG1sLCBzdGF0dXM6IHN0YXR1cywgZHVtbXk6IHRydWUgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gX3RoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHhoci5yZXNwb25zZSwgaGVhZGVycyk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uU3VjY2Vzc0l0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IHsgc3RhdHVzOiAwLCBkdW1teTogdHJ1ZSB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnVuYmluZChcImxvYWRcIikucHJvcChcInNyY1wiLCBcImphdmFzY3JpcHQ6ZmFsc2U7XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlcGxhY2VXaXRoKGlucHV0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25DYW5jZWxJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ29tcGxldGVJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaW5wdXQuYWZ0ZXIoZm9ybSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoaW5wdXQpLmFwcGVuZChpZnJhbWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybVswXS5zdWJtaXQoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uV2hlbkFkZGluZ0ZpbGVGYWlsZWQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZXxPYmplY3R9IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXJcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25XaGVuQWRkaW5nRmlsZUZhaWxlZChpdGVtLCBmaWx0ZXIsIG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uV2hlbkFkZGluZ0ZpbGVGYWlsZWQoaXRlbSwgZmlsdGVyLCBvcHRpb25zKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uQWZ0ZXJBZGRpbmdGaWxlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFmdGVyQWRkaW5nRmlsZShpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFmdGVyQWRkaW5nRmlsZShpdGVtKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uQWZ0ZXJBZGRpbmdBbGw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXk8RmlsZUl0ZW0+fSBpdGVtc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BZnRlckFkZGluZ0FsbChpdGVtcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25BZnRlckFkZGluZ0FsbChpdGVtcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkJlZm9yZVVwbG9hZEl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25CZWZvcmVVcGxvYWRJdGVtKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9vbkJlZm9yZVVwbG9hZCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25CZWZvcmVVcGxvYWRJdGVtKGl0ZW0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25Qcm9ncmVzc0l0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uUHJvZ3Jlc3NJdGVtKGl0ZW0sIHByb2dyZXNzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5fZ2V0VG90YWxQcm9ncmVzcyhwcm9ncmVzcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHRvdGFsO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX29uUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzc0l0ZW0oaXRlbSwgcHJvZ3Jlc3MpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzc0FsbCh0b3RhbCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vblN1Y2Nlc3NJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uU3VjY2Vzc0l0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX29uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU3VjY2Vzc0l0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkVycm9ySXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkVycm9ySXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fb25FcnJvcihyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3JJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25DYW5jZWxJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ2FuY2VsSXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fb25DYW5jZWwocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNhbmNlbEl0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkNvbXBsZXRlSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fb25Db21wbGV0ZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGVJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRJdGVtID0gdGhpcy5nZXRSZWFkeUl0ZW1zKClbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChuZXh0SXRlbSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0udXBsb2FkKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGVBbGwoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5fZ2V0VG90YWxQcm9ncmVzcygpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSwge1xuXHQgICAgICAgICAgICBpc0ZpbGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgKiBTVEFUSUNcblx0ICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGFuIGluc3RhbmNlIG9mIEZpbGVcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWxlKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZpbGUgJiYgdmFsdWUgaW5zdGFuY2VvZiBGaWxlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpc0ZpbGVMaWtlT2JqZWN0OiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgXCJ0cnVlXCIgaWYgdmFsdWUgYW4gaW5zdGFuY2Ugb2YgRmlsZUxpa2VPYmplY3Rcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWxlTGlrZU9iamVjdCh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEZpbGVMaWtlT2JqZWN0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpc0FycmF5TGlrZU9iamVjdDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGlzIGFycmF5IGxpa2Ugb2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGluaGVyaXQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5oZXJpdHMgYSB0YXJnZXQgKENsYXNzXzEpIGJ5IGEgc291cmNlIChDbGFzc18yKVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdGFyZ2V0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzb3VyY2Vcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5oZXJpdCh0YXJnZXQsIHNvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHNvdXJjZS5wcm90b3R5cGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB0YXJnZXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnN1cGVyXyA9IHNvdXJjZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVVcGxvYWRlcjtcblx0ICAgIH0pKCk7XG5cblx0ICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgKiBQVUJMSUNcblx0ICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgLyoqXG5cdCAgICAgKiBDaGVja3MgYSBzdXBwb3J0IHRoZSBodG1sNSB1cGxvYWRlclxuXHQgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgKiBAcmVhZG9ubHlcblx0ICAgICAqL1xuXHQgICAgRmlsZVVwbG9hZGVyLnByb3RvdHlwZS5pc0hUTUw1ID0gISEoRmlsZSAmJiBGb3JtRGF0YSk7XG5cdCAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICogU1RBVElDXG5cdCAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblx0ICAgIC8qKlxuXHQgICAgICogQGJvcnJvd3MgRmlsZVVwbG9hZGVyLnByb3RvdHlwZS5pc0hUTUw1XG5cdCAgICAgKi9cblx0ICAgIEZpbGVVcGxvYWRlci5pc0hUTUw1ID0gRmlsZVVwbG9hZGVyLnByb3RvdHlwZS5pc0hUTUw1O1xuXG5cdCAgICByZXR1cm4gRmlsZVVwbG9hZGVyO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCJmaWxlVXBsb2FkZXJPcHRpb25zXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRodHRwXCIsIFwiJHdpbmRvd1wiLCBcIkZpbGVMaWtlT2JqZWN0XCIsIFwiRmlsZUl0ZW1cIl07XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGtleSBpbiBwcm9wcykgeyB2YXIgcHJvcCA9IHByb3BzW2tleV07IHByb3AuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKHByb3AudmFsdWUpIHByb3Aud3JpdGFibGUgPSB0cnVlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpOyB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0dmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIGNvcHkgPSBhbmd1bGFyLmNvcHk7XG5cdHZhciBpc0VsZW1lbnQgPSBhbmd1bGFyLmlzRWxlbWVudDtcblx0dmFyIGlzU3RyaW5nID0gYW5ndWxhci5pc1N0cmluZztcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBGaWxlTGlrZU9iamVjdCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBGaWxlTGlrZU9iamVjdFxuXHQgICAgICAgICAqIEBwYXJhbSB7RmlsZXxIVE1MSW5wdXRFbGVtZW50fE9iamVjdH0gZmlsZU9ySW5wdXRcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVMaWtlT2JqZWN0KGZpbGVPcklucHV0KSB7XG5cdCAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlTGlrZU9iamVjdCk7XG5cblx0ICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBpc0VsZW1lbnQoZmlsZU9ySW5wdXQpO1xuXHQgICAgICAgICAgICB2YXIgZmFrZVBhdGhPck9iamVjdCA9IGlzSW5wdXQgPyBmaWxlT3JJbnB1dC52YWx1ZSA6IGZpbGVPcklucHV0O1xuXHQgICAgICAgICAgICB2YXIgcG9zdGZpeCA9IGlzU3RyaW5nKGZha2VQYXRoT3JPYmplY3QpID8gXCJGYWtlUGF0aFwiIDogXCJPYmplY3RcIjtcblx0ICAgICAgICAgICAgdmFyIG1ldGhvZCA9IFwiX2NyZWF0ZUZyb21cIiArIHBvc3RmaXg7XG5cdCAgICAgICAgICAgIHRoaXNbbWV0aG9kXShmYWtlUGF0aE9yT2JqZWN0KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZUxpa2VPYmplY3QsIHtcblx0ICAgICAgICAgICAgX2NyZWF0ZUZyb21GYWtlUGF0aDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGZpbGUgbGlrZSBvYmplY3QgZnJvbSBmYWtlIHBhdGggc3RyaW5nXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUZyb21GYWtlUGF0aChwYXRoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW9kaWZpZWREYXRlID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IFwibGlrZS9cIiArIHBhdGguc2xpY2UocGF0aC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHBhdGguc2xpY2UocGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyBwYXRoLmxhc3RJbmRleE9mKFwiXFxcXFwiKSArIDIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfY3JlYXRlRnJvbU9iamVjdDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGZpbGUgbGlrZSBvYmplY3QgZnJvbSBvYmplY3Rcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZXxGaWxlTGlrZU9iamVjdH0gb2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlRnJvbU9iamVjdChvYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb2RpZmllZERhdGUgPSBjb3B5KG9iamVjdC5sYXN0TW9kaWZpZWREYXRlKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBvYmplY3Quc2l6ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBvYmplY3QudHlwZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBvYmplY3QubmFtZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVMaWtlT2JqZWN0O1xuXHQgICAgfSkoKTtcblxuXHQgICAgcmV0dXJuIEZpbGVMaWtlT2JqZWN0O1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIga2V5IGluIHByb3BzKSB7IHZhciBwcm9wID0gcHJvcHNba2V5XTsgcHJvcC5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAocHJvcC52YWx1ZSkgcHJvcC53cml0YWJsZSA9IHRydWU7IH0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgY29weSA9IGFuZ3VsYXIuY29weTtcblx0dmFyIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kO1xuXHR2YXIgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudDtcblx0dmFyIGlzRWxlbWVudCA9IGFuZ3VsYXIuaXNFbGVtZW50O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCRjb21waWxlLCBGaWxlTGlrZU9iamVjdCkge1xuXHQgICAgdmFyIEZpbGVJdGVtID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEZpbGVJdGVtXG5cdCAgICAgICAgICogQHBhcmFtIHtGaWxlVXBsb2FkZXJ9IHVwbG9hZGVyXG5cdCAgICAgICAgICogQHBhcmFtIHtGaWxlfEhUTUxJbnB1dEVsZW1lbnR8T2JqZWN0fSBzb21lXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVJdGVtKHVwbG9hZGVyLCBzb21lLCBvcHRpb25zKSB7XG5cdCAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlSXRlbSk7XG5cblx0ICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBpc0VsZW1lbnQoc29tZSk7XG5cdCAgICAgICAgICAgIHZhciBpbnB1dCA9IGlzSW5wdXQgPyBlbGVtZW50KHNvbWUpIDogbnVsbDtcblx0ICAgICAgICAgICAgdmFyIGZpbGUgPSAhaXNJbnB1dCA/IHNvbWUgOiBudWxsO1xuXG5cdCAgICAgICAgICAgIGV4dGVuZCh0aGlzLCB7XG5cdCAgICAgICAgICAgICAgICB1cmw6IHVwbG9hZGVyLnVybCxcblx0ICAgICAgICAgICAgICAgIGFsaWFzOiB1cGxvYWRlci5hbGlhcyxcblx0ICAgICAgICAgICAgICAgIGhlYWRlcnM6IGNvcHkodXBsb2FkZXIuaGVhZGVycyksXG5cdCAgICAgICAgICAgICAgICBmb3JtRGF0YTogY29weSh1cGxvYWRlci5mb3JtRGF0YSksXG5cdCAgICAgICAgICAgICAgICByZW1vdmVBZnRlclVwbG9hZDogdXBsb2FkZXIucmVtb3ZlQWZ0ZXJVcGxvYWQsXG5cdCAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHVwbG9hZGVyLndpdGhDcmVkZW50aWFscyxcblx0ICAgICAgICAgICAgICAgIG1ldGhvZDogdXBsb2FkZXIubWV0aG9kXG5cdCAgICAgICAgICAgIH0sIG9wdGlvbnMsIHtcblx0ICAgICAgICAgICAgICAgIHVwbG9hZGVyOiB1cGxvYWRlcixcblx0ICAgICAgICAgICAgICAgIGZpbGU6IG5ldyBGaWxlTGlrZU9iamVjdChzb21lKSxcblx0ICAgICAgICAgICAgICAgIGlzUmVhZHk6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNVcGxvYWRpbmc6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNVcGxvYWRlZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNDYW5jZWw6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNFcnJvcjogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICBwcm9ncmVzczogMCxcblx0ICAgICAgICAgICAgICAgIGluZGV4OiBudWxsLFxuXHQgICAgICAgICAgICAgICAgX2ZpbGU6IGZpbGUsXG5cdCAgICAgICAgICAgICAgICBfaW5wdXQ6IGlucHV0XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIGlmIChpbnB1dCkgdGhpcy5fcmVwbGFjZU5vZGUoaW5wdXQpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhGaWxlSXRlbSwge1xuXHQgICAgICAgICAgICB1cGxvYWQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgKiBQVUJMSUNcblx0ICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBVcGxvYWRzIGEgRmlsZUl0ZW1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIudXBsb2FkSXRlbSh0aGlzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIuX29uQ29tcGxldGVJdGVtKHRoaXMsIFwiXCIsIDAsIFtdKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5fb25FcnJvckl0ZW0odGhpcywgXCJcIiwgMCwgW10pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgY2FuY2VsOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbmNlbHMgdXBsb2FkaW5nIG9mIEZpbGVJdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmNhbmNlbEl0ZW0odGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHJlbW92ZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZW1vdmVzIGEgRmlsZUl0ZW1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIucmVtb3ZlRnJvbVF1ZXVlKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkJlZm9yZVVwbG9hZDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25CZWZvcmVVcGxvYWQoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvblByb2dyZXNzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvZ3Jlc3Ncblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uU3VjY2Vzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25TdWNjZXNzKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uRXJyb3I6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25DYW5jZWw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2FuY2VsKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQ29tcGxldGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ29tcGxldGUocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uQmVmb3JlVXBsb2FkOiB7XG5cdCAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICogUFJJVkFURVxuXHQgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkJlZm9yZVVwbG9hZCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRlZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbmNlbCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25CZWZvcmVVcGxvYWQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uUHJvZ3Jlc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uUHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHByb2dyZXNzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uU3VjY2Vzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblN1Y2Nlc3MocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdWNjZXNzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FuY2VsID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDEwMDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uRXJyb3I6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25FcnJvcihyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FuY2VsID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkNhbmNlbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNhbmNlbChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGluZyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRlZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbmNlbCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNhbmNlbChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uQ29tcGxldGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Db21wbGV0ZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbW92ZUFmdGVyVXBsb2FkKSB0aGlzLnJlbW92ZSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfZGVzdHJveToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBEZXN0cm95cyBhIEZpbGVJdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dCkgdGhpcy5faW5wdXQucmVtb3ZlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Zvcm0pIHRoaXMuX2Zvcm0ucmVtb3ZlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2Zvcm07XG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2lucHV0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfcHJlcGFyZVRvVXBsb2FkaW5nOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFByZXBhcmVzIHRvIHVwbG9hZGluZ1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVUb1VwbG9hZGluZygpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5pbmRleCB8fCArK3RoaXMudXBsb2FkZXIuX25leHRJbmRleDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfcmVwbGFjZU5vZGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmVwbGFjZXMgaW5wdXQgZWxlbWVudCBvbiBoaXMgY2xvbmVcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7SlFMaXRlfGpRdWVyeX0gaW5wdXRcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXBsYWNlTm9kZShpbnB1dCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZSA9ICRjb21waWxlKGlucHV0LmNsb25lKCkpKGlucHV0LnNjb3BlKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNsb25lLnByb3AoXCJ2YWx1ZVwiLCBudWxsKTsgLy8gRkYgZml4XG5cdCAgICAgICAgICAgICAgICAgICAgaW5wdXQuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5wdXQuYWZ0ZXIoY2xvbmUpOyAvLyByZW1vdmUganF1ZXJ5IGRlcGVuZGVuY3lcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVJdGVtO1xuXHQgICAgfSkoKTtcblxuXHQgICAgcmV0dXJuIEZpbGVJdGVtO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCIkY29tcGlsZVwiLCBcIkZpbGVMaWtlT2JqZWN0XCJdO1xuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdHZhciBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZDtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBGaWxlRGlyZWN0aXZlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGluc3RhbmNlIG9mIHtGaWxlRGlyZWN0aXZlfSBvYmplY3Rcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnVwbG9hZGVyXG5cdCAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gb3B0aW9ucy5lbGVtZW50XG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuZXZlbnRzXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucHJvcFxuXHQgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuXHQgICAgICAgICAqL1xuXG5cdCAgICAgICAgZnVuY3Rpb24gRmlsZURpcmVjdGl2ZShvcHRpb25zKSB7XG5cdCAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlRGlyZWN0aXZlKTtcblxuXHQgICAgICAgICAgICBleHRlbmQodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgIHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXNbdGhpcy5wcm9wXS5wdXNoKHRoaXMpO1xuXHQgICAgICAgICAgICB0aGlzLl9zYXZlTGlua3MoKTtcblx0ICAgICAgICAgICAgdGhpcy5iaW5kKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgX2NyZWF0ZUNsYXNzKEZpbGVEaXJlY3RpdmUsIHtcblx0ICAgICAgICAgICAgYmluZDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBCaW5kcyBldmVudHMgaGFuZGxlc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmV2ZW50cykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IHRoaXMuZXZlbnRzW2tleV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5iaW5kKGtleSwgdGhpc1twcm9wXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB1bmJpbmQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVW5iaW5kcyBldmVudHMgaGFuZGxlc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZXZlbnRzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC51bmJpbmQoa2V5LCB0aGlzLmV2ZW50c1trZXldKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGRlc3Ryb3k6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRGVzdHJveXMgZGlyZWN0aXZlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy51cGxvYWRlci5fZGlyZWN0aXZlc1t0aGlzLnByb3BdLmluZGV4T2YodGhpcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5fZGlyZWN0aXZlc1t0aGlzLnByb3BdLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfc2F2ZUxpbmtzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFNhdmVzIGxpbmtzIHRvIGZ1bmN0aW9uc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NhdmVMaW5rcygpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5ldmVudHMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSB0aGlzLmV2ZW50c1trZXldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BdID0gdGhpc1twcm9wXS5iaW5kKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVEaXJlY3RpdmU7XG5cdCAgICB9KSgpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1hcCBvZiBldmVudHNcblx0ICAgICAqIEB0eXBlIHtPYmplY3R9XG5cdCAgICAgKi9cblx0ICAgIEZpbGVEaXJlY3RpdmUucHJvdG90eXBlLmV2ZW50cyA9IHt9O1xuXG5cdCAgICByZXR1cm4gRmlsZURpcmVjdGl2ZTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW107XG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGtleSBpbiBwcm9wcykgeyB2YXIgcHJvcCA9IHByb3BzW2tleV07IHByb3AuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKHByb3AudmFsdWUpIHByb3Aud3JpdGFibGUgPSB0cnVlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpOyB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjICYmIGRlc2Mud3JpdGFibGUpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5cdHZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQ7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoRmlsZURpcmVjdGl2ZSkge1xuXHQgICAgdmFyIEZpbGVTZWxlY3QgPSAoZnVuY3Rpb24gKF9GaWxlRGlyZWN0aXZlKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBpbnN0YW5jZSBvZiB7RmlsZVNlbGVjdH0gb2JqZWN0XG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVTZWxlY3Qob3B0aW9ucykge1xuXHQgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVNlbGVjdCk7XG5cblx0ICAgICAgICAgICAgdmFyIGV4dGVuZGVkT3B0aW9ucyA9IGV4dGVuZChvcHRpb25zLCB7XG5cdCAgICAgICAgICAgICAgICAvLyBNYXAgb2YgZXZlbnRzXG5cdCAgICAgICAgICAgICAgICBldmVudHM6IHtcblx0ICAgICAgICAgICAgICAgICAgICAkZGVzdHJveTogXCJkZXN0cm95XCIsXG5cdCAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBcIm9uQ2hhbmdlXCJcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHByb3BlcnR5IGluc2lkZSB1cGxvYWRlci5fZGlyZWN0aXZlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgcHJvcDogXCJzZWxlY3RcIlxuXHQgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihGaWxlU2VsZWN0LnByb3RvdHlwZSksIFwiY29uc3RydWN0b3JcIiwgdGhpcykuY2FsbCh0aGlzLCBleHRlbmRlZE9wdGlvbnMpO1xuXG5cdCAgICAgICAgICAgIGlmICghdGhpcy51cGxvYWRlci5pc0hUTUw1KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cihcIm11bHRpcGxlXCIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuZWxlbWVudC5wcm9wKFwidmFsdWVcIiwgbnVsbCk7IC8vIEZGIGZpeFxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIF9pbmhlcml0cyhGaWxlU2VsZWN0LCBfRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZVNlbGVjdCwge1xuXHQgICAgICAgICAgICBnZXRPcHRpb25zOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGdldEZpbHRlcnM6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJuIHtBcnJheTxGdW5jdGlvbj58U3RyaW5nfHVuZGVmaW5lZH1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVycygpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGlzRW1wdHlBZnRlclNlbGVjdGlvbjoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJZiByZXR1cm5zIFwidHJ1ZVwiIHRoZW4gSFRNTElucHV0RWxlbWVudCB3aWxsIGJlIGNsZWFyZWRcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5QWZ0ZXJTZWxlY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5lbGVtZW50LmF0dHIoXCJtdWx0aXBsZVwiKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25DaGFuZ2U6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlclxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZXMgPSB0aGlzLnVwbG9hZGVyLmlzSFRNTDUgPyB0aGlzLmVsZW1lbnRbMF0uZmlsZXMgOiB0aGlzLmVsZW1lbnRbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVycyA9IHRoaXMuZ2V0RmlsdGVycygpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVwbG9hZGVyLmlzSFRNTDUpIHRoaXMuZGVzdHJveSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIuYWRkVG9RdWV1ZShmaWxlcywgb3B0aW9ucywgZmlsdGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eUFmdGVyU2VsZWN0aW9uKCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnByb3AoXCJ2YWx1ZVwiLCBudWxsKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlcGxhY2VXaXRoKHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudC5jbG9uZSh0cnVlKSk7IC8vIElFIGZpeFxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVTZWxlY3Q7XG5cdCAgICB9KShGaWxlRGlyZWN0aXZlKTtcblxuXHQgICAgcmV0dXJuIEZpbGVTZWxlY3Q7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMuJGluamVjdCA9IFtcIkZpbGVEaXJlY3RpdmVcIl07XG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGtleSBpbiBwcm9wcykgeyB2YXIgcHJvcCA9IHByb3BzW2tleV07IHByb3AuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKHByb3AudmFsdWUpIHByb3Aud3JpdGFibGUgPSB0cnVlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpOyB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjICYmIGRlc2Mud3JpdGFibGUpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5cdHZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQ7XG5cdHZhciBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEZpbGVEaXJlY3RpdmUpIHtcblx0ICAgIHZhciBGaWxlRHJvcCA9IChmdW5jdGlvbiAoX0ZpbGVEaXJlY3RpdmUpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGluc3RhbmNlIG9mIHtGaWxlRHJvcH0gb2JqZWN0XG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVEcm9wKG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGVEcm9wKTtcblxuXHQgICAgICAgICAgICB2YXIgZXh0ZW5kZWRPcHRpb25zID0gZXh0ZW5kKG9wdGlvbnMsIHtcblx0ICAgICAgICAgICAgICAgIC8vIE1hcCBvZiBldmVudHNcblx0ICAgICAgICAgICAgICAgIGV2ZW50czoge1xuXHQgICAgICAgICAgICAgICAgICAgICRkZXN0cm95OiBcImRlc3Ryb3lcIixcblx0ICAgICAgICAgICAgICAgICAgICBkcm9wOiBcIm9uRHJvcFwiLFxuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdvdmVyOiBcIm9uRHJhZ092ZXJcIixcblx0ICAgICAgICAgICAgICAgICAgICBkcmFnbGVhdmU6IFwib25EcmFnTGVhdmVcIlxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIC8vIE5hbWUgb2YgcHJvcGVydHkgaW5zaWRlIHVwbG9hZGVyLl9kaXJlY3RpdmUgb2JqZWN0XG5cdCAgICAgICAgICAgICAgICBwcm9wOiBcImRyb3BcIlxuXHQgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihGaWxlRHJvcC5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcywgZXh0ZW5kZWRPcHRpb25zKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfaW5oZXJpdHMoRmlsZURyb3AsIF9GaWxlRGlyZWN0aXZlKTtcblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhGaWxlRHJvcCwge1xuXHQgICAgICAgICAgICBnZXRPcHRpb25zOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGdldEZpbHRlcnM6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJuIHtBcnJheTxGdW5jdGlvbj58U3RyaW5nfHVuZGVmaW5lZH1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVycygpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uRHJvcDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVyXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRHJvcChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2ZlciA9IHRoaXMuX2dldFRyYW5zZmVyKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICB9dmFyIG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVycyA9IHRoaXMuZ2V0RmlsdGVycygpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRBbmRTdG9wKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXMub3ZlciwgdGhpcy5fcmVtb3ZlT3ZlckNsYXNzLCB0aGlzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmFkZFRvUXVldWUodHJhbnNmZXIuZmlsZXMsIG9wdGlvbnMsIGZpbHRlcnMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkRyYWdPdmVyOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXJcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25EcmFnT3ZlcihldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2ZlciA9IHRoaXMuX2dldFRyYW5zZmVyKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhdmVGaWxlcyh0cmFuc2Zlci50eXBlcykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIH10cmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJjb3B5XCI7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmVudEFuZFN0b3AoZXZlbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2godGhpcy51cGxvYWRlci5fZGlyZWN0aXZlcy5vdmVyLCB0aGlzLl9hZGRPdmVyQ2xhc3MsIHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkRyYWdMZWF2ZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVyXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRHJhZ0xlYXZlKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IHRoaXMuZWxlbWVudFswXSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgfXRoaXMuX3ByZXZlbnRBbmRTdG9wKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXMub3ZlciwgdGhpcy5fcmVtb3ZlT3ZlckNsYXNzLCB0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2dldFRyYW5zZmVyOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIEhlbHBlclxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VHJhbnNmZXIoZXZlbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuZGF0YVRyYW5zZmVyID8gZXZlbnQuZGF0YVRyYW5zZmVyIDogZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXI7IC8vIGpRdWVyeSBmaXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9wcmV2ZW50QW5kU3RvcDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBIZWxwZXJcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXZlbnRBbmRTdG9wKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2hhdmVGaWxlczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHR5cGVzIGNvbnRhaW5zIGZpbGVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZXNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhdmVGaWxlcyh0eXBlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdHlwZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1pZiAodHlwZXMuaW5kZXhPZikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXMuaW5kZXhPZihcIkZpbGVzXCIpICE9PSAtMTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVzLmNvbnRhaW5zKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlcy5jb250YWlucyhcIkZpbGVzXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9hZGRPdmVyQ2xhc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZE92ZXJDbGFzcyhpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRPdmVyQ2xhc3MoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3JlbW92ZU92ZXJDbGFzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlT3ZlckNsYXNzKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZU92ZXJDbGFzcygpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICByZXR1cm4gRmlsZURyb3A7XG5cdCAgICB9KShGaWxlRGlyZWN0aXZlKTtcblxuXHQgICAgcmV0dXJuIEZpbGVEcm9wO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCJGaWxlRGlyZWN0aXZlXCJdO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYyAmJiBkZXNjLndyaXRhYmxlKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuXHR2YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cblx0dmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEZpbGVEaXJlY3RpdmUpIHtcblx0ICAgIHZhciBGaWxlT3ZlciA9IChmdW5jdGlvbiAoX0ZpbGVEaXJlY3RpdmUpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGluc3RhbmNlIG9mIHtGaWxlRHJvcH0gb2JqZWN0XG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVPdmVyKG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGVPdmVyKTtcblxuXHQgICAgICAgICAgICB2YXIgZXh0ZW5kZWRPcHRpb25zID0gZXh0ZW5kKG9wdGlvbnMsIHtcblx0ICAgICAgICAgICAgICAgIC8vIE1hcCBvZiBldmVudHNcblx0ICAgICAgICAgICAgICAgIGV2ZW50czoge1xuXHQgICAgICAgICAgICAgICAgICAgICRkZXN0cm95OiBcImRlc3Ryb3lcIlxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIC8vIE5hbWUgb2YgcHJvcGVydHkgaW5zaWRlIHVwbG9hZGVyLl9kaXJlY3RpdmUgb2JqZWN0XG5cdCAgICAgICAgICAgICAgICBwcm9wOiBcIm92ZXJcIixcblx0ICAgICAgICAgICAgICAgIC8vIE92ZXIgY2xhc3Ncblx0ICAgICAgICAgICAgICAgIG92ZXJDbGFzczogXCJudi1maWxlLW92ZXJcIlxuXHQgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihGaWxlT3Zlci5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcywgZXh0ZW5kZWRPcHRpb25zKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfaW5oZXJpdHMoRmlsZU92ZXIsIF9GaWxlRGlyZWN0aXZlKTtcblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhGaWxlT3Zlciwge1xuXHQgICAgICAgICAgICBhZGRPdmVyQ2xhc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQWRkcyBvdmVyIGNsYXNzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE92ZXJDbGFzcygpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5nZXRPdmVyQ2xhc3MoKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHJlbW92ZU92ZXJDbGFzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZW1vdmVzIG92ZXIgY2xhc3Ncblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlT3ZlckNsYXNzKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLmdldE92ZXJDbGFzcygpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZ2V0T3ZlckNsYXNzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgb3ZlciBjbGFzc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlckNsYXNzKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm92ZXJDbGFzcztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVPdmVyO1xuXHQgICAgfSkoRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgIHJldHVybiBGaWxlT3Zlcjtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiRmlsZURpcmVjdGl2ZVwiXTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCRwYXJzZSwgRmlsZVVwbG9hZGVyLCBGaWxlU2VsZWN0KSB7XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB1cGxvYWRlciA9IHNjb3BlLiRldmFsKGF0dHJpYnV0ZXMudXBsb2FkZXIpO1xuXG5cdCAgICAgICAgICAgIGlmICghKHVwbG9hZGVyIGluc3RhbmNlb2YgRmlsZVVwbG9hZGVyKSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcXCJVcGxvYWRlclxcXCIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGaWxlVXBsb2FkZXJcIik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB2YXIgb2JqZWN0ID0gbmV3IEZpbGVTZWxlY3Qoe1xuXHQgICAgICAgICAgICAgICAgdXBsb2FkZXI6IHVwbG9hZGVyLFxuXHQgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudFxuXHQgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICBvYmplY3QuZ2V0T3B0aW9ucyA9ICRwYXJzZShhdHRyaWJ1dGVzLm9wdGlvbnMpLmJpbmQob2JqZWN0LCBzY29wZSk7XG5cdCAgICAgICAgICAgIG9iamVjdC5nZXRGaWx0ZXJzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXMuZmlsdGVycztcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCIkcGFyc2VcIiwgXCJGaWxlVXBsb2FkZXJcIiwgXCJGaWxlU2VsZWN0XCJdO1xuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHBhcnNlLCBGaWxlVXBsb2FkZXIsIEZpbGVEcm9wKSB7XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB1cGxvYWRlciA9IHNjb3BlLiRldmFsKGF0dHJpYnV0ZXMudXBsb2FkZXIpO1xuXG5cdCAgICAgICAgICAgIGlmICghKHVwbG9hZGVyIGluc3RhbmNlb2YgRmlsZVVwbG9hZGVyKSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcXCJVcGxvYWRlclxcXCIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGaWxlVXBsb2FkZXJcIik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAoIXVwbG9hZGVyLmlzSFRNTDUpIHJldHVybjtcblxuXHQgICAgICAgICAgICB2YXIgb2JqZWN0ID0gbmV3IEZpbGVEcm9wKHtcblx0ICAgICAgICAgICAgICAgIHVwbG9hZGVyOiB1cGxvYWRlcixcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgb2JqZWN0LmdldE9wdGlvbnMgPSAkcGFyc2UoYXR0cmlidXRlcy5vcHRpb25zKS5iaW5kKG9iamVjdCwgc2NvcGUpO1xuXHQgICAgICAgICAgICBvYmplY3QuZ2V0RmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzLmZpbHRlcnM7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiJHBhcnNlXCIsIFwiRmlsZVVwbG9hZGVyXCIsIFwiRmlsZURyb3BcIl07XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChGaWxlVXBsb2FkZXIsIEZpbGVPdmVyKSB7XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB1cGxvYWRlciA9IHNjb3BlLiRldmFsKGF0dHJpYnV0ZXMudXBsb2FkZXIpO1xuXG5cdCAgICAgICAgICAgIGlmICghKHVwbG9hZGVyIGluc3RhbmNlb2YgRmlsZVVwbG9hZGVyKSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlxcXCJVcGxvYWRlclxcXCIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGaWxlVXBsb2FkZXJcIik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB2YXIgb2JqZWN0ID0gbmV3IEZpbGVPdmVyKHtcblx0ICAgICAgICAgICAgICAgIHVwbG9hZGVyOiB1cGxvYWRlcixcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgb2JqZWN0LmdldE92ZXJDbGFzcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzLm92ZXJDbGFzcyB8fCBvYmplY3Qub3ZlckNsYXNzO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMuJGluamVjdCA9IFtcIkZpbGVVcGxvYWRlclwiLCBcIkZpbGVPdmVyXCJdO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmd1bGFyLWZpbGUtdXBsb2FkLmpzLm1hcFxuIiwiLy8gLS1BdXRob3IgTXVyYWdpamltYW5hIFJpY2hhcmQgPGJlYXN0YXI0NTdAZ21haWwuY29tPlxuLy8gdmFyIHN5bmMgPSBhbmd1bGFyLm1vZHVsZShcInN5bmNcIiwgW1wibmdSb3V0ZVwiLFwiYW5ndWxhckZpbGVVcGxvYWRcIixcImlvbmljXCIsXCJuZ1Jlc291cmNlXCIsXCJ1aS5ib290c3RyYXBcIixcImluZmluaXRlLXNjcm9sbFwiXSk7XG4vLyBtb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdhcHBDb25maWcnLCB7XG5cbmFuZ3VsYXIubW9kdWxlKCdBdXRoTWFuYWdlcicsW10pLnNlcnZpY2UoJ1Nlc3Npb25TZXJ2aWNlJywgW2Z1bmN0aW9uKCl7XG4gICAgdmFyIHVzZXJJc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuc2V0VXNlckF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHVzZXJJc0F1dGhlbnRpY2F0ZWQgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRVc2VyQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB1c2VySXNBdXRoZW50aWNhdGVkO1xuICAgIH07XG59XSk7XG5cbnZhciBzeW5jID0gYW5ndWxhci5tb2R1bGUoXCJzeW5jXCIsIFtcIm5nUm91dGVcIixcImFuZ3VsYXJGaWxlVXBsb2FkXCIsXCJ1aS5ib290c3RyYXBcIixcInVpLnJvdXRlclwiLFwiaW5maW5pdGUtc2Nyb2xsXCIsJ25nTWF0ZXJpYWwnLCAnbmdNZXNzYWdlcycsICdtYXRlcmlhbC5zdmdBc3NldHNDYWNoZScsJ25nLW1mYicsJ3BkZicsJ25nQ29udGV4dE1lbnUnLCdhbmd1bGFyLWxvYWRpbmctYmFyJywnbmdGaWxlU2F2ZXInLCdBdXRoTWFuYWdlcicsJ25nRGlhbG9nJ10pO1xuXG5cbnZhciBMb2dnZXI9YW5ndWxhci5tb2R1bGUoXCJMb2dnZXJcIixbXSk7XG5Mb2dnZXIucnVuKFsnJHJvb3RTY29wZScsZnVuY3Rpb24oJHJvb3RTY29wZSl7XG5cbiAgICAgIC8vICRyb290U2NvcGUuZW5kUG9pbnQ9J2h0dHBzOi8vc3RyZWFtdXBib3guY29tJztcbiAgICAgICRyb290U2NvcGUuZW5kUG9pbnQ9J2h0dHA6Ly9zeW5jbWUuY29tOjgwMDAnO1xufV0pO1xud2luZG93LnJvdXRlcyA9XG57XG4gICAgXCIvRmlsZXNcIjoge1xuICAgICAgICB1cmw6IFwiL0ZpbGVzXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZmlsZXMuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdGaWxlc0NvbnRyb2xsZXInLFxuICAgICAgICByZXF1aXJlTG9naW46IHRydWVcbiAgICAgIH0sXG4gICAgICBcInByZXZpZXdcIjp7XG4gICAgICAgIHVybDogJy8hLzpwcmV2aWV3LzpleHRlbnNpb24vOm9mLzp1c2VyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9maWxlUHJldmlldy5odG1sJyxcbiAgICAgICAgY29udHJvbGxlciA6ICdwcmV2aWV3Q29udHJvbGxlcidcbiAgICAgIH0sXG5cbiAgICAgIFwiL0dyb3Vwc1wiOiB7XG4gICAgICAgICAgdXJsOiBcIi9Hcm91cHNcIixcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2dyb3Vwcy5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnR3JvdXBDb250cm9sbGVyJyxcbiAgICAgICAgICByZXF1aXJlTG9naW46IHRydWVcbiAgICAgIH1cbn07XG5cblxuc3luYy5ydW4oWyckcm9vdFNjb3BlJywnJGxvZycsZnVuY3Rpb24oJHJvb3RTY29wZSwkbG9nKXtcbiAgJHJvb3RTY29wZS5lbmRQb2ludD0naHR0cDovL3N5bmNtZS5jb206ODAwMCc7XG4gICAvLyAkcm9vdFNjb3BlLmVuZFBvaW50PSdodHRwczovL3N0cmVhbXVwYm94LmNvbSc7XG5cblxuICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLGZ1bmN0aW9uKGV2ZW50LCBuZXh0LCBjdXJyZW50KXtcbiAgICBmb3IodmFyIGkgaW4gd2luZG93LnJvdXRlcykge1xuXG4gICAgICAgIGlmKG5leHQuaW5kZXhPZihpKSAhPSAtMSkge1xuICAgICAgICAgICAgaWYod2luZG93LnJvdXRlc1tpXS5yZXF1aXJlTG9naW4gJiYgIVNlc3Npb25TZXJ2aWNlLmdldFVzZXJBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIllvdSBuZWVkIHRvIGJlIGF1dGhlbnRpY2F0ZWQgdG8gc2VlIHRoaXMgcGFnZSFcIik7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuICB9KTtcbn1dKTtcbnN5bmMucHJvdmlkZXIoe1xuXG4gICAgJGV4Y2VwdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGV4Y2VwdGlvbik7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgICAgICB9O1xuICAgIH1cbn0pO1xuc3luYy5jb25maWcoWyckc2NlUHJvdmlkZXInLCckaHR0cFByb3ZpZGVyJywnJG1kVGhlbWluZ1Byb3ZpZGVyJywnY2ZwTG9hZGluZ0JhclByb3ZpZGVyJyxmdW5jdGlvbigkc2NlUHJvdmlkZXIsJGh0dHBQcm92aWRlciwkbWRUaGVtaW5nUHJvdmlkZXIsY2ZwTG9hZGluZ0JhclByb3ZpZGVyKSB7XG4gICAgZGVsZXRlICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXTtcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0JztcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0JztcbiAgICAvL3NldCBhdXRob3JpemF0aW9uIGZvciBvYXV0aDIuMCBmb3IgcHJvdGVjdGlvblxuXG5cbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydhdXRob3JpemF0aW9uJ10gPSAnQmVhcmVyIDhFdXFjTU5rRjJ5UDUwRGljcHY5aExSUnA3V09TYWJQbEN1MjJsaVknO1xuXG4gICAgLy8gJGh0dHBQcm92aWRlci5kZWZhdWx0cy51c2VYRG9tYWluID0gdHJ1ZTtcbiAgICAkc2NlUHJvdmlkZXIuZW5hYmxlZChmYWxzZSk7XG5cbiAgICBjZnBMb2FkaW5nQmFyUHJvdmlkZXIuaW5jbHVkZUJhciA9IGZhbHNlO1xufV0pO1xuc3luYy5jb25maWcoWyckc3RhdGVQcm92aWRlcicsJyR1cmxSb3V0ZXJQcm92aWRlcicsZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwkc2NvcGUpe1xuICAgICAgICAvLyAkcGFyc2VQcm92aWRlci51bndyYXBQcm9taXNlcyh0cnVlKSA7XG4gICAgICAgICAgZm9yKHZhciBwYXRoIGluIHdpbmRvdy5yb3V0ZXMpIHtcblxuICAgICAgICAgICAgICAvLyBpZihuZXh0LmluZGV4T2YocGF0aCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gICAgIGlmKHdpbmRvdy5yb3V0ZXNbcGF0aF0ucmVxdWlyZUxvZ2luICYmICFTZXNzaW9uU2VydmljZS5nZXRVc2VyQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgICAgIC8vICAgICAgICAgYWxlcnQoXCJZb3UgbmVlZCB0byBiZSBhdXRoZW50aWNhdGVkIHRvIHNlZSB0aGlzIHBhZ2UhXCIpO1xuICAgICAgICAgICAgICAvLyAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUocGF0aCwgd2luZG93LnJvdXRlc1twYXRoXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL0ZpbGVzJyk7XG5cbn1dKTtcblxuLy8gfSk7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tZG9uZSB3aXRoIE11cmFnaWppbWFuYSBSaWNoYXJkIDxiZWFzdGFyNDU3QGdtYWlsLmNvbT4tLS0tLS0tLS0tLS0tLS0vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWRlYWwgd2l0aCB1c2VyJ3MgYWN0aW9ucyBhbmQgaW50ZXJhY3Rpb24gd2l0aCBvdGhlciB1c2Vycy0tLS0tLS0tLS0tLS0tLS8vXG4iLCI7KGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtZmIgPSBhbmd1bGFyLm1vZHVsZSgnbmctbWZiJywgW10pO1xuXG4gIG1mYi5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgJHRlbXBsYXRlQ2FjaGUucHV0KCduZy1tZmItbWVudS1kZWZhdWx0LnRwbC5odG1sJyxcbiAgICAgICc8dWwgY2xhc3M9XCJtZmItY29tcG9uZW50LS17e3Bvc2l0aW9ufX0gbWZiLXt7ZWZmZWN0fX1cIicgK1xuICAgICAgJyAgICBkYXRhLW1mYi10b2dnbGU9XCJ7e3RvZ2dsaW5nTWV0aG9kfX1cIiBkYXRhLW1mYi1zdGF0ZT1cInt7bWVudVN0YXRlfX1cIj4nICtcbiAgICAgICcgIDxsaSBjbGFzcz1cIm1mYi1jb21wb25lbnRfX3dyYXBcIj4nICtcbiAgICAgICcgICAgPGEgbmctY2xpY2s9XCJjbGlja2VkKClcIiBuZy1tb3VzZWVudGVyPVwiaG92ZXJlZCgpXCIgbmctbW91c2VsZWF2ZT1cImhvdmVyZWQoKVwiJyArXG4gICAgICAnICAgICAgIG5nLWF0dHItZGF0YS1tZmItbGFiZWw9XCJ7e2xhYmVsfX1cIiBjbGFzcz1cIm1mYi1jb21wb25lbnRfX2J1dHRvbi0tbWFpblwiPicgK1xuICAgICAgJyAgICAgPGkgY2xhc3M9XCJtZmItY29tcG9uZW50X19tYWluLWljb24tLXJlc3Rpbmcge3tyZXN0aW5nfX1cIj48L2k+JyArXG4gICAgICAnICAgICA8aSBjbGFzcz1cIm1mYi1jb21wb25lbnRfX21haW4taWNvbi0tYWN0aXZlIHt7YWN0aXZlfX1cIj48L2k+JyArXG4gICAgICAnICAgIDwvYT4nICtcbiAgICAgICcgICAgPHVsIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fbGlzdFwiIG5nLXRyYW5zY2x1ZGU+JyArXG4gICAgICAnICAgIDwvdWw+JyArXG4gICAgICAnPC9saT4nICtcbiAgICAgICc8L3VsPidcbiAgICApO1xuXG4gICAgJHRlbXBsYXRlQ2FjaGUucHV0KCduZy1tZmItbWVudS1tZC50cGwuaHRtbCcsXG4gICAgICAnPHVsIGNsYXNzPVwibWZiLWNvbXBvbmVudC0te3twb3NpdGlvbn19IG1mYi17e2VmZmVjdH19XCInICtcbiAgICAgICcgICAgZGF0YS1tZmItdG9nZ2xlPVwie3t0b2dnbGluZ01ldGhvZH19XCIgZGF0YS1tZmItc3RhdGU9XCJ7e21lbnVTdGF0ZX19XCI+JyArXG4gICAgICAnICA8bGkgY2xhc3M9XCJtZmItY29tcG9uZW50X193cmFwXCI+JyArXG4gICAgICAnICAgIDxhIG5nLWNsaWNrPVwiY2xpY2tlZCgpXCIgbmctbW91c2VlbnRlcj1cImhvdmVyZWQoKVwiIG5nLW1vdXNlbGVhdmU9XCJob3ZlcmVkKClcIicgK1xuICAgICAgJyAgICAgICBzdHlsZT1cImJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBib3gtc2hhZG93OiBub25lO1wiJyArXG4gICAgICAnICAgICAgIG5nLWF0dHItZGF0YS1tZmItbGFiZWw9XCJ7e2xhYmVsfX1cIiBjbGFzcz1cIm1mYi1jb21wb25lbnRfX2J1dHRvbi0tbWFpblwiPicgK1xuICAgICAgJyAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWZhYiBtZC1hY2NlbnRcIiBhcmlhLWxhYmVsPXt7bGFiZWx9fSBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlOyBtYXJnaW46IDA7IHBhZGRpbmc6MDtcIj4nICtcbiAgICAgICcgICAgICAgPG1kLWljb24gc3R5bGU9XCJsZWZ0OiAwOyBwb3NpdGlvbjogcmVsYXRpdmU7XCIgbWQtc3ZnLWljb249XCJ7e3Jlc3Rpbmd9fVwiJyArXG4gICAgICAnICAgICAgICAgY2xhc3M9XCJtZmItY29tcG9uZW50X19tYWluLWljb24tLXJlc3RpbmdcIj48L21kLWljb24+JyArXG4gICAgICAnICAgICAgIDxtZC1pY29uIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCIgbWQtc3ZnLWljb249XCJ7e2FjdGl2ZX19XCInICtcbiAgICAgICcgICAgICAgICBjbGFzcz1cIm1mYi1jb21wb25lbnRfX21haW4taWNvbi0tYWN0aXZlXCI+PC9tZC1pY29uPicgK1xuICAgICAgJyAgICAgPC9tZC1idXR0b24+JyArXG4gICAgICAnICAgIDwvYT4nICtcbiAgICAgICcgICAgPHVsIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fbGlzdFwiIG5nLXRyYW5zY2x1ZGU+JyArXG4gICAgICAnICAgIDwvdWw+JyArXG4gICAgICAnPC9saT4nICtcbiAgICAgICc8L3VsPidcbiAgICApO1xuXG4gICAgJHRlbXBsYXRlQ2FjaGUucHV0KCduZy1tZmItYnV0dG9uLWRlZmF1bHQudHBsLmh0bWwnLFxuICAgICAgJzxsaT4nICtcbiAgICAgICcgIDxhIGRhdGEtbWZiLWxhYmVsPVwie3tsYWJlbH19XCIgY2xhc3M9XCJtZmItY29tcG9uZW50X19idXR0b24tLWNoaWxkXCI+JyArXG4gICAgICAnICAgIDxpIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fY2hpbGQtaWNvbiB7e2ljb259fVwiPicgK1xuICAgICAgJyAgICA8L2k+JyArXG4gICAgICAnICA8L2E+JyArXG4gICAgICAnPC9saT4nXG4gICAgKTtcblxuICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgnbmctbWZiLWJ1dHRvbi1tZC50cGwuaHRtbCcsXG4gICAgICAnPGxpPicgK1xuICAgICAgJyAgPGEgaHJlZj1cIlwiIGRhdGEtbWZiLWxhYmVsPVwie3tsYWJlbH19XCIgY2xhc3M9XCJtZmItY29tcG9uZW50X19idXR0b24tLWNoaWxkXCIgJyArXG4gICAgICAnICAgICBzdHlsZT1cImJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBib3gtc2hhZG93OiBub25lO1wiPicgK1xuICAgICAgJyAgICAgPG1kLWJ1dHRvbiBzdHlsZT1cIm1hcmdpbjogMDtcIiBjbGFzcz1cIm1kLWZhYiBtZC1hY2NlbnRcIiBhcmlhLWxhYmVsPXt7bGFiZWx9fT4nICtcbiAgICAgICcgICAgICAgPG1kLWljb24gbWQtc3ZnLXNyYz1cImltZy9pY29ucy9hbmRyb2lkLnN2Z1wiPjwvbWQtaWNvbj4nICtcbiAgICAgICcgICAgICAgPG1kLWljb24gbWQtc3ZnLWljb249XCJ7e2ljb259fVwiPjwvbWQtaWNvbj4nICtcbiAgICAgICcgICAgIDwvbWQtYnV0dG9uPicgK1xuICAgICAgJyAgPC9hPicgK1xuICAgICAgJzwvbGk+J1xuICAgICk7XG4gIH1dKTtcblxuICBtZmIuZGlyZWN0aXZlKCdtZmJCdXR0b25DbG9zZScsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogJ15tZmJNZW51JyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgbWZiTWVudUNvbnRyb2xsZXIpIHtcbiAgICAgICAgJGVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBtZmJNZW51Q29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfTtcblxuICB9KTtcblxuICBtZmIuZGlyZWN0aXZlKCdtZmJNZW51JywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICBzY29wZToge1xuICAgICAgICBwb3NpdGlvbjogJ0AnLFxuICAgICAgICBlZmZlY3Q6ICdAJyxcbiAgICAgICAgbGFiZWw6ICdAJyxcbiAgICAgICAgcmVzdGluZzogJ0ByZXN0aW5nSWNvbicsXG4gICAgICAgIGFjdGl2ZTogJ0BhY3RpdmVJY29uJyxcbiAgICAgICAgbWFpbkFjdGlvbjogJyYnLFxuICAgICAgICBtZW51U3RhdGU6ICc9PycsXG4gICAgICAgIHRvZ2dsaW5nTWV0aG9kOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbSwgYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICduZy1tZmItbWVudS1kZWZhdWx0LnRwbC5odG1sJztcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckYXR0cnMnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycykge1xuICAgICAgICB2YXIgb3BlblN0YXRlID0gJ29wZW4nLFxuICAgICAgICAgIGNsb3NlZFN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAgICAgLy8gQXR0YWNoZWQgdG9nZ2xlLCBvcGVuIGFuZCBjbG9zZSB0byB0aGUgY29udHJvbGxlciB0byBnaXZlIG90aGVyXG4gICAgICAgIC8vIGRpcmVjdGl2ZSBhY2Nlc3NcbiAgICAgICAgdGhpcy50b2dnbGUgPSB0b2dnbGU7XG4gICAgICAgIHRoaXMuY2xvc2UgPSBjbG9zZTtcbiAgICAgICAgdGhpcy5vcGVuID0gb3BlbjtcblxuICAgICAgICAkc2NvcGUuY2xpY2tlZCA9IGNsaWNrZWQ7XG4gICAgICAgICRzY29wZS5ob3ZlcmVkID0gaG92ZXJlZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBzdGF0ZSB0byB1c2VyLWRlZmluZWQgdmFsdWUuIEZhbGxiYWNrIHRvIGNsb3NlZCBpZiBub1xuICAgICAgICAgKiB2YWx1ZSBpcyBwYXNzZWQgZnJvbSB0aGUgb3V0c2lkZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICghJHNjb3BlLm1lbnVTdGF0ZSkge1xuICAgICAgICAgICRzY29wZS5tZW51U3RhdGUgPSBjbG9zZWRTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBvbiB0b3VjaCBkZXZpY2UgQU5EICdob3ZlcicgbWV0aG9kIGlzIHNlbGVjdGVkOlxuICAgICAgICAgKiB3YWl0IGZvciB0aGUgZGlnZXN0IHRvIHBlcmZvcm0gYW5kIHRoZW4gY2hhbmdlIGhvdmVyIHRvIGNsaWNrLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKF9pc1RvdWNoRGV2aWNlKCkgJiYgX2lzSG92ZXJBY3RpdmUoKSkge1xuICAgICAgICAgICR0aW1lb3V0KHVzZUNsaWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRhdHRycy4kb2JzZXJ2ZSgnbWVudVN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmN1cnJlbnRTdGF0ZSA9ICRzY29wZS5tZW51U3RhdGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsaWNrZWQoKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBtYWluIGFjdGlvbiwgbGV0J3MgZmlyZSBpdFxuICAgICAgICAgIGlmICgkc2NvcGUubWFpbkFjdGlvbikge1xuICAgICAgICAgICAgJHNjb3BlLm1haW5BY3Rpb24oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV9pc0hvdmVyQWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHRvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBob3ZlcmVkKCkge1xuICAgICAgICAgIGlmIChfaXNIb3ZlckFjdGl2ZSgpKSB7XG4gICAgICAgICAgICAvL3RvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW52ZXJ0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBtZW51LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICAgIGlmICgkc2NvcGUubWVudVN0YXRlID09PSBvcGVuU3RhdGUpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICAgICRzY29wZS5tZW51U3RhdGUgPSBvcGVuU3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICAkc2NvcGUubWVudVN0YXRlID0gY2xvc2VkU3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgaWYgd2UncmUgb24gYSB0b3VjaC1lbmFibGVkIGRldmljZS5cbiAgICAgICAgICogUmVxdWlyZXMgTW9kZXJuaXpyIHRvIHJ1biwgb3RoZXJ3aXNlIHNpbXBseSByZXR1cm5zIGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBfaXNUb3VjaERldmljZSgpIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93Lk1vZGVybml6ciAmJiBNb2Rlcm5penIudG91Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBfaXNIb3ZlckFjdGl2ZSgpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnRvZ2dsaW5nTWV0aG9kID09PSAnaG92ZXInO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnQgdGhlIHRvZ2dsaW5nIG1ldGhvZCB0byAnY2xpY2snLlxuICAgICAgICAgKiBUaGlzIGlzIHVzZWQgd2hlbiAnaG92ZXInIGlzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAqIGJ1dCBhIHRvdWNoIGRldmljZSBpcyBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdXNlQ2xpY2soKSB7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGluZ01ldGhvZCA9ICdjbGljayc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfTtcbiAgfV0pO1xuXG4gIG1mYi5kaXJlY3RpdmUoJ21mYkJ1dHRvbicsIFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWlyZTogJ15tZmJNZW51JyxcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICBzY29wZToge1xuICAgICAgICBpY29uOiAnQCcsXG4gICAgICAgIGxhYmVsOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbSwgYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICduZy1tZmItYnV0dG9uLWRlZmF1bHQudHBsLmh0bWwnO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxufSkod2luZG93LCBhbmd1bGFyKTtcbiIsInN5bmMuZGlyZWN0aXZlKCdsZWZ0TWVudScsZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiAnPScsXG4gICAgICAgICAgICB1c2VyOiAnPScsXG4gICAgICAgICAgICB0eXBlOiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiZGlyZWN0aXZlcy9sZWZ0TWVudS5odG1sXCJcbiAgICB9O1xufSk7XG5zeW5jLmRpcmVjdGl2ZSgnZmVlZHMnLGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgcG9zdHM6ICc9JyxcbiAgICAgICAgICAgIHJlcGxpZXM6ICc9JyxcbiAgICAgICAgICAgIGNyZWF0ZVBvc3Q6Jz0nXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImRpcmVjdGl2ZXMvbWlkZGxlQ29udGVudC5odG1sXCJcbiAgICB9O1xufSk7XG5zeW5jLmRpcmVjdGl2ZSgnaGVhZGVyJyxmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGRhdGE6ICc9JyxcbiAgICAgICAgICAgIHVzZXI6ICc9JyxcbiAgICAgICAgICAgIHR5cGU6ICc9J1xuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2RpcmVjdGl2ZXMvaGVhZGVyLmh0bWxcIlxuXG4gICAgfTtcbn0pO1xuXG5cbnN5bmMuZGlyZWN0aXZlKCdrZXliaW5kaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBpbnZva2U6ICcmJ1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRyKSB7XG4gICAgICAgICAgICBNb3VzZXRyYXAuYmluZChhdHRyLm9uLCBzY29wZS5pbnZva2UpO1xuICAgICAgICB9XG4gICAgfTtcbn0pO1xuIiwiLyogZ2xvYmFsICR3aW5kb3cgKi9cbi8qIGdsb2JhbCBMb2dnZXIgKi9cblxuTG9nZ2VyLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsWyckc2NvcGUnLCckaHR0cCcsJyRyb290U2NvcGUnLCckd2luZG93JywgZnVuY3Rpb24gKCRzY29wZSwkaHR0cCwkcm9vdFNjb3BlLCR3aW5kb3cpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgJ2NyZWRlZGVudGlhbC1ub3QtZm91bmQnICAgICAgIDogJ0NyZWRlbnRpYWxzIG5vdCBmb3VuZCEnLFxuICAgICAgICAnc3VjY2VzcycgICAgICAgICAgICAgICAgICAgICAgOiAnbG9nZ2luZyBpbi4uLidcbiAgICB9O1xuICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoaW5mbylcbiAge1xuICAgIC8vYmVmb3JlIG5vdGlmeSB0aGF0IHdlIGFyZSBsb2dnaW5naW5cbiAgICAkKCcubG9naW4tZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBzdWNjZXNzJykuaHRtbChvcHRpb25zWydzdWNjZXNzJ10pO1xuICAgICRodHRwLnBvc3QoJHJvb3RTY29wZS5lbmRQb2ludCArICcvc2Vzc2lvbnMnLGluZm8pXG4gICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgIGlmKHJlc3BvbnNlID09PVwiMVwiKXtcbiAgICAgICAgICAgIFJlZGlyZWN0aW5nKCk7XG5cbiAgICAgICAgfWVsc2UgaWYocmVzcG9uc2UgPT09IFwiMFwiKXtcbiAgICAgICAgICAgICAkKCcubG9naW4tZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBlcnJvcicpLmh0bWwob3B0aW9uc1snY3JlZGVkZW50aWFsLW5vdC1mb3VuZCddKTtcbiAgICAgICAgfWVsc2UgaWYocmVzcG9uc2UgPT09IFwibm90VmVyaWZpZWRcIil7XG4gICAgICAgICAgICBub3RWZXJpZmllZCgpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yOicrIGVycm9yKTtcbiAgICB9KVxuICAgIGZ1bmN0aW9uIG5vdFZlcmlmaWVkKCl7XG4gICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL25vdFZlcmlmaWVkJztcbiAgICB9XG4gICAgZnVuY3Rpb24gUmVkaXJlY3RpbmcoKXtcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9zeW5jJztcbiAgICB9XG4gIH1cbn1dKTtcbiIsIkxvZ2dlci5jb250cm9sbGVyKCdSZWdpc3RlckNvbnRyb2xsZXInLCBbJyRzY29wZScsJyRyb290U2NvcGUnLCckaHR0cCcsZnVuY3Rpb24gKCRzY29wZSwkcm9vdFNjb3BlLCRodHRwKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICdwYXNzd29yZC1ub3RNYXRjaCc6ICdwYXNzd29yZCBkbyBub3QgbWF0Y2gnLFxuICAgICAgICAnU2lnblVwSW5Qcm9ncmVzcycgOiAnV2FpdCB3ZSBhcmUgc2V0dGluZyB1cCB5b3VyIGFjY291bnQuJ1xuICAgIH07XG4gICAgJHNjb3BlLnJlZ2lzdGVyPWZ1bmN0aW9uKHVzZXIpe1xuICAgICAgJCgnLnJlZ2lzdGVyLWZvcm0tbWFpbi1tZXNzYWdlJykuYWRkQ2xhc3MoJ3Nob3cgc3VjY2VzcycpLmh0bWwob3B0aW9uc1snU2lnblVwSW5Qcm9ncmVzcyddKTtcbiAgICAgICAgaWYoJCgnI3Bhc3N3b3JkJykudmFsKCkgIT0gJCgnI3Bhc3N3b3JkLWNvbmZpcm0nKS52YWwoKSl7XG4gICAgICAgICAgJCgnLnJlZ2lzdGVyLWZvcm0tbWFpbi1tZXNzYWdlJykuYWRkQ2xhc3MoJ3Nob3cgZXJyb3InKS5odG1sKG9wdGlvbnNbJ3Bhc3N3b3JkLW5vdE1hdGNoJ10pO1xuICAgICAgICAgIHNldFRpbWVvdXQobWVzc2FnZVJlbW92ZSwgMjAwMCk7XG4gICAgICAgICAgZnVuY3Rpb24gbWVzc2FnZVJlbW92ZSgpe1xuICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnc2hvdyBlcnJvcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXJuYW1lPSQoJyN1c2VybmFtZScpLnZhbCgpO1xuICAgICAgICB2YXIgZW1haWw9JCgnI2VtYWlsJykudmFsKCk7XG5cblxuICAgICAgICBqUXVlcnkucG9zdCgnL3Nlc3Npb25zJywge3VzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6dXNlci5wYXNzd29yZCwgZW1haWw6ZW1haWwsIG9wdGlvbjp1c2VyLm9wdGlvbiwgcGhvbmU6dXNlci5waG9uZX0sIGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xuICAgICAgICAgICAgaWYoZGF0YSA9PSAxKXtcbiAgICAgICAgICAgICAgICAgUmVkaXJlY3RpbmcoKTtcbiAgICAgICAgICAgIH1lbHNlIGlmKGRhdGEgPT0wKXtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnd2UgYXJlIGZpcmVkIHRoaXMgY2FuIG5vdCBoYXBwZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gUmVkaXJlY3RpbmcoKXtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcvY2hlY2tFbWFpbCc7XG4gICAgICAgIH1cbiAgICB9XG59XSk7XG5cbkxvZ2dlci5kaXJlY3RpdmUoJ3VuaXF1ZVVzZXJuYW1lJywgWydpc1VzZXJuYW1lQXZhaWxhYmxlJyxmdW5jdGlvbihpc1VzZXJuYW1lQXZhaWxhYmxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAgICAgICAgICAgIG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy51bmlxdWVVc2VybmFtZSA9IGlzVXNlcm5hbWVBdmFpbGFibGU7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuTG9nZ2VyLmZhY3RvcnkoJ2lzVXNlcm5hbWVBdmFpbGFibGUnLCBbJyRxJywnJGh0dHAnLCckcm9vdFNjb3BlJyxmdW5jdGlvbigkcSwgJGh0dHAsJHJvb3RTY29wZSkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAnYnRuLWxvYWRpbmcnOiAnPGkgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXB1bHNlXCI+PC9pPicsXG4gICAgICAgICdidG4tc3VjY2Vzcyc6ICc8aSBjbGFzcz1cImZhIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICdidG4tZXJyb3InOiAnPGkgY2xhc3M9XCJmYSBmYS1yZW1vdmVcIj48L2k+JyxcbiAgICAgICAgJ21zZy1zdWNjZXNzJzogJ0FsbCBHb29kISBSZWRpcmVjdGluZy4uLicsXG4gICAgICAgICdtc2ctdXNlcm5hbWUtYXZhaWxhYmxlJzogJ2dvb2QgdXNlcm5hbWUgYXZhaWxhYmxlIScsXG4gICAgICAgICdtc2ctdXNlcm5hbWUtdGFrZW4nICAgIDogJ29vcHMgdXNlcm5hbWUgdGFrZW4nLFxuICAgICAgICAnbXNnLWVtYWlsLXRha2VuJyAgICAgICA6ICdlbWFpbCB0YWtlbicsXG4gICAgICAgICdtc2cteW91ci1waG9uZS1zdWNrJyAgIDogJ3lvdXIgcGhvbmUgaXMgbm90IHZhbGlkJyxcbiAgICAgICAgJ3VzZUFKQVgnOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG5cbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL3VzZXJzP3VzZXJuYW1lPScgKyB1c2VybmFtZSArICcmYWNjZXNzX3Rva2VuPUJjN0RXUzdLS1JMdHhtZGRVWkkxVDFsWnUySjFZaFI4T0xYR1dOWm4nKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgaWYoZGF0YT09J2F2YWlsYWJsZScpe1xuICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLmFkZENsYXNzKCdzaG93IHN1Y2Nlc3MnKS5odG1sKG9wdGlvbnNbJ21zZy11c2VybmFtZS1hdmFpbGFibGUnXSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChtZXNzYWdlUmVtb3ZlLCAyMDAwKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZXNzYWdlUmVtb3ZlKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdzaG93IHN1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZihkYXRhPT0ndGFrZW4nKXtcbiAgICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBlcnJvcicpLmh0bWwob3B0aW9uc1snbXNnLXVzZXJuYW1lLXRha2VuJ10pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodXNlcm5hbWVUYWtlbiwgMjAwMCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdXNlcm5hbWVUYWtlbigpe1xuICAgICAgICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnc2hvdyBlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufV0pO1xuTG9nZ2VyLmRpcmVjdGl2ZSgndW5pcXVlRW1haWwnLCBbJ2lzRW1haWxBdmFpbGFibGUnLGZ1bmN0aW9uKGlzRW1haWxBdmFpbGFibGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZUVtYWlsID0gaXNFbWFpbEF2YWlsYWJsZTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG5Mb2dnZXIuZmFjdG9yeSgnaXNFbWFpbEF2YWlsYWJsZScsIFsnJHEnLCckaHR0cCcsJyRyb290U2NvcGUnLGZ1bmN0aW9uICgkcSwgJGh0dHAsICRyb290U2NvcGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgJ2J0bi1sb2FkaW5nJzogJzxpIGNsYXNzPVwiZmEgZmEtc3Bpbm5lciBmYS1wdWxzZVwiPjwvaT4nLFxuICAgICAgICAnYnRuLXN1Y2Nlc3MnOiAnPGkgY2xhc3M9XCJmYSBmYS1jaGVja1wiPjwvaT4nLFxuICAgICAgICAnYnRuLWVycm9yJzogJzxpIGNsYXNzPVwiZmEgZmEtcmVtb3ZlXCI+PC9pPicsXG4gICAgICAgICdtc2ctc3VjY2Vzcyc6ICdBbGwgR29vZCEgUmVkaXJlY3RpbmcuLi4nLFxuICAgICAgICAnbXNnLXVzZXJuYW1lLWF2YWlsYWJsZSc6ICdnb29kIHVzZXJuYW1lIGF2YWlsYWJsZSEnLFxuICAgICAgICAnbXNnLXVzZXJuYW1lLXRha2VuJyAgICA6ICdvb3BzIHVzZXJuYW1lIHRha2VuJyxcbiAgICAgICAgJ21zZy1lbWFpbC10YWtlbicgICAgICAgOiAnZW1haWwgdGFrZW4nLFxuICAgICAgICAnbXNnLWVtYWlsLWF2YWlsYWJsZScgICA6ICdlbWFpbCBhdmFpbGFibGUnLFxuICAgICAgICAnbXNnLXlvdXItcGhvbmUtc3VjaycgICA6ICd5b3VyIHBob25lIGlzIG5vdCB2YWxpZCcsXG4gICAgICAgICd1c2VBSkFYJzogdHJ1ZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVtYWlsKSB7XG4gICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvdXNlcnM/ZW1haWw9JyArIGVtYWlsICsgJyZhY2Nlc3NfdG9rZW49QmM3RFdTN0tLUkx0eG1kZFVaSTFUMWxadTJKMVloUjhPTFhHV05abicpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XG5cbiAgICAgICAgICAgIGlmKGRhdGE9PSdlbWFpbC1hdmFpbGFibGUnKXtcbiAgICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBzdWNjZXNzJykuaHRtbChvcHRpb25zWydtc2ctZW1haWwtYXZhaWxhYmxlJ10pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobWVzc2FnZVJlbW92ZSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbWVzc2FnZVJlbW92ZSgpe1xuICAgICAgICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnc2hvdyBzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9ZWxzZSBpZihkYXRhPT0nZW1haWwtdGFrZW4nKXtcbiAgICAgICAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBlcnJvcicpLmh0bWwob3B0aW9uc1snbXNnLWVtYWlsLXRha2VuJ10pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobWVzc2FnZUVtYWlsVGFrZW4sIDIwMDApO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1lc3NhZ2VFbWFpbFRha2VuKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdzaG93IGVycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICB9KTtcbiAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG59XSk7XG4iLCJcbnN5bmMuY29udHJvbGxlcigndXBsb2FkRGlhbG9nQ3RybCcsIFsnJHNjb3BlJywnJHVpYk1vZGFsJywnJG1kRGlhbG9nJywnJG1kTWVkaWEnLCBmdW5jdGlvbiAoJHNjb3BlLCR1aWJNb2RhbCwgJG1kRGlhbG9nLCAkbWRNZWRpYSkge1xuXG5cdFx0XHRcdC8vZGVjbGFyZSBnbG9iYWwgZnVuY3Rpb24gZm9yIHNob3J0Y3V0XG5cdFx0XHRcdCRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkbWREaWFsb2cuaGlkZSgpO1xuXHRcdFx0XHR9O1xuXHRcdCAgICAkc2NvcGUuY3VzdG9tRnVsbHNjcmVlbiA9ICRtZE1lZGlhKCd4cycpIHx8ICRtZE1lZGlhKCdzbScpO1xuXHRcdCAgICAkc2NvcGUudXBsb2FkID0gZnVuY3Rpb24oZXYpIHtcblx0XHQgICAgICAkbWREaWFsb2cuc2hvdyh7XG5cdFx0XHRcdFx0XHRwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcblx0XHQgICAgICAgIGNvbnRyb2xsZXI6IERpYWxvZ0NvbnRyb2xsZXIsXG5cdFx0ICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3VwbG9hZC50cGwuaHRtbCcsXG5cdFx0ICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcblx0XHQgICAgICAgIHRhcmdldEV2ZW50OiBldixcblx0XHQgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6ZmFsc2Vcblx0XHQgICAgICB9KVxuXHRcdCAgICAgIC50aGVuKGZ1bmN0aW9uKGFuc3dlcikge1xuXHRcdCAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSAnWW91IHNhaWQgdGhlIGluZm9ybWF0aW9uIHdhcyBcIicgKyBhbnN3ZXIgKyAnXCIuJztcblx0XHQgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0ICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3UgY2FuY2VsbGVkIHRoZSBkaWFsb2cuJztcblx0XHQgICAgICAgICAgfSk7XG5cdFx0ICAgIH07XG5cdFx0XHRcdGZ1bmN0aW9uIERpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2cpIHtcblx0XHRcdFx0ICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQgICAgJG1kRGlhbG9nLmhpZGUoKTtcblx0XHRcdFx0ICB9O1xuXHRcdFx0XHQgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ICAgICRtZERpYWxvZy5jYW5jZWwoKTtcblx0XHRcdFx0ICB9O1xuXHRcdFx0XHQgICRzY29wZS5hbnN3ZXIgPSBmdW5jdGlvbihhbnN3ZXIpIHtcblx0XHRcdFx0ICAgICRtZERpYWxvZy5oaWRlKGFuc3dlcik7XG5cdFx0XHRcdCAgfTtcblx0XHRcdFx0fVxufV0pO1xuc3luYy5jb250cm9sbGVyKCdzaGFyZUNvbnRyb2xsZXInLCBbJyRzY29wZScsJyR1aWJNb2RhbCcsJyRtZERpYWxvZycsJyRtZE1lZGlhJywndXJsU2hvcnRlbmVyJywnU2hhcmUnLCdVc2VyJywgZnVuY3Rpb24gKCRzY29wZSwkdWliTW9kYWwsICRtZERpYWxvZywgJG1kTWVkaWEsdXJsU2hvcnRlbmVyLFNoYXJlLFVzZXIpIHtcblxuXHQvL2RlY2xhcmUgZ2xvYmFsIGZ1bmN0aW9uIGZvciBzaG9ydGN1dFxuXHQkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0JG1kRGlhbG9nLmhpZGUoKTtcblx0fTtcblx0JHNjb3BlLmN1c3RvbUZ1bGxzY3JlZW4gPSAkbWRNZWRpYSgneHMnKSB8fCAkbWRNZWRpYSgnc20nKTtcblx0JHNjb3BlLnNoYXJlID0gZnVuY3Rpb24oZXYsZmlsZU5hbWUpIHtcblxuXHRcdCRtZERpYWxvZy5zaG93KHtcblx0XHRcdHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuXHRcdFx0Y29udHJvbGxlcjogRGlhbG9nQ29udHJvbGxlcixcblx0XHRcdHRlbXBsYXRlVXJsOiAndmlld3Mvc2hhcmUudHBsLmh0bWwnLFxuXHRcdFx0cGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG5cdFx0XHR0YXJnZXRFdmVudDogZXYsXG5cdFx0XHRjbGlja091dHNpZGVUb0Nsb3NlOmZhbHNlXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcblx0XHRcdFx0XHQkc2NvcGUuc3RhdHVzID0gJ1lvdSBzYWlkIHRoZSBpbmZvcm1hdGlvbiB3YXMgXCInICsgYW5zd2VyICsgJ1wiLic7XG5cdFx0XHRcdH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRzY29wZS5zdGF0dXMgPSAnWW91IGNhbmNlbGxlZCB0aGUgZGlhbG9nLic7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nKSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ3NoYXJlZEZpbGUnKyBmaWxlTmFtZSk7XG5cdFx0XHRcdFx0JHNjb3BlLmdldEZpbGUgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5maWxlPXVybFNob3J0ZW5lci5tYWtlU2hvcnQoZmlsZU5hbWUpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0JHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCRtZERpYWxvZy5oaWRlKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQkbWREaWFsb2cuY2FuY2VsKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQkc2NvcGUuYW5zd2VyID0gZnVuY3Rpb24oYW5zd2VyKSB7XG5cdFx0XHRcdFx0XHQkbWREaWFsb2cuaGlkZShhbnN3ZXIpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHR9O1xuXG5cblxuXHQkc2NvcGUuc2hhcmVGaWxlID0gZnVuY3Rpb24odm0pe1xuXG5cdFx0dmFyIGVtYWlscz12bS5lbWFpbHM7XG5cdFx0dmFyIGVtYWlsX2FycmF5ID0gZW1haWxzLnNwbGl0KCcsJyk7XG5cdFx0dmFyIGk7XG5cdFx0Zm9yICggaT0wOyBpIDwgZW1haWxfYXJyYXkubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHQvL3ZhbGlkYXRlIGVhY2ggZW1haWwgdG8gc2hhcmUgd2l0aFxuXHRcdFx0U2hhcmUuc2hhcmUodm0pXG5cdFx0XHQudGhlbihmdW5jdGlvbihyZXMpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0fSkuY2F0Y2goKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGVtYWlsX2FycmF5W2ldKTtcblxuXHRcdH1cblx0fVxuXG59XSk7XG4iLCIvKlxuIGFuZ3VsYXItZmlsZS11cGxvYWQgdjIuMi4wXG4gaHR0cHM6Ly9naXRodWIuY29tL25lcnZnaC9hbmd1bGFyLWZpbGUtdXBsb2FkXG4qL1xuXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhbmd1bGFyLWZpbGUtdXBsb2FkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFuZ3VsYXItZmlsZS11cGxvYWRcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIG9wdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG5cblx0dmFyIHNlcnZpY2VGaWxlVXBsb2FkZXIgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG5cblx0dmFyIHNlcnZpY2VGaWxlTGlrZU9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDQpKTtcblxuXHR2YXIgc2VydmljZUZpbGVJdGVtID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oNSkpO1xuXG5cdHZhciBzZXJ2aWNlRmlsZURpcmVjdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKTtcblxuXHR2YXIgc2VydmljZUZpbGVTZWxlY3QgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG5cblx0dmFyIHNlcnZpY2VGaWxlRHJvcCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDgpKTtcblxuXHR2YXIgc2VydmljZUZpbGVPdmVyID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xuXG5cdHZhciBkaXJlY3RpdmVGaWxlU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMTApKTtcblxuXHR2YXIgZGlyZWN0aXZlRmlsZURyb3AgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxMSkpO1xuXG5cdHZhciBkaXJlY3RpdmVGaWxlT3ZlciA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSk7XG5cblx0YW5ndWxhci5tb2R1bGUoQ09ORklHLm5hbWUsIFtdKS52YWx1ZShcImZpbGVVcGxvYWRlck9wdGlvbnNcIiwgb3B0aW9ucykuZmFjdG9yeShcIkZpbGVVcGxvYWRlclwiLCBzZXJ2aWNlRmlsZVVwbG9hZGVyKS5mYWN0b3J5KFwiRmlsZUxpa2VPYmplY3RcIiwgc2VydmljZUZpbGVMaWtlT2JqZWN0KS5mYWN0b3J5KFwiRmlsZUl0ZW1cIiwgc2VydmljZUZpbGVJdGVtKS5mYWN0b3J5KFwiRmlsZURpcmVjdGl2ZVwiLCBzZXJ2aWNlRmlsZURpcmVjdGl2ZSkuZmFjdG9yeShcIkZpbGVTZWxlY3RcIiwgc2VydmljZUZpbGVTZWxlY3QpLmZhY3RvcnkoXCJGaWxlRHJvcFwiLCBzZXJ2aWNlRmlsZURyb3ApLmZhY3RvcnkoXCJGaWxlT3ZlclwiLCBzZXJ2aWNlRmlsZU92ZXIpLmRpcmVjdGl2ZShcIm52RmlsZVNlbGVjdFwiLCBkaXJlY3RpdmVGaWxlU2VsZWN0KS5kaXJlY3RpdmUoXCJudkZpbGVEcm9wXCIsIGRpcmVjdGl2ZUZpbGVEcm9wKS5kaXJlY3RpdmUoXCJudkZpbGVPdmVyXCIsIGRpcmVjdGl2ZUZpbGVPdmVyKS5ydW4oW1wiRmlsZVVwbG9hZGVyXCIsIFwiRmlsZUxpa2VPYmplY3RcIiwgXCJGaWxlSXRlbVwiLCBcIkZpbGVEaXJlY3RpdmVcIiwgXCJGaWxlU2VsZWN0XCIsIFwiRmlsZURyb3BcIiwgXCJGaWxlT3ZlclwiLCBmdW5jdGlvbiAoRmlsZVVwbG9hZGVyLCBGaWxlTGlrZU9iamVjdCwgRmlsZUl0ZW0sIEZpbGVEaXJlY3RpdmUsIEZpbGVTZWxlY3QsIEZpbGVEcm9wLCBGaWxlT3Zlcikge1xuXHQgICAgLy8gb25seSBmb3IgY29tcGF0aWJpbGl0eVxuXHQgICAgRmlsZVVwbG9hZGVyLkZpbGVMaWtlT2JqZWN0ID0gRmlsZUxpa2VPYmplY3Q7XG5cdCAgICBGaWxlVXBsb2FkZXIuRmlsZUl0ZW0gPSBGaWxlSXRlbTtcblx0ICAgIEZpbGVVcGxvYWRlci5GaWxlRGlyZWN0aXZlID0gRmlsZURpcmVjdGl2ZTtcblx0ICAgIEZpbGVVcGxvYWRlci5GaWxlU2VsZWN0ID0gRmlsZVNlbGVjdDtcblx0ICAgIEZpbGVVcGxvYWRlci5GaWxlRHJvcCA9IEZpbGVEcm9wO1xuXHQgICAgRmlsZVVwbG9hZGVyLkZpbGVPdmVyID0gRmlsZU92ZXI7XG5cdH1dKTtcblxuLyoqKi8gfSxcblxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdFx0XCJuYW1lXCI6IFwiYW5ndWxhckZpbGVVcGxvYWRcIlxuXHR9O1xuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgICB1cmw6IFwiL1wiLFxuXHQgICAgYWxpYXM6IFwiZmlsZVwiLFxuXHQgICAgaGVhZGVyczogeydhdXRob3JpemF0aW9uJzogJ0JlYXJlciA4RXVxY01Oa0YyeVA1MERpY3B2OWhMUlJwN1dPU2FiUGxDdTIybGlZJ30sXG5cdCAgICBxdWV1ZTogW10sXG5cdCAgICBwcm9ncmVzczogMCxcblx0ICAgIGF1dG9VcGxvYWQ6IGZhbHNlLFxuXHQgICAgcmVtb3ZlQWZ0ZXJVcGxvYWQ6IGZhbHNlLFxuXHQgICAgbWV0aG9kOiBcIlBPU1RcIixcblx0ICAgIGZpbHRlcnM6IFtdLFxuXHQgICAgZm9ybURhdGE6IFtdLFxuXHQgICAgcXVldWVMaW1pdDogTnVtYmVyLk1BWF9WQUxVRSxcblx0ICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2Vcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIga2V5IGluIHByb3BzKSB7IHZhciBwcm9wID0gcHJvcHNba2V5XTsgcHJvcC5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAocHJvcC52YWx1ZSkgcHJvcC53cml0YWJsZSA9IHRydWU7IH0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgY29weSA9IGFuZ3VsYXIuY29weTtcblx0dmFyIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kO1xuXHR2YXIgZm9yRWFjaCA9IGFuZ3VsYXIuZm9yRWFjaDtcblx0dmFyIGlzT2JqZWN0ID0gYW5ndWxhci5pc09iamVjdDtcblx0dmFyIGlzTnVtYmVyID0gYW5ndWxhci5pc051bWJlcjtcblx0dmFyIGlzRGVmaW5lZCA9IGFuZ3VsYXIuaXNEZWZpbmVkO1xuXHR2YXIgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheTtcblx0dmFyIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQ7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmlsZVVwbG9hZGVyT3B0aW9ucywgJHJvb3RTY29wZSwgJGh0dHAsICR3aW5kb3csIEZpbGVMaWtlT2JqZWN0LCBGaWxlSXRlbSkge1xuXHQgICAgdmFyIEZpbGUgPSAkd2luZG93LkZpbGU7XG5cdCAgICB2YXIgRm9ybURhdGEgPSAkd2luZG93LkZvcm1EYXRhO1xuXG5cdCAgICB2YXIgRmlsZVVwbG9hZGVyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAqIFBVQkxJQ1xuXHQgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRmlsZVVwbG9hZGVyXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuXHQgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuXHQgICAgICAgICAqL1xuXG5cdCAgICAgICAgZnVuY3Rpb24gRmlsZVVwbG9hZGVyKG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGVVcGxvYWRlcik7XG5cblx0ICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gY29weShmaWxlVXBsb2FkZXJPcHRpb25zKTtcblxuXHQgICAgICAgICAgICBleHRlbmQodGhpcywgc2V0dGluZ3MsIG9wdGlvbnMsIHtcblx0ICAgICAgICAgICAgICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIF9uZXh0SW5kZXg6IDAsXG5cdCAgICAgICAgICAgICAgICBfZmFpbEZpbHRlckluZGV4OiAtMSxcblx0ICAgICAgICAgICAgICAgIF9kaXJlY3RpdmVzOiB7IHNlbGVjdDogW10sIGRyb3A6IFtdLCBvdmVyOiBbXSB9XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIC8vIGFkZCBkZWZhdWx0IGZpbHRlcnNcblx0ICAgICAgICAgICAgdGhpcy5maWx0ZXJzLnVuc2hpZnQoeyBuYW1lOiBcInF1ZXVlTGltaXRcIiwgZm46IHRoaXMuX3F1ZXVlTGltaXRGaWx0ZXIgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuZmlsdGVycy51bnNoaWZ0KHsgbmFtZTogXCJmb2xkZXJcIiwgZm46IHRoaXMuX2ZvbGRlckZpbHRlciB9KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZVVwbG9hZGVyLCB7XG5cdCAgICAgICAgICAgIGFkZFRvUXVldWU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQWRkcyBpdGVtcyB0byB0aGUgcXVldWVcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZXxIVE1MSW5wdXRFbGVtZW50fE9iamVjdHxGaWxlTGlzdHxBcnJheTxPYmplY3Q+fSBmaWxlc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj58U3RyaW5nfSBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRvUXVldWUoZmlsZXMsIG9wdGlvbnMsIGZpbHRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLmlzQXJyYXlMaWtlT2JqZWN0KGZpbGVzKSA/IGZpbGVzIDogW2ZpbGVzXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXlPZkZpbHRlcnMgPSB0aGlzLl9nZXRGaWx0ZXJzKGZpbHRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IHRoaXMucXVldWUubGVuZ3RoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhZGRlZEZpbGVJdGVtcyA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoc29tZSAvKntGaWxlfEhUTUxJbnB1dEVsZW1lbnR8T2JqZWN0fSovKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gbmV3IEZpbGVMaWtlT2JqZWN0KHNvbWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNWYWxpZEZpbGUodGVtcCwgYXJyYXlPZkZpbHRlcnMsIG9wdGlvbnMpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUl0ZW0gPSBuZXcgRmlsZUl0ZW0oX3RoaXMsIHNvbWUsIG9wdGlvbnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRGaWxlSXRlbXMucHVzaChmaWxlSXRlbSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5xdWV1ZS5wdXNoKGZpbGVJdGVtKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkFmdGVyQWRkaW5nRmlsZShmaWxlSXRlbSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gYXJyYXlPZkZpbHRlcnNbX3RoaXMuX2ZhaWxGaWx0ZXJJbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25XaGVuQWRkaW5nRmlsZUZhaWxlZCh0ZW1wLCBmaWx0ZXIsIG9wdGlvbnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggIT09IGNvdW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQWZ0ZXJBZGRpbmdBbGwoYWRkZWRGaWxlSXRlbXMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5fZ2V0VG90YWxQcm9ncmVzcygpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9VcGxvYWQpIHRoaXMudXBsb2FkQWxsKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHJlbW92ZUZyb21RdWV1ZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZW1vdmUgaXRlbXMgZnJvbSB0aGUgcXVldWUuIFJlbW92ZSBsYXN0OiBpbmRleCA9IC0xXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfE51bWJlcn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRnJvbVF1ZXVlKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRJbmRleE9mSXRlbSh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnF1ZXVlW2luZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pc1VwbG9hZGluZykgaXRlbS5jYW5jZWwoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fZGVzdHJveSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLl9nZXRUb3RhbFByb2dyZXNzKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGNsZWFyUXVldWU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2xlYXJzIHRoZSBxdWV1ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnF1ZXVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlWzBdLnJlbW92ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gMDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgdXBsb2FkSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBVcGxvYWRzIGEgaXRlbSBmcm9tIHRoZSBxdWV1ZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbXxOdW1iZXJ9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZEl0ZW0odmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldEluZGV4T2ZJdGVtKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMucXVldWVbaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc3BvcnQgPSB0aGlzLmlzSFRNTDUgPyBcIl94aHJUcmFuc3BvcnRcIiA6IFwiX2lmcmFtZVRyYW5zcG9ydFwiO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fcHJlcGFyZVRvVXBsb2FkaW5nKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNVcGxvYWRpbmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIH10aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzW3RyYW5zcG9ydF0oaXRlbSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGNhbmNlbEl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FuY2VscyB1cGxvYWRpbmcgb2YgaXRlbSBmcm9tIHRoZSBxdWV1ZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbXxOdW1iZXJ9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEl0ZW0odmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldEluZGV4T2ZJdGVtKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMucXVldWVbaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gdGhpcy5pc0hUTUw1ID8gXCJfeGhyXCIgOiBcIl9mb3JtXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gJiYgaXRlbS5pc1VwbG9hZGluZykgaXRlbVtwcm9wXS5hYm9ydCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB1cGxvYWRBbGw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVXBsb2FkcyBhbGwgbm90IHVwbG9hZGVkIGl0ZW1zIG9mIHF1ZXVlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZEFsbCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmdldE5vdFVwbG9hZGVkSXRlbXMoKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpdGVtLmlzVXBsb2FkaW5nO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICB9Zm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uX3ByZXBhcmVUb1VwbG9hZGluZygpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW1zWzBdLnVwbG9hZCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBjYW5jZWxBbGw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FuY2VscyBhbGwgdXBsb2Fkc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWxBbGwoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5nZXROb3RVcGxvYWRlZEl0ZW1zKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY2FuY2VsKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGlzRmlsZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGFuIGluc3RhbmNlIG9mIEZpbGVcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWxlKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaXNGaWxlKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgaXNGaWxlTGlrZU9iamVjdDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGFuIGluc3RhbmNlIG9mIEZpbGVMaWtlT2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsZUxpa2VPYmplY3QodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5pc0ZpbGVMaWtlT2JqZWN0KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgaXNBcnJheUxpa2VPYmplY3Q6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiB2YWx1ZSBpcyBhcnJheSBsaWtlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaXNBcnJheUxpa2VPYmplY3QodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBnZXRJbmRleE9mSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgaW5kZXggb2YgaXRlbSBmcm9tIHRoZSBxdWV1ZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJdGVtfE51bWJlcn0gdmFsdWVcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluZGV4T2ZJdGVtKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSA/IHZhbHVlIDogdGhpcy5xdWV1ZS5pbmRleE9mKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZ2V0Tm90VXBsb2FkZWRJdGVtczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIG5vdCB1cGxvYWRlZCBpdGVtc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0FycmF5fVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb3RVcGxvYWRlZEl0ZW1zKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWl0ZW0uaXNVcGxvYWRlZDtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZ2V0UmVhZHlJdGVtczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGl0ZW1zIHJlYWR5IGZvciB1cGxvYWRcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVhZHlJdGVtcygpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaXNSZWFkeSAmJiAhaXRlbS5pc1VwbG9hZGluZztcblx0ICAgICAgICAgICAgICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChpdGVtMSwgaXRlbTIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0xLmluZGV4IC0gaXRlbTIuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGRlc3Ryb3k6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRGVzdHJveXMgaW5zdGFuY2Ugb2YgRmlsZVVwbG9hZGVyXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2godGhpcy5fZGlyZWN0aXZlcywgZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKF90aGlzLl9kaXJlY3RpdmVzW2tleV0sIGZ1bmN0aW9uIChvYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5kZXN0cm95KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkFmdGVyQWRkaW5nQWxsOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWxlSXRlbXNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25BZnRlckFkZGluZ0FsbChmaWxlSXRlbXMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQWZ0ZXJBZGRpbmdGaWxlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBmaWxlSXRlbVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkFmdGVyQWRkaW5nRmlsZShmaWxlSXRlbSkge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25XaGVuQWRkaW5nRmlsZUZhaWxlZDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlfE9iamVjdH0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZpbHRlclxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25XaGVuQWRkaW5nRmlsZUZhaWxlZChpdGVtLCBmaWx0ZXIsIG9wdGlvbnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQmVmb3JlVXBsb2FkSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gZmlsZUl0ZW1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25CZWZvcmVVcGxvYWRJdGVtKGZpbGVJdGVtKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvblByb2dyZXNzSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gZmlsZUl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2dyZXNzSXRlbShmaWxlSXRlbSwgcHJvZ3Jlc3MpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uUHJvZ3Jlc3NBbGw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2dyZXNzQWxsKHByb2dyZXNzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvblN1Y2Nlc3NJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblN1Y2Nlc3NJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uRXJyb3JJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVycm9ySXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkNhbmNlbEl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2FuY2VsSXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkNvbXBsZXRlSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25Db21wbGV0ZUFsbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbXBsZXRlQWxsKCkge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2dldFRvdGFsUHJvZ3Jlc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgKiBQUklWQVRFXG5cdCAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyB0aGUgdG90YWwgcHJvZ3Jlc3Ncblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbdmFsdWVdXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFRvdGFsUHJvZ3Jlc3ModmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVBZnRlclVwbG9hZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgfHwgMDtcblx0ICAgICAgICAgICAgICAgICAgICB9dmFyIG5vdFVwbG9hZGVkID0gdGhpcy5nZXROb3RVcGxvYWRlZEl0ZW1zKCkubGVuZ3RoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB1cGxvYWRlZCA9IG5vdFVwbG9hZGVkID8gdGhpcy5xdWV1ZS5sZW5ndGggLSBub3RVcGxvYWRlZCA6IHRoaXMucXVldWUubGVuZ3RoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByYXRpbyA9IDEwMCAvIHRoaXMucXVldWUubGVuZ3RoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gKHZhbHVlIHx8IDApICogcmF0aW8gLyAxMDA7XG5cblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh1cGxvYWRlZCAqIHJhdGlvICsgY3VycmVudCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9nZXRGaWx0ZXJzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgYXJyYXkgb2YgZmlsdGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj58U3RyaW5nfSBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXk8RnVuY3Rpb24+fVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEZpbHRlcnMoZmlsdGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzO1xuXHQgICAgICAgICAgICAgICAgICAgIH1pZiAoaXNBcnJheShmaWx0ZXJzKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVycztcblx0ICAgICAgICAgICAgICAgICAgICB9dmFyIG5hbWVzID0gZmlsdGVycy5tYXRjaCgvW15cXHMsXSsvZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycy5maWx0ZXIoZnVuY3Rpb24gKGZpbHRlcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXMuaW5kZXhPZihmaWx0ZXIubmFtZSkgIT09IC0xO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfcmVuZGVyOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFVwZGF0ZXMgaHRtbFxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlcigpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2ZvbGRlckZpbHRlcjoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIGl0ZW0gaXMgYSBmaWxlIChub3QgZm9sZGVyKVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlfEZpbGVMaWtlT2JqZWN0fSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb2xkZXJGaWx0ZXIoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIShpdGVtLnNpemUgfHwgaXRlbS50eXBlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3F1ZXVlTGltaXRGaWx0ZXI6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiB0aGUgbGltaXQgaGFzIG5vdCBiZWVuIHJlYWNoZWRcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3F1ZXVlTGltaXRGaWx0ZXIoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIDwgdGhpcy5xdWV1ZUxpbWl0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfaXNWYWxpZEZpbGU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiBmaWxlIHBhc3MgYWxsIGZpbHRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZXxPYmplY3R9IGZpbGVcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXk8RnVuY3Rpb24+fSBmaWx0ZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNWYWxpZEZpbGUoZmlsZSwgZmlsdGVycywgb3B0aW9ucykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYWlsRmlsdGVySW5kZXggPSAtMTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWZpbHRlcnMubGVuZ3RoID8gdHJ1ZSA6IGZpbHRlcnMuZXZlcnkoZnVuY3Rpb24gKGZpbHRlcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZmFpbEZpbHRlckluZGV4Kys7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXIuZm4uY2FsbChfdGhpcywgZmlsZSwgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9pc1N1Y2Nlc3NDb2RlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHVwbG9hZCBzdWNjZXNzZnVsXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1N1Y2Nlc3NDb2RlKHN0YXR1cykge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3RyYW5zZm9ybVJlc3BvbnNlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFRyYW5zZm9ybXMgdGhlIHNlcnZlciByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3RyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlLCBoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnNHZXR0ZXIgPSB0aGlzLl9oZWFkZXJzR2V0dGVyKGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2goJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsIGZ1bmN0aW9uICh0cmFuc2Zvcm1Gbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHRyYW5zZm9ybUZuKHJlc3BvbnNlLCBoZWFkZXJzR2V0dGVyKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9wYXJzZUhlYWRlcnM6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUGFyc2VkIHJlc3BvbnNlIGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuXHQgICAgICAgICAgICAgICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvbWFzdGVyL3NyYy9uZy9odHRwLmpzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0ge30sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgfWZvckVhY2goaGVhZGVycy5zcGxpdChcIlxcblwiKSwgZnVuY3Rpb24gKGxpbmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGxpbmUuaW5kZXhPZihcIjpcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGxpbmUuc2xpY2UoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IGxpbmUuc2xpY2UoaSArIDEpLnRyaW0oKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyBcIiwgXCIgKyB2YWwgOiB2YWw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9oZWFkZXJzR2V0dGVyOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJzZWRIZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGVhZGVyc0dldHRlcihwYXJzZWRIZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkSGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEhlYWRlcnM7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3hoclRyYW5zcG9ydDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBUaGUgWE1MSHR0cFJlcXVlc3QgdHJhbnNwb3J0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfeGhyVHJhbnNwb3J0KGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IGl0ZW0uX3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkJlZm9yZVVwbG9hZEl0ZW0oaXRlbSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKGl0ZW0uZm9ybURhdGEsIGZ1bmN0aW9uIChvYmopIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZChrZXksIHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0uX2ZpbGUuc2l6ZSAhPSBcIm51bWJlclwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZmlsZSBzcGVjaWZpZWQgaXMgbm8gbG9uZ2VyIHZhbGlkXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKGl0ZW0uYWxpYXMsIGl0ZW0uX2ZpbGUsIGl0ZW0uZmlsZS5uYW1lKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLnJvdW5kKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUgPyBldmVudC5sb2FkZWQgKiAxMDAgLyBldmVudC50b3RhbCA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Qcm9ncmVzc0l0ZW0oaXRlbSwgcHJvZ3Jlc3MpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IF90aGlzLl9wYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gX3RoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHhoci5yZXNwb25zZSwgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnaXN0ID0gX3RoaXMuX2lzU3VjY2Vzc0NvZGUoeGhyLnN0YXR1cykgPyBcIlN1Y2Nlc3NcIiA6IFwiRXJyb3JcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IFwiX29uXCIgKyBnaXN0ICsgXCJJdGVtXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzW21ldGhvZF0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBfdGhpcy5fcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IF90aGlzLl90cmFuc2Zvcm1SZXNwb25zZSh4aHIucmVzcG9uc2UsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25FcnJvckl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHhoci5zdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBfdGhpcy5fcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IF90aGlzLl90cmFuc2Zvcm1SZXNwb25zZSh4aHIucmVzcG9uc2UsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25DYW5jZWxJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ29tcGxldGVJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oaXRlbS5tZXRob2QsIGl0ZW0udXJsLCB0cnVlKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBpdGVtLndpdGhDcmVkZW50aWFscztcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2goaXRlbS5oZWFkZXJzLCBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoZm9ybSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9pZnJhbWVUcmFuc3BvcnQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVGhlIElGcmFtZSB0cmFuc3BvcnRcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pZnJhbWVUcmFuc3BvcnQoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IGVsZW1lbnQoXCI8Zm9ybSBzdHlsZT1cXFwiZGlzcGxheTogbm9uZTtcXFwiIC8+XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWUgPSBlbGVtZW50KFwiPGlmcmFtZSBuYW1lPVxcXCJpZnJhbWVUcmFuc3BvcnRcIiArIERhdGUubm93KCkgKyBcIlxcXCI+XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGl0ZW0uX2lucHV0O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uX2Zvcm0pIGl0ZW0uX2Zvcm0ucmVwbGFjZVdpdGgoaW5wdXQpOyAvLyByZW1vdmUgb2xkIGZvcm1cblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9mb3JtID0gZm9ybTsgLy8gc2F2ZSBsaW5rIHRvIG5ldyBmb3JtXG5cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkJlZm9yZVVwbG9hZEl0ZW0oaXRlbSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpbnB1dC5wcm9wKFwibmFtZVwiLCBpdGVtLmFsaWFzKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvckVhY2goaXRlbS5mb3JtRGF0YSwgZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50XyA9IGVsZW1lbnQoXCI8aW5wdXQgdHlwZT1cXFwiaGlkZGVuXFxcIiBuYW1lPVxcXCJcIiArIGtleSArIFwiXFxcIiAvPlwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfLnZhbCh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZChlbGVtZW50Xyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybS5wcm9wKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBpdGVtLnVybCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBpZnJhbWUucHJvcChcIm5hbWVcIiksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuY3R5cGU6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIgLy8gb2xkIElFXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZnJhbWUuYmluZChcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IFwiXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSAyMDA7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCBmb3IgbGVnYWN5IElFIGJyb3dzZXJzIHRoYXQgbG9hZHMgaW50ZXJuYWwgZXJyb3IgcGFnZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBmYWlsZWQgV1MgcmVzcG9uc2UgcmVjZWl2ZWQuIEluIGNvbnNlcXVlbmNlIGlmcmFtZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udGVudCBhY2Nlc3MgZGVuaWVkIGVycm9yIGlzIHRocm93biBiZWNvdXNlIHRyeWluZyB0b1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjZXNzIGNyb3NzIGRvbWFpbiBwYWdlLiBXaGVuIHN1Y2ggdGhpbmcgb2NjdXJzIG5vdGlmeWluZ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBlbXB0eSByZXNwb25zZSBvYmplY3QuIFNlZSBtb3JlIGluZm8gYXQ6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE1MTM2Mi9hY2Nlc3MtaXMtZGVuaWVkLWVycm9yLW9uLWFjY2Vzc2luZy1pZnJhbWUtZG9jdW1lbnQtb2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgaWYgbm9uIHN0YW5kYXJkIDR4eCBvciA1eHggZXJyb3IgY29kZSByZXR1cm5lZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSBXUyB0aGVuIHJlc3BvbnNlIGNvbnRlbnQgY2FuIGJlIGFjY2Vzc2VkIHdpdGhvdXQgZXJyb3Jcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCAnWEhSJyBzdGF0dXMgYmVjb21lcyAyMDAuIEluIG9yZGVyIHRvIGF2b2lkIGNvbmZ1c2lvblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuaW5nIHJlc3BvbnNlIHZpYSBzYW1lICdzdWNjZXNzJyBldmVudCBoYW5kbGVyLlxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXhlZCBhbmd1bGFyLmNvbnRlbnRzKCkgZm9yIGlmcmFtZXNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgPSBpZnJhbWVbMF0uY29udGVudERvY3VtZW50LmJvZHkuaW5uZXJIVE1MO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHdlIHJ1biBpbnRvIHRoZSBhY2Nlc3MtaXMtZGVuaWVkIGVycm9yIG9yIHdlIGhhdmUgYW5vdGhlciBlcnJvciBvbiB0aGUgc2VydmVyIHNpZGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChpbnRlbnRpb25hbCA1MDAsNDAuLi4gZXJyb3JzKSwgd2UgYXQgbGVhc3Qgc2F5ICdzb21ldGhpbmcgd2VudCB3cm9uZycgLT4gNTAwXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSA1MDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0geyByZXNwb25zZTogaHRtbCwgc3RhdHVzOiBzdGF0dXMsIGR1bW15OiB0cnVlIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge307XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IF90aGlzLl90cmFuc2Zvcm1SZXNwb25zZSh4aHIucmVzcG9uc2UsIGhlYWRlcnMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vblN1Y2Nlc3NJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ29tcGxldGVJdGVtKGl0ZW0sIHJlc3BvbnNlLCB4aHIuc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvcm0uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSB7IHN0YXR1czogMCwgZHVtbXk6IHRydWUgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS51bmJpbmQoXCJsb2FkXCIpLnByb3AoXCJzcmNcIiwgXCJqYXZhc2NyaXB0OmZhbHNlO1wiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXBsYWNlV2l0aChpbnB1dCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ2FuY2VsSXRlbShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgeGhyLnN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlucHV0LmFmdGVyKGZvcm0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKGlucHV0KS5hcHBlbmQoaWZyYW1lKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGZvcm1bMF0uc3VibWl0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbldoZW5BZGRpbmdGaWxlRmFpbGVkOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGV8T2JqZWN0fSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZmlsdGVyXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uV2hlbkFkZGluZ0ZpbGVGYWlsZWQoaXRlbSwgZmlsdGVyLCBvcHRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbldoZW5BZGRpbmdGaWxlRmFpbGVkKGl0ZW0sIGZpbHRlciwgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkFmdGVyQWRkaW5nRmlsZToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BZnRlckFkZGluZ0ZpbGUoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25BZnRlckFkZGluZ0ZpbGUoaXRlbSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkFmdGVyQWRkaW5nQWxsOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5PEZpbGVJdGVtPn0gaXRlbXNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQWZ0ZXJBZGRpbmdBbGwoaXRlbXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQWZ0ZXJBZGRpbmdBbGwoaXRlbXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25CZWZvcmVVcGxvYWRJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqICBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQmVmb3JlVXBsb2FkSXRlbShpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5fb25CZWZvcmVVcGxvYWQoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQmVmb3JlVXBsb2FkSXRlbShpdGVtKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uUHJvZ3Jlc3NJdGVtOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGVJdGVtfSBpdGVtXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvZ3Jlc3Ncblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzSXRlbShpdGVtLCBwcm9ncmVzcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbCA9IHRoaXMuX2dldFRvdGFsUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0b3RhbDtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9vblByb2dyZXNzKHByb2dyZXNzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3NJdGVtKGl0ZW0sIHByb2dyZXNzKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3NBbGwodG90YWwpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25TdWNjZXNzSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblN1Y2Nlc3NJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLl9vblN1Y2Nlc3MocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3NJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25FcnJvckl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25FcnJvckl0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX29uRXJyb3IocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9ySXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX29uQ2FuY2VsSXRlbToge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGaWxlSXRlbX0gaXRlbVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNhbmNlbEl0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX29uQ2FuY2VsKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25DYW5jZWxJdGVtKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25Db21wbGV0ZUl0ZW06IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RmlsZUl0ZW19IGl0ZW1cblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Db21wbGV0ZUl0ZW0oaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uX29uQ29tcGxldGUocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlSXRlbShpdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IHRoaXMuZ2V0UmVhZHlJdGVtcygpWzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZmluZWQobmV4dEl0ZW0pKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLnVwbG9hZCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlQWxsKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuX2dldFRvdGFsUHJvZ3Jlc3MoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgICAgaXNGaWxlOiB7XG5cdCAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICogU1RBVElDXG5cdCAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiB2YWx1ZSBhbiBpbnN0YW5jZSBvZiBGaWxlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsZSh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBGaWxlICYmIHZhbHVlIGluc3RhbmNlb2YgRmlsZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgaXNGaWxlTGlrZU9iamVjdDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIFwidHJ1ZVwiIGlmIHZhbHVlIGFuIGluc3RhbmNlIG9mIEZpbGVMaWtlT2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsZUxpa2VPYmplY3QodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBGaWxlTGlrZU9iamVjdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgaXNBcnJheUxpa2VPYmplY3Q6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiB2YWx1ZSBpcyBhcnJheSBsaWtlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpbmhlcml0OiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIEluaGVyaXRzIGEgdGFyZ2V0IChDbGFzc18xKSBieSBhIHNvdXJjZSAoQ2xhc3NfMilcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRhcmdldFxuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc291cmNlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaGVyaXQodGFyZ2V0LCBzb3VyY2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzb3VyY2UucHJvdG90eXBlKTtcblx0ICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gdGFyZ2V0O1xuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zdXBlcl8gPSBzb3VyY2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlVXBsb2FkZXI7XG5cdCAgICB9KSgpO1xuXG5cdCAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICogUFVCTElDXG5cdCAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblx0ICAgIC8qKlxuXHQgICAgICogQ2hlY2tzIGEgc3VwcG9ydCB0aGUgaHRtbDUgdXBsb2FkZXJcblx0ICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgICAgICogQHJlYWRvbmx5XG5cdCAgICAgKi9cblx0ICAgIEZpbGVVcGxvYWRlci5wcm90b3R5cGUuaXNIVE1MNSA9ICEhKEZpbGUgJiYgRm9ybURhdGEpO1xuXHQgICAgLyoqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAqIFNUQVRJQ1xuXHQgICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cdCAgICAvKipcblx0ICAgICAqIEBib3Jyb3dzIEZpbGVVcGxvYWRlci5wcm90b3R5cGUuaXNIVE1MNVxuXHQgICAgICovXG5cdCAgICBGaWxlVXBsb2FkZXIuaXNIVE1MNSA9IEZpbGVVcGxvYWRlci5wcm90b3R5cGUuaXNIVE1MNTtcblxuXHQgICAgcmV0dXJuIEZpbGVVcGxvYWRlcjtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiZmlsZVVwbG9hZGVyT3B0aW9uc1wiLCBcIiRyb290U2NvcGVcIiwgXCIkaHR0cFwiLCBcIiR3aW5kb3dcIiwgXCJGaWxlTGlrZU9iamVjdFwiLCBcIkZpbGVJdGVtXCJdO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdHZhciBjb3B5ID0gYW5ndWxhci5jb3B5O1xuXHR2YXIgaXNFbGVtZW50ID0gYW5ndWxhci5pc0VsZW1lbnQ7XG5cdHZhciBpc1N0cmluZyA9IGFuZ3VsYXIuaXNTdHJpbmc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgRmlsZUxpa2VPYmplY3QgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRmlsZUxpa2VPYmplY3Rcblx0ICAgICAgICAgKiBAcGFyYW0ge0ZpbGV8SFRNTElucHV0RWxlbWVudHxPYmplY3R9IGZpbGVPcklucHV0XG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlTGlrZU9iamVjdChmaWxlT3JJbnB1dCkge1xuXHQgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZUxpa2VPYmplY3QpO1xuXG5cdCAgICAgICAgICAgIHZhciBpc0lucHV0ID0gaXNFbGVtZW50KGZpbGVPcklucHV0KTtcblx0ICAgICAgICAgICAgdmFyIGZha2VQYXRoT3JPYmplY3QgPSBpc0lucHV0ID8gZmlsZU9ySW5wdXQudmFsdWUgOiBmaWxlT3JJbnB1dDtcblx0ICAgICAgICAgICAgdmFyIHBvc3RmaXggPSBpc1N0cmluZyhmYWtlUGF0aE9yT2JqZWN0KSA/IFwiRmFrZVBhdGhcIiA6IFwiT2JqZWN0XCI7XG5cdCAgICAgICAgICAgIHZhciBtZXRob2QgPSBcIl9jcmVhdGVGcm9tXCIgKyBwb3N0Zml4O1xuXHQgICAgICAgICAgICB0aGlzW21ldGhvZF0oZmFrZVBhdGhPck9iamVjdCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgX2NyZWF0ZUNsYXNzKEZpbGVMaWtlT2JqZWN0LCB7XG5cdCAgICAgICAgICAgIF9jcmVhdGVGcm9tRmFrZVBhdGg6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBmaWxlIGxpa2Ugb2JqZWN0IGZyb20gZmFrZSBwYXRoIHN0cmluZ1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVGcm9tRmFrZVBhdGgocGF0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdE1vZGlmaWVkRGF0ZSA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBcImxpa2UvXCIgKyBwYXRoLnNsaWNlKHBhdGgubGFzdEluZGV4T2YoXCIuXCIpICsgMSkudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBwYXRoLnNsaWNlKHBhdGgubGFzdEluZGV4T2YoXCIvXCIpICsgcGF0aC5sYXN0SW5kZXhPZihcIlxcXFxcIikgKyAyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2NyZWF0ZUZyb21PYmplY3Q6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBmaWxlIGxpa2Ugb2JqZWN0IGZyb20gb2JqZWN0XG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ZpbGV8RmlsZUxpa2VPYmplY3R9IG9iamVjdFxuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUZyb21PYmplY3Qob2JqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0TW9kaWZpZWREYXRlID0gY29weShvYmplY3QubGFzdE1vZGlmaWVkRGF0ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplID0gb2JqZWN0LnNpemU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gb2JqZWN0LnR5cGU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gb2JqZWN0Lm5hbWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlTGlrZU9iamVjdDtcblx0ICAgIH0pKCk7XG5cblx0ICAgIHJldHVybiBGaWxlTGlrZU9iamVjdDtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW107XG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGtleSBpbiBwcm9wcykgeyB2YXIgcHJvcCA9IHByb3BzW2tleV07IHByb3AuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKHByb3AudmFsdWUpIHByb3Aud3JpdGFibGUgPSB0cnVlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpOyB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0dmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIGNvcHkgPSBhbmd1bGFyLmNvcHk7XG5cdHZhciBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZDtcblx0dmFyIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQ7XG5cdHZhciBpc0VsZW1lbnQgPSBhbmd1bGFyLmlzRWxlbWVudDtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkY29tcGlsZSwgRmlsZUxpa2VPYmplY3QpIHtcblx0ICAgIHZhciBGaWxlSXRlbSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBGaWxlSXRlbVxuXHQgICAgICAgICAqIEBwYXJhbSB7RmlsZVVwbG9hZGVyfSB1cGxvYWRlclxuXHQgICAgICAgICAqIEBwYXJhbSB7RmlsZXxIVE1MSW5wdXRFbGVtZW50fE9iamVjdH0gc29tZVxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlSXRlbSh1cGxvYWRlciwgc29tZSwgb3B0aW9ucykge1xuXHQgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZUl0ZW0pO1xuXG5cdCAgICAgICAgICAgIHZhciBpc0lucHV0ID0gaXNFbGVtZW50KHNvbWUpO1xuXHQgICAgICAgICAgICB2YXIgaW5wdXQgPSBpc0lucHV0ID8gZWxlbWVudChzb21lKSA6IG51bGw7XG5cdCAgICAgICAgICAgIHZhciBmaWxlID0gIWlzSW5wdXQgPyBzb21lIDogbnVsbDtcblxuXHQgICAgICAgICAgICBleHRlbmQodGhpcywge1xuXHQgICAgICAgICAgICAgICAgdXJsOiB1cGxvYWRlci51cmwsXG5cdCAgICAgICAgICAgICAgICBhbGlhczogdXBsb2FkZXIuYWxpYXMsXG5cdCAgICAgICAgICAgICAgICBoZWFkZXJzOiBjb3B5KHVwbG9hZGVyLmhlYWRlcnMpLFxuXHQgICAgICAgICAgICAgICAgZm9ybURhdGE6IGNvcHkodXBsb2FkZXIuZm9ybURhdGEpLFxuXHQgICAgICAgICAgICAgICAgcmVtb3ZlQWZ0ZXJVcGxvYWQ6IHVwbG9hZGVyLnJlbW92ZUFmdGVyVXBsb2FkLFxuXHQgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB1cGxvYWRlci53aXRoQ3JlZGVudGlhbHMsXG5cdCAgICAgICAgICAgICAgICBtZXRob2Q6IHVwbG9hZGVyLm1ldGhvZFxuXHQgICAgICAgICAgICB9LCBvcHRpb25zLCB7XG5cdCAgICAgICAgICAgICAgICB1cGxvYWRlcjogdXBsb2FkZXIsXG5cdCAgICAgICAgICAgICAgICBmaWxlOiBuZXcgRmlsZUxpa2VPYmplY3Qoc29tZSksXG5cdCAgICAgICAgICAgICAgICBpc1JlYWR5OiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGlzVXBsb2FkZWQ6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGlzQ2FuY2VsOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGlzRXJyb3I6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IDAsXG5cdCAgICAgICAgICAgICAgICBpbmRleDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIF9maWxlOiBmaWxlLFxuXHQgICAgICAgICAgICAgICAgX2lucHV0OiBpbnB1dFxuXHQgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICBpZiAoaW5wdXQpIHRoaXMuX3JlcGxhY2VOb2RlKGlucHV0KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZUl0ZW0sIHtcblx0ICAgICAgICAgICAgdXBsb2FkOiB7XG5cdCAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICogUFVCTElDXG5cdCAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogVXBsb2FkcyBhIEZpbGVJdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLnVwbG9hZEl0ZW0odGhpcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLl9vbkNvbXBsZXRlSXRlbSh0aGlzLCBcIlwiLCAwLCBbXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIuX29uRXJyb3JJdGVtKHRoaXMsIFwiXCIsIDAsIFtdKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGNhbmNlbDoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYW5jZWxzIHVwbG9hZGluZyBvZiBGaWxlSXRlbVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5jYW5jZWxJdGVtKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICByZW1vdmU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmVtb3ZlcyBhIEZpbGVJdGVtXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLnJlbW92ZUZyb21RdWV1ZSh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25CZWZvcmVVcGxvYWQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQmVmb3JlVXBsb2FkKCkge31cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25Qcm9ncmVzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBDYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb2dyZXNzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2dyZXNzKHByb2dyZXNzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvblN1Y2Nlc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3VjY2VzcyhyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkVycm9yOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVycm9yKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQ2FuY2VsOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNhbmNlbChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkNvbXBsZXRlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHt9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkJlZm9yZVVwbG9hZDoge1xuXHQgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAqIFBSSVZBVEVcblx0ICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqL1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBJbm5lciBjYWxsYmFja1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25CZWZvcmVVcGxvYWQoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDYW5jZWwgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQmVmb3JlVXBsb2FkKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vblByb2dyZXNzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvZ3Jlc3Ncblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzKHByb2dyZXNzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyhwcm9ncmVzcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vblN1Y2Nlc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TdWNjZXNzKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1VwbG9hZGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbmNlbCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAxMDA7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3MocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkVycm9yOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uRXJyb3IocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbmNlbCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfb25DYW5jZWw6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSW5uZXIgY2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2Vcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcblx0ICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzXG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DYW5jZWwocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVXBsb2FkZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDYW5jZWwgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25DYW5jZWwocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9vbkNvbXBsZXRlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIElubmVyIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyp9IHJlc3BvbnNlXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ29tcGxldGUocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMub25Db21wbGV0ZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVBZnRlclVwbG9hZCkgdGhpcy5yZW1vdmUoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX2Rlc3Ryb3k6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRGVzdHJveXMgYSBGaWxlSXRlbVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5wdXQpIHRoaXMuX2lucHV0LnJlbW92ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mb3JtKSB0aGlzLl9mb3JtLnJlbW92ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9mb3JtO1xuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pbnB1dDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3ByZXBhcmVUb1VwbG9hZGluZzoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBQcmVwYXJlcyB0byB1cGxvYWRpbmdcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcmVwYXJlVG9VcGxvYWRpbmcoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuaW5kZXggfHwgKyt0aGlzLnVwbG9hZGVyLl9uZXh0SW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3JlcGxhY2VOb2RlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJlcGxhY2VzIGlucHV0IGVsZW1lbnQgb24gaGlzIGNsb25lXG5cdCAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0pRTGl0ZXxqUXVlcnl9IGlucHV0XG5cdCAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVwbGFjZU5vZGUoaW5wdXQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkY29tcGlsZShpbnB1dC5jbG9uZSgpKShpbnB1dC5zY29wZSgpKTtcblx0ICAgICAgICAgICAgICAgICAgICBjbG9uZS5wcm9wKFwidmFsdWVcIiwgbnVsbCk7IC8vIEZGIGZpeFxuXHQgICAgICAgICAgICAgICAgICAgIGlucHV0LmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlucHV0LmFmdGVyKGNsb25lKTsgLy8gcmVtb3ZlIGpxdWVyeSBkZXBlbmRlbmN5XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlSXRlbTtcblx0ICAgIH0pKCk7XG5cblx0ICAgIHJldHVybiBGaWxlSXRlbTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiJGNvbXBpbGVcIiwgXCJGaWxlTGlrZU9iamVjdFwiXTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIga2V5IGluIHByb3BzKSB7IHZhciBwcm9wID0gcHJvcHNba2V5XTsgcHJvcC5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAocHJvcC52YWx1ZSkgcHJvcC53cml0YWJsZSA9IHRydWU7IH0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHR2YXIgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQ7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgRmlsZURpcmVjdGl2ZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBpbnN0YW5jZSBvZiB7RmlsZURpcmVjdGl2ZX0gb2JqZWN0XG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy51cGxvYWRlclxuXHQgICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9wdGlvbnMuZWxlbWVudFxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmV2ZW50c1xuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnByb3Bcblx0ICAgICAgICAgKiBAY29uc3RydWN0b3Jcblx0ICAgICAgICAgKi9cblxuXHQgICAgICAgIGZ1bmN0aW9uIEZpbGVEaXJlY3RpdmUob3B0aW9ucykge1xuXHQgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgICAgICAgICAgZXh0ZW5kKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLl9kaXJlY3RpdmVzW3RoaXMucHJvcF0ucHVzaCh0aGlzKTtcblx0ICAgICAgICAgICAgdGhpcy5fc2F2ZUxpbmtzKCk7XG5cdCAgICAgICAgICAgIHRoaXMuYmluZCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhGaWxlRGlyZWN0aXZlLCB7XG5cdCAgICAgICAgICAgIGJpbmQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQmluZHMgZXZlbnRzIGhhbmRsZXNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmluZCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5ldmVudHMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSB0aGlzLmV2ZW50c1trZXldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYmluZChrZXksIHRoaXNbcHJvcF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgdW5iaW5kOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFVuYmluZHMgZXZlbnRzIGhhbmRsZXNcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmV2ZW50cykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudW5iaW5kKGtleSwgdGhpcy5ldmVudHNba2V5XSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBkZXN0cm95OiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIERlc3Ryb3lzIGRpcmVjdGl2ZVxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXNbdGhpcy5wcm9wXS5pbmRleE9mKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXNbdGhpcy5wcm9wXS5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgX3NhdmVMaW5rczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBTYXZlcyBsaW5rcyB0byBmdW5jdGlvbnNcblx0ICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlTGlua3MoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZXZlbnRzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gdGhpcy5ldmVudHNba2V5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wXSA9IHRoaXNbcHJvcF0uYmluZCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlRGlyZWN0aXZlO1xuXHQgICAgfSkoKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNYXAgb2YgZXZlbnRzXG5cdCAgICAgKiBAdHlwZSB7T2JqZWN0fVxuXHQgICAgICovXG5cdCAgICBGaWxlRGlyZWN0aXZlLnByb3RvdHlwZS5ldmVudHMgPSB7fTtcblxuXHQgICAgcmV0dXJuIEZpbGVEaXJlY3RpdmU7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMuJGluamVjdCA9IFtdO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYyAmJiBkZXNjLndyaXRhYmxlKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuXHR2YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cblx0dmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEZpbGVEaXJlY3RpdmUpIHtcblx0ICAgIHZhciBGaWxlU2VsZWN0ID0gKGZ1bmN0aW9uIChfRmlsZURpcmVjdGl2ZSkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgaW5zdGFuY2Ugb2Yge0ZpbGVTZWxlY3R9IG9iamVjdFxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlU2VsZWN0KG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbGVTZWxlY3QpO1xuXG5cdCAgICAgICAgICAgIHZhciBleHRlbmRlZE9wdGlvbnMgPSBleHRlbmQob3B0aW9ucywge1xuXHQgICAgICAgICAgICAgICAgLy8gTWFwIG9mIGV2ZW50c1xuXHQgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgJGRlc3Ryb3k6IFwiZGVzdHJveVwiLFxuXHQgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogXCJvbkNoYW5nZVwiXG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgLy8gTmFtZSBvZiBwcm9wZXJ0eSBpbnNpZGUgdXBsb2FkZXIuX2RpcmVjdGl2ZSBvYmplY3Rcblx0ICAgICAgICAgICAgICAgIHByb3A6IFwic2VsZWN0XCJcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmlsZVNlbGVjdC5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcywgZXh0ZW5kZWRPcHRpb25zKTtcblxuXHQgICAgICAgICAgICBpZiAoIXRoaXMudXBsb2FkZXIuaXNIVE1MNSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJtdWx0aXBsZVwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmVsZW1lbnQucHJvcChcInZhbHVlXCIsIG51bGwpOyAvLyBGRiBmaXhcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfaW5oZXJpdHMoRmlsZVNlbGVjdCwgX0ZpbGVEaXJlY3RpdmUpO1xuXG5cdCAgICAgICAgX2NyZWF0ZUNsYXNzKEZpbGVTZWxlY3QsIHtcblx0ICAgICAgICAgICAgZ2V0T3B0aW9uczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIG9wdGlvbnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBnZXRGaWx0ZXJzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgZmlsdGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybiB7QXJyYXk8RnVuY3Rpb24+fFN0cmluZ3x1bmRlZmluZWR9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlcnMoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpc0VtcHR5QWZ0ZXJTZWxlY3Rpb246IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSWYgcmV0dXJucyBcInRydWVcIiB0aGVuIEhUTUxJbnB1dEVsZW1lbnQgd2lsbCBiZSBjbGVhcmVkXG5cdCAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNFbXB0eUFmdGVyU2VsZWN0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuZWxlbWVudC5hdHRyKFwibXVsdGlwbGVcIik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIG9uQ2hhbmdlOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXJcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVzID0gdGhpcy51cGxvYWRlci5pc0hUTUw1ID8gdGhpcy5lbGVtZW50WzBdLmZpbGVzIDogdGhpcy5lbGVtZW50WzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSB0aGlzLmdldEZpbHRlcnMoKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy51cGxvYWRlci5pc0hUTUw1KSB0aGlzLmRlc3Ryb3koKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmFkZFRvUXVldWUoZmlsZXMsIG9wdGlvbnMsIGZpbHRlcnMpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHlBZnRlclNlbGVjdGlvbigpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5wcm9wKFwidmFsdWVcIiwgbnVsbCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZXBsYWNlV2l0aCh0aGlzLmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuY2xvbmUodHJ1ZSkpOyAvLyBJRSBmaXhcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlU2VsZWN0O1xuXHQgICAgfSkoRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgIHJldHVybiBGaWxlU2VsZWN0O1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCJGaWxlRGlyZWN0aXZlXCJdO1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsgdmFyIHByb3AgPSBwcm9wc1trZXldOyBwcm9wLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChwcm9wLnZhbHVlKSBwcm9wLndyaXRhYmxlID0gdHJ1ZTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKTsgfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYyAmJiBkZXNjLndyaXRhYmxlKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuXHR2YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cblx0dmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0dmFyIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kO1xuXHR2YXIgZm9yRWFjaCA9IGFuZ3VsYXIuZm9yRWFjaDtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChGaWxlRGlyZWN0aXZlKSB7XG5cdCAgICB2YXIgRmlsZURyb3AgPSAoZnVuY3Rpb24gKF9GaWxlRGlyZWN0aXZlKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBpbnN0YW5jZSBvZiB7RmlsZURyb3B9IG9iamVjdFxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlRHJvcChvcHRpb25zKSB7XG5cdCAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlRHJvcCk7XG5cblx0ICAgICAgICAgICAgdmFyIGV4dGVuZGVkT3B0aW9ucyA9IGV4dGVuZChvcHRpb25zLCB7XG5cdCAgICAgICAgICAgICAgICAvLyBNYXAgb2YgZXZlbnRzXG5cdCAgICAgICAgICAgICAgICBldmVudHM6IHtcblx0ICAgICAgICAgICAgICAgICAgICAkZGVzdHJveTogXCJkZXN0cm95XCIsXG5cdCAgICAgICAgICAgICAgICAgICAgZHJvcDogXCJvbkRyb3BcIixcblx0ICAgICAgICAgICAgICAgICAgICBkcmFnb3ZlcjogXCJvbkRyYWdPdmVyXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ2xlYXZlOiBcIm9uRHJhZ0xlYXZlXCJcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHByb3BlcnR5IGluc2lkZSB1cGxvYWRlci5fZGlyZWN0aXZlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgcHJvcDogXCJkcm9wXCJcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmlsZURyb3AucHJvdG90eXBlKSwgXCJjb25zdHJ1Y3RvclwiLCB0aGlzKS5jYWxsKHRoaXMsIGV4dGVuZGVkT3B0aW9ucyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgX2luaGVyaXRzKEZpbGVEcm9wLCBfRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZURyb3AsIHtcblx0ICAgICAgICAgICAgZ2V0T3B0aW9uczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIG9wdGlvbnNcblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdHx1bmRlZmluZWR9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBnZXRGaWx0ZXJzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIFJldHVybnMgZmlsdGVyc1xuXHQgICAgICAgICAgICAgICAgICogQHJldHVybiB7QXJyYXk8RnVuY3Rpb24+fFN0cmluZ3x1bmRlZmluZWR9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlcnMoKSB7fVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBvbkRyb3A6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlclxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkRyb3AoZXZlbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmZXIgPSB0aGlzLl9nZXRUcmFuc2ZlcihldmVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zlcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgfXZhciBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSB0aGlzLmdldEZpbHRlcnMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2ZW50QW5kU3RvcChldmVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaCh0aGlzLnVwbG9hZGVyLl9kaXJlY3RpdmVzLm92ZXIsIHRoaXMuX3JlbW92ZU92ZXJDbGFzcywgdGhpcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5hZGRUb1F1ZXVlKHRyYW5zZmVyLmZpbGVzLCBvcHRpb25zLCBmaWx0ZXJzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25EcmFnT3Zlcjoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVyXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRHJhZ092ZXIoZXZlbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmZXIgPSB0aGlzLl9nZXRUcmFuc2ZlcihldmVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9oYXZlRmlsZXModHJhbnNmZXIudHlwZXMpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICB9dHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwiY29weVwiO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRBbmRTdG9wKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3JFYWNoKHRoaXMudXBsb2FkZXIuX2RpcmVjdGl2ZXMub3ZlciwgdGhpcy5fYWRkT3ZlckNsYXNzLCB0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgb25EcmFnTGVhdmU6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlclxuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkRyYWdMZWF2ZShldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSB0aGlzLmVsZW1lbnRbMF0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIH10aGlzLl9wcmV2ZW50QW5kU3RvcChldmVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yRWFjaCh0aGlzLnVwbG9hZGVyLl9kaXJlY3RpdmVzLm92ZXIsIHRoaXMuX3JlbW92ZU92ZXJDbGFzcywgdGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9nZXRUcmFuc2Zlcjoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBIZWxwZXJcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFRyYW5zZmVyKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmRhdGFUcmFuc2ZlciA/IGV2ZW50LmRhdGFUcmFuc2ZlciA6IGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyOyAvLyBqUXVlcnkgZml4O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfcHJldmVudEFuZFN0b3A6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogSGVscGVyXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcmV2ZW50QW5kU3RvcChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9oYXZlRmlsZXM6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmV0dXJucyBcInRydWVcIiBpZiB0eXBlcyBjb250YWlucyBmaWxlc1xuXHQgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYXZlRmlsZXModHlwZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXR5cGVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9aWYgKHR5cGVzLmluZGV4T2YpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzLmluZGV4T2YoXCJGaWxlc1wiKSAhPT0gLTE7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlcy5jb250YWlucykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZXMuY29udGFpbnMoXCJGaWxlc1wiKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBfYWRkT3ZlckNsYXNzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIENhbGxiYWNrXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRPdmVyQ2xhc3MoaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRkT3ZlckNsYXNzKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9yZW1vdmVPdmVyQ2xhc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogQ2FsbGJhY2tcblx0ICAgICAgICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZU92ZXJDbGFzcyhpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVPdmVyQ2xhc3MoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEZpbGVEcm9wO1xuXHQgICAgfSkoRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgIHJldHVybiBGaWxlRHJvcDtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiRmlsZURpcmVjdGl2ZVwiXTtcblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIga2V5IGluIHByb3BzKSB7IHZhciBwcm9wID0gcHJvcHNba2V5XTsgcHJvcC5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAocHJvcC52YWx1ZSkgcHJvcC53cml0YWJsZSA9IHRydWU7IH0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MgJiYgZGVzYy53cml0YWJsZSkgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cblx0dmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9O1xuXG5cdHZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdHZhciBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZDtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChGaWxlRGlyZWN0aXZlKSB7XG5cdCAgICB2YXIgRmlsZU92ZXIgPSAoZnVuY3Rpb24gKF9GaWxlRGlyZWN0aXZlKSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBpbnN0YW5jZSBvZiB7RmlsZURyb3B9IG9iamVjdFxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgICAgICogQGNvbnN0cnVjdG9yXG5cdCAgICAgICAgICovXG5cblx0ICAgICAgICBmdW5jdGlvbiBGaWxlT3ZlcihvcHRpb25zKSB7XG5cdCAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlT3Zlcik7XG5cblx0ICAgICAgICAgICAgdmFyIGV4dGVuZGVkT3B0aW9ucyA9IGV4dGVuZChvcHRpb25zLCB7XG5cdCAgICAgICAgICAgICAgICAvLyBNYXAgb2YgZXZlbnRzXG5cdCAgICAgICAgICAgICAgICBldmVudHM6IHtcblx0ICAgICAgICAgICAgICAgICAgICAkZGVzdHJveTogXCJkZXN0cm95XCJcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHByb3BlcnR5IGluc2lkZSB1cGxvYWRlci5fZGlyZWN0aXZlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgcHJvcDogXCJvdmVyXCIsXG5cdCAgICAgICAgICAgICAgICAvLyBPdmVyIGNsYXNzXG5cdCAgICAgICAgICAgICAgICBvdmVyQ2xhc3M6IFwibnYtZmlsZS1vdmVyXCJcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmlsZU92ZXIucHJvdG90eXBlKSwgXCJjb25zdHJ1Y3RvclwiLCB0aGlzKS5jYWxsKHRoaXMsIGV4dGVuZGVkT3B0aW9ucyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgX2luaGVyaXRzKEZpbGVPdmVyLCBfRmlsZURpcmVjdGl2ZSk7XG5cblx0ICAgICAgICBfY3JlYXRlQ2xhc3MoRmlsZU92ZXIsIHtcblx0ICAgICAgICAgICAgYWRkT3ZlckNsYXNzOiB7XG5cdCAgICAgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICAgICAqIEFkZHMgb3ZlciBjbGFzc1xuXHQgICAgICAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRPdmVyQ2xhc3MoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZENsYXNzKHRoaXMuZ2V0T3ZlckNsYXNzKCkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICByZW1vdmVPdmVyQ2xhc3M6IHtcblx0ICAgICAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgICAgICogUmVtb3ZlcyBvdmVyIGNsYXNzXG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU92ZXJDbGFzcygpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5nZXRPdmVyQ2xhc3MoKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGdldE92ZXJDbGFzczoge1xuXHQgICAgICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIG92ZXIgY2xhc3Ncblx0ICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG5cdCAgICAgICAgICAgICAgICAgKi9cblxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE92ZXJDbGFzcygpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vdmVyQ2xhc3M7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiBGaWxlT3Zlcjtcblx0ICAgIH0pKEZpbGVEaXJlY3RpdmUpO1xuXG5cdCAgICByZXR1cm4gRmlsZU92ZXI7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMuJGluamVjdCA9IFtcIkZpbGVEaXJlY3RpdmVcIl07XG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cblx0dmFyIENPTkZJRyA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkcGFyc2UsIEZpbGVVcGxvYWRlciwgRmlsZVNlbGVjdCkge1xuXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuXHQgICAgICAgICAgICB2YXIgdXBsb2FkZXIgPSBzY29wZS4kZXZhbChhdHRyaWJ1dGVzLnVwbG9hZGVyKTtcblxuXHQgICAgICAgICAgICBpZiAoISh1cGxvYWRlciBpbnN0YW5jZW9mIEZpbGVVcGxvYWRlcikpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiVXBsb2FkZXJcXFwiIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgRmlsZVVwbG9hZGVyXCIpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdmFyIG9iamVjdCA9IG5ldyBGaWxlU2VsZWN0KHtcblx0ICAgICAgICAgICAgICAgIHVwbG9hZGVyOiB1cGxvYWRlcixcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgb2JqZWN0LmdldE9wdGlvbnMgPSAkcGFyc2UoYXR0cmlidXRlcy5vcHRpb25zKS5iaW5kKG9iamVjdCwgc2NvcGUpO1xuXHQgICAgICAgICAgICBvYmplY3QuZ2V0RmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzLmZpbHRlcnM7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy4kaW5qZWN0ID0gW1wiJHBhcnNlXCIsIFwiRmlsZVVwbG9hZGVyXCIsIFwiRmlsZVNlbGVjdFwiXTtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxuXHR2YXIgQ09ORklHID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCRwYXJzZSwgRmlsZVVwbG9hZGVyLCBGaWxlRHJvcCkge1xuXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuXHQgICAgICAgICAgICB2YXIgdXBsb2FkZXIgPSBzY29wZS4kZXZhbChhdHRyaWJ1dGVzLnVwbG9hZGVyKTtcblxuXHQgICAgICAgICAgICBpZiAoISh1cGxvYWRlciBpbnN0YW5jZW9mIEZpbGVVcGxvYWRlcikpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiVXBsb2FkZXJcXFwiIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgRmlsZVVwbG9hZGVyXCIpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKCF1cGxvYWRlci5pc0hUTUw1KSByZXR1cm47XG5cblx0ICAgICAgICAgICAgdmFyIG9iamVjdCA9IG5ldyBGaWxlRHJvcCh7XG5cdCAgICAgICAgICAgICAgICB1cGxvYWRlcjogdXBsb2FkZXIsXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIG9iamVjdC5nZXRPcHRpb25zID0gJHBhcnNlKGF0dHJpYnV0ZXMub3B0aW9ucykuYmluZChvYmplY3QsIHNjb3BlKTtcblx0ICAgICAgICAgICAgb2JqZWN0LmdldEZpbHRlcnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcy5maWx0ZXJzO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMuJGluamVjdCA9IFtcIiRwYXJzZVwiLCBcIkZpbGVVcGxvYWRlclwiLCBcIkZpbGVEcm9wXCJdO1xuXG4vKioqLyB9LFxuLyogMTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXG5cdHZhciBDT05GSUcgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxKSk7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoRmlsZVVwbG9hZGVyLCBGaWxlT3Zlcikge1xuXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuXHQgICAgICAgICAgICB2YXIgdXBsb2FkZXIgPSBzY29wZS4kZXZhbChhdHRyaWJ1dGVzLnVwbG9hZGVyKTtcblxuXHQgICAgICAgICAgICBpZiAoISh1cGxvYWRlciBpbnN0YW5jZW9mIEZpbGVVcGxvYWRlcikpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXFwiVXBsb2FkZXJcXFwiIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgRmlsZVVwbG9hZGVyXCIpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdmFyIG9iamVjdCA9IG5ldyBGaWxlT3Zlcih7XG5cdCAgICAgICAgICAgICAgICB1cGxvYWRlcjogdXBsb2FkZXIsXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIG9iamVjdC5nZXRPdmVyQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcy5vdmVyQ2xhc3MgfHwgb2JqZWN0Lm92ZXJDbGFzcztcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLiRpbmplY3QgPSBbXCJGaWxlVXBsb2FkZXJcIiwgXCJGaWxlT3ZlclwiXTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1maWxlLXVwbG9hZC5qcy5tYXBcblxuLy8gLS1BdXRob3IgTXVyYWdpamltYW5hIFJpY2hhcmQgPGJlYXN0YXI0NTdAZ21haWwuY29tPlxuLy8gdmFyIHN5bmMgPSBhbmd1bGFyLm1vZHVsZShcInN5bmNcIiwgW1wibmdSb3V0ZVwiLFwiYW5ndWxhckZpbGVVcGxvYWRcIixcImlvbmljXCIsXCJuZ1Jlc291cmNlXCIsXCJ1aS5ib290c3RyYXBcIixcImluZmluaXRlLXNjcm9sbFwiXSk7XG4vLyBtb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdhcHBDb25maWcnLCB7XG5cbmFuZ3VsYXIubW9kdWxlKCdBdXRoTWFuYWdlcicsW10pLnNlcnZpY2UoJ1Nlc3Npb25TZXJ2aWNlJywgW2Z1bmN0aW9uKCl7XG4gICAgdmFyIHVzZXJJc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuc2V0VXNlckF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHVzZXJJc0F1dGhlbnRpY2F0ZWQgPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRVc2VyQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB1c2VySXNBdXRoZW50aWNhdGVkO1xuICAgIH07XG59XSk7XG5cbnZhciBzeW5jID0gYW5ndWxhci5tb2R1bGUoXCJzeW5jXCIsIFtcIm5nUm91dGVcIixcImFuZ3VsYXJGaWxlVXBsb2FkXCIsXCJ1aS5ib290c3RyYXBcIixcInVpLnJvdXRlclwiLFwiaW5maW5pdGUtc2Nyb2xsXCIsJ25nTWF0ZXJpYWwnLCAnbmdNZXNzYWdlcycsICdtYXRlcmlhbC5zdmdBc3NldHNDYWNoZScsJ25nLW1mYicsJ3BkZicsJ25nQ29udGV4dE1lbnUnLCdhbmd1bGFyLWxvYWRpbmctYmFyJywnbmdGaWxlU2F2ZXInLCdBdXRoTWFuYWdlcicsJ25nRGlhbG9nJ10pO1xuXG5cbnZhciBMb2dnZXI9YW5ndWxhci5tb2R1bGUoXCJMb2dnZXJcIixbXSk7XG5Mb2dnZXIucnVuKFsnJHJvb3RTY29wZScsZnVuY3Rpb24oJHJvb3RTY29wZSl7XG5cbiAgICAgIC8vICRyb290U2NvcGUuZW5kUG9pbnQ9J2h0dHBzOi8vc3RyZWFtdXBib3guY29tJztcbiAgICAgICRyb290U2NvcGUuZW5kUG9pbnQ9J2h0dHA6Ly9zeW5jbWUuY29tOjgwMDAnO1xufV0pO1xud2luZG93LnJvdXRlcyA9XG57XG4gICAgXCIvRmlsZXNcIjoge1xuICAgICAgICB1cmw6IFwiL0ZpbGVzXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZmlsZXMuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdGaWxlc0NvbnRyb2xsZXInLFxuICAgICAgICByZXF1aXJlTG9naW46IHRydWVcbiAgICAgIH0sXG4gICAgICBcInByZXZpZXdcIjp7XG4gICAgICAgIHVybDogJy8hLzpwcmV2aWV3LzpleHRlbnNpb24vOm9mLzp1c2VyJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9maWxlUHJldmlldy5odG1sJyxcbiAgICAgICAgY29udHJvbGxlciA6ICdwcmV2aWV3Q29udHJvbGxlcidcbiAgICAgIH0sXG5cbiAgICAgIFwiL0dyb3Vwc1wiOiB7XG4gICAgICAgICAgdXJsOiBcIi9Hcm91cHNcIixcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2dyb3Vwcy5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnR3JvdXBDb250cm9sbGVyJyxcbiAgICAgICAgICByZXF1aXJlTG9naW46IHRydWVcbiAgICAgIH1cbn07XG5cblxuc3luYy5ydW4oWyckcm9vdFNjb3BlJywnJGxvZycsZnVuY3Rpb24oJHJvb3RTY29wZSwkbG9nKXtcbiAgJHJvb3RTY29wZS5lbmRQb2ludD0naHR0cDovL3N5bmNtZS5jb206ODAwMCc7XG4gICAvLyAkcm9vdFNjb3BlLmVuZFBvaW50PSdodHRwczovL3N0cmVhbXVwYm94LmNvbSc7XG5cblxuICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLGZ1bmN0aW9uKGV2ZW50LCBuZXh0LCBjdXJyZW50KXtcbiAgICBmb3IodmFyIGkgaW4gd2luZG93LnJvdXRlcykge1xuXG4gICAgICAgIGlmKG5leHQuaW5kZXhPZihpKSAhPSAtMSkge1xuICAgICAgICAgICAgaWYod2luZG93LnJvdXRlc1tpXS5yZXF1aXJlTG9naW4gJiYgIVNlc3Npb25TZXJ2aWNlLmdldFVzZXJBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIllvdSBuZWVkIHRvIGJlIGF1dGhlbnRpY2F0ZWQgdG8gc2VlIHRoaXMgcGFnZSFcIik7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuICB9KTtcbn1dKTtcbnN5bmMucHJvdmlkZXIoe1xuXG4gICAgJGV4Y2VwdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGV4Y2VwdGlvbik7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgICAgICB9O1xuICAgIH1cbn0pO1xuc3luYy5jb25maWcoWyckc2NlUHJvdmlkZXInLCckaHR0cFByb3ZpZGVyJywnJG1kVGhlbWluZ1Byb3ZpZGVyJywnY2ZwTG9hZGluZ0JhclByb3ZpZGVyJyxmdW5jdGlvbigkc2NlUHJvdmlkZXIsJGh0dHBQcm92aWRlciwkbWRUaGVtaW5nUHJvdmlkZXIsY2ZwTG9hZGluZ0JhclByb3ZpZGVyKSB7XG4gICAgZGVsZXRlICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXTtcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0JztcbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0JztcbiAgICAvL3NldCBhdXRob3JpemF0aW9uIGZvciBvYXV0aDIuMCBmb3IgcHJvdGVjdGlvblxuXG5cbiAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydhdXRob3JpemF0aW9uJ10gPSAnQmVhcmVyIDhFdXFjTU5rRjJ5UDUwRGljcHY5aExSUnA3V09TYWJQbEN1MjJsaVknO1xuXG4gICAgLy8gJGh0dHBQcm92aWRlci5kZWZhdWx0cy51c2VYRG9tYWluID0gdHJ1ZTtcbiAgICAkc2NlUHJvdmlkZXIuZW5hYmxlZChmYWxzZSk7XG5cbiAgICBjZnBMb2FkaW5nQmFyUHJvdmlkZXIuaW5jbHVkZUJhciA9IGZhbHNlO1xufV0pO1xuc3luYy5jb25maWcoWyckc3RhdGVQcm92aWRlcicsJyR1cmxSb3V0ZXJQcm92aWRlcicsZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwkc2NvcGUpe1xuICAgICAgICAvLyAkcGFyc2VQcm92aWRlci51bndyYXBQcm9taXNlcyh0cnVlKSA7XG4gICAgICAgICAgZm9yKHZhciBwYXRoIGluIHdpbmRvdy5yb3V0ZXMpIHtcblxuICAgICAgICAgICAgICAvLyBpZihuZXh0LmluZGV4T2YocGF0aCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gICAgIGlmKHdpbmRvdy5yb3V0ZXNbcGF0aF0ucmVxdWlyZUxvZ2luICYmICFTZXNzaW9uU2VydmljZS5nZXRVc2VyQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgICAgIC8vICAgICAgICAgYWxlcnQoXCJZb3UgbmVlZCB0byBiZSBhdXRoZW50aWNhdGVkIHRvIHNlZSB0aGlzIHBhZ2UhXCIpO1xuICAgICAgICAgICAgICAvLyAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUocGF0aCwgd2luZG93LnJvdXRlc1twYXRoXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL0ZpbGVzJyk7XG5cbn1dKTtcblxuLy8gfSk7XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tZG9uZSB3aXRoIE11cmFnaWppbWFuYSBSaWNoYXJkIDxiZWFzdGFyNDU3QGdtYWlsLmNvbT4tLS0tLS0tLS0tLS0tLS0vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWRlYWwgd2l0aCB1c2VyJ3MgYWN0aW9ucyBhbmQgaW50ZXJhY3Rpb24gd2l0aCBvdGhlciB1c2Vycy0tLS0tLS0tLS0tLS0tLS8vXG5cbjsoZnVuY3Rpb24od2luZG93LCBhbmd1bGFyLCB1bmRlZmluZWQpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1mYiA9IGFuZ3VsYXIubW9kdWxlKCduZy1tZmInLCBbXSk7XG5cbiAgbWZiLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAkdGVtcGxhdGVDYWNoZS5wdXQoJ25nLW1mYi1tZW51LWRlZmF1bHQudHBsLmh0bWwnLFxuICAgICAgJzx1bCBjbGFzcz1cIm1mYi1jb21wb25lbnQtLXt7cG9zaXRpb259fSBtZmIte3tlZmZlY3R9fVwiJyArXG4gICAgICAnICAgIGRhdGEtbWZiLXRvZ2dsZT1cInt7dG9nZ2xpbmdNZXRob2R9fVwiIGRhdGEtbWZiLXN0YXRlPVwie3ttZW51U3RhdGV9fVwiPicgK1xuICAgICAgJyAgPGxpIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fd3JhcFwiPicgK1xuICAgICAgJyAgICA8YSBuZy1jbGljaz1cImNsaWNrZWQoKVwiIG5nLW1vdXNlZW50ZXI9XCJob3ZlcmVkKClcIiBuZy1tb3VzZWxlYXZlPVwiaG92ZXJlZCgpXCInICtcbiAgICAgICcgICAgICAgbmctYXR0ci1kYXRhLW1mYi1sYWJlbD1cInt7bGFiZWx9fVwiIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fYnV0dG9uLS1tYWluXCI+JyArXG4gICAgICAnICAgICA8aSBjbGFzcz1cIm1mYi1jb21wb25lbnRfX21haW4taWNvbi0tcmVzdGluZyB7e3Jlc3Rpbmd9fVwiPjwvaT4nICtcbiAgICAgICcgICAgIDxpIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fbWFpbi1pY29uLS1hY3RpdmUge3thY3RpdmV9fVwiPjwvaT4nICtcbiAgICAgICcgICAgPC9hPicgK1xuICAgICAgJyAgICA8dWwgY2xhc3M9XCJtZmItY29tcG9uZW50X19saXN0XCIgbmctdHJhbnNjbHVkZT4nICtcbiAgICAgICcgICAgPC91bD4nICtcbiAgICAgICc8L2xpPicgK1xuICAgICAgJzwvdWw+J1xuICAgICk7XG5cbiAgICAkdGVtcGxhdGVDYWNoZS5wdXQoJ25nLW1mYi1tZW51LW1kLnRwbC5odG1sJyxcbiAgICAgICc8dWwgY2xhc3M9XCJtZmItY29tcG9uZW50LS17e3Bvc2l0aW9ufX0gbWZiLXt7ZWZmZWN0fX1cIicgK1xuICAgICAgJyAgICBkYXRhLW1mYi10b2dnbGU9XCJ7e3RvZ2dsaW5nTWV0aG9kfX1cIiBkYXRhLW1mYi1zdGF0ZT1cInt7bWVudVN0YXRlfX1cIj4nICtcbiAgICAgICcgIDxsaSBjbGFzcz1cIm1mYi1jb21wb25lbnRfX3dyYXBcIj4nICtcbiAgICAgICcgICAgPGEgbmctY2xpY2s9XCJjbGlja2VkKClcIiBuZy1tb3VzZWVudGVyPVwiaG92ZXJlZCgpXCIgbmctbW91c2VsZWF2ZT1cImhvdmVyZWQoKVwiJyArXG4gICAgICAnICAgICAgIHN0eWxlPVwiYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IGJveC1zaGFkb3c6IG5vbmU7XCInICtcbiAgICAgICcgICAgICAgbmctYXR0ci1kYXRhLW1mYi1sYWJlbD1cInt7bGFiZWx9fVwiIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fYnV0dG9uLS1tYWluXCI+JyArXG4gICAgICAnICAgICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtZmFiIG1kLWFjY2VudFwiIGFyaWEtbGFiZWw9e3tsYWJlbH19IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7IG1hcmdpbjogMDsgcGFkZGluZzowO1wiPicgK1xuICAgICAgJyAgICAgICA8bWQtaWNvbiBzdHlsZT1cImxlZnQ6IDA7IHBvc2l0aW9uOiByZWxhdGl2ZTtcIiBtZC1zdmctaWNvbj1cInt7cmVzdGluZ319XCInICtcbiAgICAgICcgICAgICAgICBjbGFzcz1cIm1mYi1jb21wb25lbnRfX21haW4taWNvbi0tcmVzdGluZ1wiPjwvbWQtaWNvbj4nICtcbiAgICAgICcgICAgICAgPG1kLWljb24gc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIiBtZC1zdmctaWNvbj1cInt7YWN0aXZlfX1cIicgK1xuICAgICAgJyAgICAgICAgIGNsYXNzPVwibWZiLWNvbXBvbmVudF9fbWFpbi1pY29uLS1hY3RpdmVcIj48L21kLWljb24+JyArXG4gICAgICAnICAgICA8L21kLWJ1dHRvbj4nICtcbiAgICAgICcgICAgPC9hPicgK1xuICAgICAgJyAgICA8dWwgY2xhc3M9XCJtZmItY29tcG9uZW50X19saXN0XCIgbmctdHJhbnNjbHVkZT4nICtcbiAgICAgICcgICAgPC91bD4nICtcbiAgICAgICc8L2xpPicgK1xuICAgICAgJzwvdWw+J1xuICAgICk7XG5cbiAgICAkdGVtcGxhdGVDYWNoZS5wdXQoJ25nLW1mYi1idXR0b24tZGVmYXVsdC50cGwuaHRtbCcsXG4gICAgICAnPGxpPicgK1xuICAgICAgJyAgPGEgZGF0YS1tZmItbGFiZWw9XCJ7e2xhYmVsfX1cIiBjbGFzcz1cIm1mYi1jb21wb25lbnRfX2J1dHRvbi0tY2hpbGRcIj4nICtcbiAgICAgICcgICAgPGkgY2xhc3M9XCJtZmItY29tcG9uZW50X19jaGlsZC1pY29uIHt7aWNvbn19XCI+JyArXG4gICAgICAnICAgIDwvaT4nICtcbiAgICAgICcgIDwvYT4nICtcbiAgICAgICc8L2xpPidcbiAgICApO1xuXG4gICAgJHRlbXBsYXRlQ2FjaGUucHV0KCduZy1tZmItYnV0dG9uLW1kLnRwbC5odG1sJyxcbiAgICAgICc8bGk+JyArXG4gICAgICAnICA8YSBocmVmPVwiXCIgZGF0YS1tZmItbGFiZWw9XCJ7e2xhYmVsfX1cIiBjbGFzcz1cIm1mYi1jb21wb25lbnRfX2J1dHRvbi0tY2hpbGRcIiAnICtcbiAgICAgICcgICAgIHN0eWxlPVwiYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IGJveC1zaGFkb3c6IG5vbmU7XCI+JyArXG4gICAgICAnICAgICA8bWQtYnV0dG9uIHN0eWxlPVwibWFyZ2luOiAwO1wiIGNsYXNzPVwibWQtZmFiIG1kLWFjY2VudFwiIGFyaWEtbGFiZWw9e3tsYWJlbH19PicgK1xuICAgICAgJyAgICAgICA8bWQtaWNvbiBtZC1zdmctc3JjPVwiaW1nL2ljb25zL2FuZHJvaWQuc3ZnXCI+PC9tZC1pY29uPicgK1xuICAgICAgJyAgICAgICA8bWQtaWNvbiBtZC1zdmctaWNvbj1cInt7aWNvbn19XCI+PC9tZC1pY29uPicgK1xuICAgICAgJyAgICAgPC9tZC1idXR0b24+JyArXG4gICAgICAnICA8L2E+JyArXG4gICAgICAnPC9saT4nXG4gICAgKTtcbiAgfV0pO1xuXG4gIG1mYi5kaXJlY3RpdmUoJ21mYkJ1dHRvbkNsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICByZXF1aXJlOiAnXm1mYk1lbnUnLFxuICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBtZmJNZW51Q29udHJvbGxlcikge1xuICAgICAgICAkZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG1mYk1lbnVDb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9O1xuXG4gIH0pO1xuXG4gIG1mYi5kaXJlY3RpdmUoJ21mYk1lbnUnLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnQCcsXG4gICAgICAgIGVmZmVjdDogJ0AnLFxuICAgICAgICBsYWJlbDogJ0AnLFxuICAgICAgICByZXN0aW5nOiAnQHJlc3RpbmdJY29uJyxcbiAgICAgICAgYWN0aXZlOiAnQGFjdGl2ZUljb24nLFxuICAgICAgICBtYWluQWN0aW9uOiAnJicsXG4gICAgICAgIG1lbnVTdGF0ZTogJz0/JyxcbiAgICAgICAgdG9nZ2xpbmdNZXRob2Q6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtLCBhdHRycykge1xuICAgICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ25nLW1mYi1tZW51LWRlZmF1bHQudHBsLmh0bWwnO1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzKSB7XG4gICAgICAgIHZhciBvcGVuU3RhdGUgPSAnb3BlbicsXG4gICAgICAgICAgY2xvc2VkU3RhdGUgPSAnY2xvc2VkJztcblxuICAgICAgICAvLyBBdHRhY2hlZCB0b2dnbGUsIG9wZW4gYW5kIGNsb3NlIHRvIHRoZSBjb250cm9sbGVyIHRvIGdpdmUgb3RoZXJcbiAgICAgICAgLy8gZGlyZWN0aXZlIGFjY2Vzc1xuICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IGNsb3NlO1xuICAgICAgICB0aGlzLm9wZW4gPSBvcGVuO1xuXG4gICAgICAgICRzY29wZS5jbGlja2VkID0gY2xpY2tlZDtcbiAgICAgICAgJHNjb3BlLmhvdmVyZWQgPSBob3ZlcmVkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHN0YXRlIHRvIHVzZXItZGVmaW5lZCB2YWx1ZS4gRmFsbGJhY2sgdG8gY2xvc2VkIGlmIG5vXG4gICAgICAgICAqIHZhbHVlIGlzIHBhc3NlZCBmcm9tIHRoZSBvdXRzaWRlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCEkc2NvcGUubWVudVN0YXRlKSB7XG4gICAgICAgICAgJHNjb3BlLm1lbnVTdGF0ZSA9IGNsb3NlZFN0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIG9uIHRvdWNoIGRldmljZSBBTkQgJ2hvdmVyJyBtZXRob2QgaXMgc2VsZWN0ZWQ6XG4gICAgICAgICAqIHdhaXQgZm9yIHRoZSBkaWdlc3QgdG8gcGVyZm9ybSBhbmQgdGhlbiBjaGFuZ2UgaG92ZXIgdG8gY2xpY2suXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoX2lzVG91Y2hEZXZpY2UoKSAmJiBfaXNIb3ZlckFjdGl2ZSgpKSB7XG4gICAgICAgICAgJHRpbWVvdXQodXNlQ2xpY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgJGF0dHJzLiRvYnNlcnZlKCdtZW51U3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuY3VycmVudFN0YXRlID0gJHNjb3BlLm1lbnVTdGF0ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gY2xpY2tlZCgpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIG1haW4gYWN0aW9uLCBsZXQncyBmaXJlIGl0XG4gICAgICAgICAgaWYgKCRzY29wZS5tYWluQWN0aW9uKSB7XG4gICAgICAgICAgICAkc2NvcGUubWFpbkFjdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghX2lzSG92ZXJBY3RpdmUoKSkge1xuICAgICAgICAgICAgdG9nZ2xlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGhvdmVyZWQoKSB7XG4gICAgICAgICAgaWYgKF9pc0hvdmVyQWN0aXZlKCkpIHtcbiAgICAgICAgICAgIC8vdG9nZ2xlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnZlcnQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIG1lbnUuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgICAgaWYgKCRzY29wZS5tZW51U3RhdGUgPT09IG9wZW5TdGF0ZSkge1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgICAgICAgJHNjb3BlLm1lbnVTdGF0ZSA9IG9wZW5TdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICRzY29wZS5tZW51U3RhdGUgPSBjbG9zZWRTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBpZiB3ZSdyZSBvbiBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLlxuICAgICAgICAgKiBSZXF1aXJlcyBNb2Rlcm5penIgdG8gcnVuLCBvdGhlcndpc2Ugc2ltcGx5IHJldHVybnMgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9pc1RvdWNoRGV2aWNlKCkge1xuICAgICAgICAgIHJldHVybiB3aW5kb3cuTW9kZXJuaXpyICYmIE1vZGVybml6ci50b3VjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIF9pc0hvdmVyQWN0aXZlKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUudG9nZ2xpbmdNZXRob2QgPT09ICdob3Zlcic7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydCB0aGUgdG9nZ2xpbmcgbWV0aG9kIHRvICdjbGljaycuXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB3aGVuICdob3ZlcicgaXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICogYnV0IGEgdG91Y2ggZGV2aWNlIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiB1c2VDbGljaygpIHtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsaW5nTWV0aG9kID0gJ2NsaWNrJztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9O1xuICB9XSk7XG5cbiAgbWZiLmRpcmVjdGl2ZSgnbWZiQnV0dG9uJywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlOiAnXm1mYk1lbnUnLFxuICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGljb246ICdAJyxcbiAgICAgICAgbGFiZWw6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtLCBhdHRycykge1xuICAgICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ25nLW1mYi1idXR0b24tZGVmYXVsdC50cGwuaHRtbCc7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG59KSh3aW5kb3csIGFuZ3VsYXIpO1xuXG5zeW5jLmRpcmVjdGl2ZSgnbGVmdE1lbnUnLGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgZGF0YTogJz0nLFxuICAgICAgICAgICAgdXNlcjogJz0nLFxuICAgICAgICAgICAgdHlwZTogJz0nXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImRpcmVjdGl2ZXMvbGVmdE1lbnUuaHRtbFwiXG4gICAgfTtcbn0pO1xuc3luYy5kaXJlY3RpdmUoJ2ZlZWRzJyxmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHBvc3RzOiAnPScsXG4gICAgICAgICAgICByZXBsaWVzOiAnPScsXG4gICAgICAgICAgICBjcmVhdGVQb3N0Oic9J1xuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZVVybDogXCJkaXJlY3RpdmVzL21pZGRsZUNvbnRlbnQuaHRtbFwiXG4gICAgfTtcbn0pO1xuc3luYy5kaXJlY3RpdmUoJ2hlYWRlcicsZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiAnPScsXG4gICAgICAgICAgICB1c2VyOiAnPScsXG4gICAgICAgICAgICB0eXBlOiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi9kaXJlY3RpdmVzL2hlYWRlci5odG1sXCJcblxuICAgIH07XG59KTtcblxuXG5zeW5jLmRpcmVjdGl2ZSgna2V5YmluZGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgaW52b2tlOiAnJidcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cikge1xuICAgICAgICAgICAgTW91c2V0cmFwLmJpbmQoYXR0ci5vbiwgc2NvcGUuaW52b2tlKTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcblxuLyogZ2xvYmFsICR3aW5kb3cgKi9cbi8qIGdsb2JhbCBMb2dnZXIgKi9cblxuTG9nZ2VyLmNvbnRyb2xsZXIoJ2xvZ2luQ29udHJvbGxlcicsWyckc2NvcGUnLCckaHR0cCcsJyRyb290U2NvcGUnLCckd2luZG93JywgZnVuY3Rpb24gKCRzY29wZSwkaHR0cCwkcm9vdFNjb3BlLCR3aW5kb3cpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgJ2NyZWRlZGVudGlhbC1ub3QtZm91bmQnICAgICAgIDogJ0NyZWRlbnRpYWxzIG5vdCBmb3VuZCEnLFxuICAgICAgICAnc3VjY2VzcycgICAgICAgICAgICAgICAgICAgICAgOiAnbG9nZ2luZyBpbi4uLidcbiAgICB9O1xuICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoaW5mbylcbiAge1xuICAgIC8vYmVmb3JlIG5vdGlmeSB0aGF0IHdlIGFyZSBsb2dnaW5naW5cbiAgICAkKCcubG9naW4tZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBzdWNjZXNzJykuaHRtbChvcHRpb25zWydzdWNjZXNzJ10pO1xuICAgICRodHRwLnBvc3QoJHJvb3RTY29wZS5lbmRQb2ludCArICcvc2Vzc2lvbnMnLGluZm8pXG4gICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgIGlmKHJlc3BvbnNlID09PVwiMVwiKXtcbiAgICAgICAgICAgIFJlZGlyZWN0aW5nKCk7XG5cbiAgICAgICAgfWVsc2UgaWYocmVzcG9uc2UgPT09IFwiMFwiKXtcbiAgICAgICAgICAgICAkKCcubG9naW4tZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBlcnJvcicpLmh0bWwob3B0aW9uc1snY3JlZGVkZW50aWFsLW5vdC1mb3VuZCddKTtcbiAgICAgICAgfWVsc2UgaWYocmVzcG9uc2UgPT09IFwibm90VmVyaWZpZWRcIil7XG4gICAgICAgICAgICBub3RWZXJpZmllZCgpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yOicrIGVycm9yKTtcbiAgICB9KVxuICAgIGZ1bmN0aW9uIG5vdFZlcmlmaWVkKCl7XG4gICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL25vdFZlcmlmaWVkJztcbiAgICB9XG4gICAgZnVuY3Rpb24gUmVkaXJlY3RpbmcoKXtcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9zeW5jJztcbiAgICB9XG4gIH1cbn1dKTtcblxuTG9nZ2VyLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ29udHJvbGxlcicsIFsnJHNjb3BlJywnJHJvb3RTY29wZScsJyRodHRwJyxmdW5jdGlvbiAoJHNjb3BlLCRyb290U2NvcGUsJGh0dHApIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgJ3Bhc3N3b3JkLW5vdE1hdGNoJzogJ3Bhc3N3b3JkIGRvIG5vdCBtYXRjaCcsXG4gICAgICAgICdTaWduVXBJblByb2dyZXNzJyA6ICdXYWl0IHdlIGFyZSBzZXR0aW5nIHVwIHlvdXIgYWNjb3VudC4nXG4gICAgfTtcbiAgICAkc2NvcGUucmVnaXN0ZXI9ZnVuY3Rpb24odXNlcil7XG4gICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBzdWNjZXNzJykuaHRtbChvcHRpb25zWydTaWduVXBJblByb2dyZXNzJ10pO1xuICAgICAgICBpZigkKCcjcGFzc3dvcmQnKS52YWwoKSAhPSAkKCcjcGFzc3dvcmQtY29uZmlybScpLnZhbCgpKXtcbiAgICAgICAgICAkKCcucmVnaXN0ZXItZm9ybS1tYWluLW1lc3NhZ2UnKS5hZGRDbGFzcygnc2hvdyBlcnJvcicpLmh0bWwob3B0aW9uc1sncGFzc3dvcmQtbm90TWF0Y2gnXSk7XG4gICAgICAgICAgc2V0VGltZW91dChtZXNzYWdlUmVtb3ZlLCAyMDAwKTtcbiAgICAgICAgICBmdW5jdGlvbiBtZXNzYWdlUmVtb3ZlKCl7XG4gICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdzaG93IGVycm9yJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXNlcm5hbWU9JCgnI3VzZXJuYW1lJykudmFsKCk7XG4gICAgICAgIHZhciBlbWFpbD0kKCcjZW1haWwnKS52YWwoKTtcblxuXG4gICAgICAgIGpRdWVyeS5wb3N0KCcvc2Vzc2lvbnMnLCB7dXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDp1c2VyLnBhc3N3b3JkLCBlbWFpbDplbWFpbCwgb3B0aW9uOnVzZXIub3B0aW9uLCBwaG9uZTp1c2VyLnBob25lfSwgZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICBpZihkYXRhID09IDEpe1xuICAgICAgICAgICAgICAgICBSZWRpcmVjdGluZygpO1xuICAgICAgICAgICAgfWVsc2UgaWYoZGF0YSA9PTApe1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd3ZSBhcmUgZmlyZWQgdGhpcyBjYW4gbm90IGhhcHBlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBSZWRpcmVjdGluZygpe1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJy9jaGVja0VtYWlsJztcbiAgICAgICAgfVxuICAgIH1cbn1dKTtcblxuTG9nZ2VyLmRpcmVjdGl2ZSgndW5pcXVlVXNlcm5hbWUnLCBbJ2lzVXNlcm5hbWVBdmFpbGFibGUnLGZ1bmN0aW9uKGlzVXNlcm5hbWVBdmFpbGFibGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gaXNVc2VybmFtZUF2YWlsYWJsZTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG5Mb2dnZXIuZmFjdG9yeSgnaXNVc2VybmFtZUF2YWlsYWJsZScsIFsnJHEnLCckaHR0cCcsJyRyb290U2NvcGUnLGZ1bmN0aW9uKCRxLCAkaHR0cCwkcm9vdFNjb3BlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICdidG4tbG9hZGluZyc6ICc8aSBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtcHVsc2VcIj48L2k+JyxcbiAgICAgICAgJ2J0bi1zdWNjZXNzJzogJzxpIGNsYXNzPVwiZmEgZmEtY2hlY2tcIj48L2k+JyxcbiAgICAgICAgJ2J0bi1lcnJvcic6ICc8aSBjbGFzcz1cImZhIGZhLXJlbW92ZVwiPjwvaT4nLFxuICAgICAgICAnbXNnLXN1Y2Nlc3MnOiAnQWxsIEdvb2QhIFJlZGlyZWN0aW5nLi4uJyxcbiAgICAgICAgJ21zZy11c2VybmFtZS1hdmFpbGFibGUnOiAnZ29vZCB1c2VybmFtZSBhdmFpbGFibGUhJyxcbiAgICAgICAgJ21zZy11c2VybmFtZS10YWtlbicgICAgOiAnb29wcyB1c2VybmFtZSB0YWtlbicsXG4gICAgICAgICdtc2ctZW1haWwtdGFrZW4nICAgICAgIDogJ2VtYWlsIHRha2VuJyxcbiAgICAgICAgJ21zZy15b3VyLXBob25lLXN1Y2snICAgOiAneW91ciBwaG9uZSBpcyBub3QgdmFsaWQnLFxuICAgICAgICAndXNlQUpBWCc6IHRydWUsXG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24odXNlcm5hbWUpIHtcblxuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvdXNlcnM/dXNlcm5hbWU9JyArIHVzZXJuYW1lICsgJyZhY2Nlc3NfdG9rZW49QmM3RFdTN0tLUkx0eG1kZFVaSTFUMWxadTJKMVloUjhPTFhHV05abicpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBpZihkYXRhPT0nYXZhaWxhYmxlJyl7XG4gICAgICAgICAgICAgICAgJCgnLnJlZ2lzdGVyLWZvcm0tbWFpbi1tZXNzYWdlJykuYWRkQ2xhc3MoJ3Nob3cgc3VjY2VzcycpLmh0bWwob3B0aW9uc1snbXNnLXVzZXJuYW1lLWF2YWlsYWJsZSddKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG1lc3NhZ2VSZW1vdmUsIDIwMDApO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1lc3NhZ2VSZW1vdmUoKXtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnJlZ2lzdGVyLWZvcm0tbWFpbi1tZXNzYWdlJykucmVtb3ZlQ2xhc3MoJ3Nob3cgc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlIGlmKGRhdGE9PSd0YWtlbicpe1xuICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLmFkZENsYXNzKCdzaG93IGVycm9yJykuaHRtbChvcHRpb25zWydtc2ctdXNlcm5hbWUtdGFrZW4nXSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh1c2VybmFtZVRha2VuLCAyMDAwKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1c2VybmFtZVRha2VuKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdzaG93IGVycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG59XSk7XG5Mb2dnZXIuZGlyZWN0aXZlKCd1bmlxdWVFbWFpbCcsIFsnaXNFbWFpbEF2YWlsYWJsZScsZnVuY3Rpb24oaXNFbWFpbEF2YWlsYWJsZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnMudW5pcXVlRW1haWwgPSBpc0VtYWlsQXZhaWxhYmxlO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcbkxvZ2dlci5mYWN0b3J5KCdpc0VtYWlsQXZhaWxhYmxlJywgWyckcScsJyRodHRwJywnJHJvb3RTY29wZScsZnVuY3Rpb24gKCRxLCAkaHR0cCwgJHJvb3RTY29wZSkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAnYnRuLWxvYWRpbmcnOiAnPGkgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXB1bHNlXCI+PC9pPicsXG4gICAgICAgICdidG4tc3VjY2Vzcyc6ICc8aSBjbGFzcz1cImZhIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICdidG4tZXJyb3InOiAnPGkgY2xhc3M9XCJmYSBmYS1yZW1vdmVcIj48L2k+JyxcbiAgICAgICAgJ21zZy1zdWNjZXNzJzogJ0FsbCBHb29kISBSZWRpcmVjdGluZy4uLicsXG4gICAgICAgICdtc2ctdXNlcm5hbWUtYXZhaWxhYmxlJzogJ2dvb2QgdXNlcm5hbWUgYXZhaWxhYmxlIScsXG4gICAgICAgICdtc2ctdXNlcm5hbWUtdGFrZW4nICAgIDogJ29vcHMgdXNlcm5hbWUgdGFrZW4nLFxuICAgICAgICAnbXNnLWVtYWlsLXRha2VuJyAgICAgICA6ICdlbWFpbCB0YWtlbicsXG4gICAgICAgICdtc2ctZW1haWwtYXZhaWxhYmxlJyAgIDogJ2VtYWlsIGF2YWlsYWJsZScsXG4gICAgICAgICdtc2cteW91ci1waG9uZS1zdWNrJyAgIDogJ3lvdXIgcGhvbmUgaXMgbm90IHZhbGlkJyxcbiAgICAgICAgJ3VzZUFKQVgnOiB0cnVlLFxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oZW1haWwpIHtcbiAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS91c2Vycz9lbWFpbD0nICsgZW1haWwgKyAnJmFjY2Vzc190b2tlbj1CYzdEV1M3S0tSTHR4bWRkVVpJMVQxbFp1MkoxWWhSOE9MWEdXTlpuJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblxuICAgICAgICAgICAgaWYoZGF0YT09J2VtYWlsLWF2YWlsYWJsZScpe1xuICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLmFkZENsYXNzKCdzaG93IHN1Y2Nlc3MnKS5odG1sKG9wdGlvbnNbJ21zZy1lbWFpbC1hdmFpbGFibGUnXSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChtZXNzYWdlUmVtb3ZlLCAyMDAwKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZXNzYWdlUmVtb3ZlKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdzaG93IHN1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1lbHNlIGlmKGRhdGE9PSdlbWFpbC10YWtlbicpe1xuICAgICAgICAgICAgICAgICQoJy5yZWdpc3Rlci1mb3JtLW1haW4tbWVzc2FnZScpLmFkZENsYXNzKCdzaG93IGVycm9yJykuaHRtbChvcHRpb25zWydtc2ctZW1haWwtdGFrZW4nXSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChtZXNzYWdlRW1haWxUYWtlbiwgMjAwMCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbWVzc2FnZUVtYWlsVGFrZW4oKXtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnJlZ2lzdGVyLWZvcm0tbWFpbi1tZXNzYWdlJykucmVtb3ZlQ2xhc3MoJ3Nob3cgZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgICB9KS5lcnJvcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgIH0pO1xuICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbn1dKTtcblxuXG5zeW5jLmNvbnRyb2xsZXIoJ3VwbG9hZERpYWxvZ0N0cmwnLCBbJyRzY29wZScsJyR1aWJNb2RhbCcsJyRtZERpYWxvZycsJyRtZE1lZGlhJywgZnVuY3Rpb24gKCRzY29wZSwkdWliTW9kYWwsICRtZERpYWxvZywgJG1kTWVkaWEpIHtcblxuXHRcdFx0XHQvL2RlY2xhcmUgZ2xvYmFsIGZ1bmN0aW9uIGZvciBzaG9ydGN1dFxuXHRcdFx0XHQkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JG1kRGlhbG9nLmhpZGUoKTtcblx0XHRcdFx0fTtcblx0XHQgICAgJHNjb3BlLmN1c3RvbUZ1bGxzY3JlZW4gPSAkbWRNZWRpYSgneHMnKSB8fCAkbWRNZWRpYSgnc20nKTtcblx0XHQgICAgJHNjb3BlLnVwbG9hZCA9IGZ1bmN0aW9uKGV2KSB7XG5cdFx0ICAgICAgJG1kRGlhbG9nLnNob3coe1xuXHRcdFx0XHRcdFx0cGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG5cdFx0ICAgICAgICBjb250cm9sbGVyOiBEaWFsb2dDb250cm9sbGVyLFxuXHRcdCAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91cGxvYWQudHBsLmh0bWwnLFxuXHRcdCAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG5cdFx0ICAgICAgICB0YXJnZXRFdmVudDogZXYsXG5cdFx0ICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOmZhbHNlXG5cdFx0ICAgICAgfSlcblx0XHQgICAgICAudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcblx0XHQgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gJ1lvdSBzYWlkIHRoZSBpbmZvcm1hdGlvbiB3YXMgXCInICsgYW5zd2VyICsgJ1wiLic7XG5cdFx0ICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuXHRcdCAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSAnWW91IGNhbmNlbGxlZCB0aGUgZGlhbG9nLic7XG5cdFx0ICAgICAgICAgIH0pO1xuXHRcdCAgICB9O1xuXHRcdFx0XHRmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nKSB7XG5cdFx0XHRcdCAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ICAgICRtZERpYWxvZy5oaWRlKCk7XG5cdFx0XHRcdCAgfTtcblx0XHRcdFx0ICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG5cdFx0XHRcdCAgfTtcblx0XHRcdFx0ICAkc2NvcGUuYW5zd2VyID0gZnVuY3Rpb24oYW5zd2VyKSB7XG5cdFx0XHRcdCAgICAkbWREaWFsb2cuaGlkZShhbnN3ZXIpO1xuXHRcdFx0XHQgIH07XG5cdFx0XHRcdH1cblx0XHRcdFx0RGlhbG9nQ29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJG1kRGlhbG9nXCJdO1xufV0pO1xuc3luYy5jb250cm9sbGVyKCdzaGFyZUNvbnRyb2xsZXInLCBbJyRzY29wZScsJyR1aWJNb2RhbCcsJyRtZERpYWxvZycsJyRtZE1lZGlhJywndXJsU2hvcnRlbmVyJywnU2hhcmUnLCdVc2VyJywgZnVuY3Rpb24gKCRzY29wZSwkdWliTW9kYWwsICRtZERpYWxvZywgJG1kTWVkaWEsdXJsU2hvcnRlbmVyLFNoYXJlLFVzZXIpIHtcblxuXHQvL2RlY2xhcmUgZ2xvYmFsIGZ1bmN0aW9uIGZvciBzaG9ydGN1dFxuXHQkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0JG1kRGlhbG9nLmhpZGUoKTtcblx0fTtcblx0JHNjb3BlLmN1c3RvbUZ1bGxzY3JlZW4gPSAkbWRNZWRpYSgneHMnKSB8fCAkbWRNZWRpYSgnc20nKTtcblx0JHNjb3BlLnNoYXJlID0gZnVuY3Rpb24oZXYsZmlsZU5hbWUpIHtcblxuXHRcdCRtZERpYWxvZy5zaG93KHtcblx0XHRcdHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuXHRcdFx0Y29udHJvbGxlcjogRGlhbG9nQ29udHJvbGxlcixcblx0XHRcdHRlbXBsYXRlVXJsOiAndmlld3Mvc2hhcmUudHBsLmh0bWwnLFxuXHRcdFx0cGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG5cdFx0XHR0YXJnZXRFdmVudDogZXYsXG5cdFx0XHRjbGlja091dHNpZGVUb0Nsb3NlOmZhbHNlXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbihhbnN3ZXIpIHtcblx0XHRcdFx0XHQkc2NvcGUuc3RhdHVzID0gJ1lvdSBzYWlkIHRoZSBpbmZvcm1hdGlvbiB3YXMgXCInICsgYW5zd2VyICsgJ1wiLic7XG5cdFx0XHRcdH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRzY29wZS5zdGF0dXMgPSAnWW91IGNhbmNlbGxlZCB0aGUgZGlhbG9nLic7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nKSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ3NoYXJlZEZpbGUnKyBmaWxlTmFtZSk7XG5cdFx0XHRcdFx0JHNjb3BlLmdldEZpbGUgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5maWxlPXVybFNob3J0ZW5lci5tYWtlU2hvcnQoZmlsZU5hbWUpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0JHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCRtZERpYWxvZy5oaWRlKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQkbWREaWFsb2cuY2FuY2VsKCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQkc2NvcGUuYW5zd2VyID0gZnVuY3Rpb24oYW5zd2VyKSB7XG5cdFx0XHRcdFx0XHQkbWREaWFsb2cuaGlkZShhbnN3ZXIpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0RGlhbG9nQ29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJG1kRGlhbG9nXCJdO1xuXG5cdH07XG5cblxuXG5cdCRzY29wZS5zaGFyZUZpbGUgPSBmdW5jdGlvbih2bSl7XG5cblx0XHR2YXIgZW1haWxzPXZtLmVtYWlscztcblx0XHR2YXIgZW1haWxfYXJyYXkgPSBlbWFpbHMuc3BsaXQoJywnKTtcblx0XHR2YXIgaTtcblx0XHRmb3IgKCBpPTA7IGkgPCBlbWFpbF9hcnJheS5sZW5ndGg7IGkrKyApIHtcblx0XHRcdC8vdmFsaWRhdGUgZWFjaCBlbWFpbCB0byBzaGFyZSB3aXRoXG5cdFx0XHRTaGFyZS5zaGFyZSh2bSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlcyk7XG5cdFx0XHR9KS5jYXRjaCgpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZW1haWxfYXJyYXlbaV0pO1xuXG5cdFx0fVxuXHR9XG5cbn1dKTtcblxuc3luYy5zZXJ2aWNlKCdGaWxlcycsIFsnJGh0dHAnLCckcScsJyRyb290U2NvcGUnLGZ1bmN0aW9uIEZpbGVzICgkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG4gICAgdGhpcy5nZXRHcm91cEZpbGVzID1mdW5jdGlvbihncm91cElkKSB7XG4gICAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIC8vZG93biBlbmRwb2ludCByZXR1cm4gYWxsIGZpbGVzIEkgb3duXG4gICAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsnL2FwaS92MS9ncm91cHMvJytncm91cElkKycvZ3JvdXBmaWxlcycpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5zaW5nbGUgPSBmdW5jdGlvbihmaWxlKXtcbiAgICAgIHZhciBwcm9taXNlID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50KyAnL3ByZXZpZXcvJysgZmlsZSlcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHByb21pc2UucHJvbWlzZTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0Qm94RmlsZXMgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZ3JvdXBJZCA9IDE7Ly9ieSBkZWZhdWx0IHRoaXMgY2FuIGJlIGFueSBudW1iZXJcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgLy90aGUgaWRlYSBpcyB0byBnZXQgYSBmaWxlIGVpdGhlciBmcm9tIGdyb3VwcyBvciBpbmRpdmlkdWFsIGFjY291bnQgZ3JvdXAgaXMgb3B0aW9uYWxcbiAgICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9maWxlcy8nK2dyb3VwSWQrJy9ib3hmaWxlcycpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0TWltZVR5cGUgPSBmdW5jdGlvbihmaWxlX25hbWUpe1xuICAgICAgdmFyIHByb21pc2UgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9maWxlcy9taW1lVHlwZS8nKyBmaWxlX25hbWUpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcHJvbWlzZS5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5kb3dubG9hZEZpbGUgPSBmdW5jdGlvbihmaWxlX25hbWUpe1xuXG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLmRlZmVyKCk7XG4gICAgICAvL2hhcmQgY29kZWQgYSB1c2VyIFN0cmltVXAhIG5lZWQgdG8gaW5qZWN0IGhpbSBkeWFtaWNhbGx5XG4gICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCsgJy9hcGkvdjEvZmlsZXMvZG93bmxvYWQvJytmaWxlX25hbWUrJy9vZi8nKyAnU3RyaW1VcCcpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIHByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcm9taXNlLnByb21pc2U7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbn1dKTtcblxuc3luYy5zZXJ2aWNlKCdQZW9wbGUnLCBbJyRxJywnJGh0dHAnLCckcm9vdFNjb3BlJyxmdW5jdGlvbiAoJHEsICRodHRwLCAkcm9vdFNjb3BlKSB7XG5cdHRoaXMuZ2V0ICA9IGZ1bmN0aW9uICgpe1xuXHRcdHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9zdWdnZXN0aW9ucycpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHR0aGlzLmFsbElmb2xsb3cgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2ZvbGxvd2luZ3MnKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycil7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cdHRoaXMudW5Gb2xsb3cgPSBmdW5jdGlvbihpZCl7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5kZWxldGUoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2ZvbGxvd2luZy8nICtpZClcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnIpe1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHR0aGlzLmZvbGxvdyA9IGZ1bmN0aW9uKHBhcmFtKXtcblx0XHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLnB1dCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvZm9sbG93aW5ncycsIHBhcmFtKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHRyZXR1cm4gdGhpcztcbn1dKTtcblxuc3luYy5zZXJ2aWNlKCdTaGFyZScsWyckbG9nJywnJGh0dHAnLCckcScsJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJGxvZywkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG5cdHRoaXMuc2hhcmUgPSBmdW5jdGlvbihzaGFyZWJsZU9iail7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAucG9zdCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvc2hhcmUnLHNoYXJlYmxlT2JqKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9O1xuXHR0aGlzLmdldFVzZXIgPSBmdW5jdGlvbih1c2VyKXtcblxuXHRcdHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS91c2Vycy8nKyB1c2VyKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycil7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fTtcblx0dGhpcy5maWxlTWltZSA9IGZ1bmN0aW9uKGZpbGUpe1xuXHRcdHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9taW1lVHlwZS8nKyBmaWxlKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycil7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fTtcbiAgICByZXR1cm4gdGhpcztcbn1dKTtcbnN5bmMuc2VydmljZSgnVXNlcicsIFsnJGh0dHAnLCckcScsJyRyb290U2NvcGUnLGZ1bmN0aW9uIEZpbGVzICgkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG5cdHRoaXMuaW5mbyA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb21pc2UgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICtcIi9hcGkvdjEvdXNlcnMvaW5mb1wiKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRwcm9taXNlLnJlc29sdmUocmVzKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbigpIHtcblx0XHRcdHByb21pc2UucmVqZWN0KCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHByb21pc2UucHJvbWlzZTtcblx0fTtcblx0dGhpcy5ncm91cHMgPSBmdW5jdGlvbih1c2VyKXtcbiAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3VwcycpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpe1xuICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyKTtcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgXG5cdHJldHVybiB0aGlzO1xufV0pXG4vKiBnbG9iYWwgc3luYyAqL1xuc3luYy5zZXJ2aWNlKCdOb3RpZmljYXRpb24nLCBbJyRodHRwJywgJyRxJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiBOb3RpZmljYXRpb24oJGh0dHAsICRxLCAkcm9vdFNjb3BlKSB7XG4gICAgdGhpcy5nZXROb3RpZmljYXRpb24gPSBmdW5jdGlvbiAodXNlcl9pZCkge1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL25vdGlmaWNhdGlvbnMnLCB7Y2FjaGU6IGZhbHNlfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKE5vdGlmaWNhdGlvbikge1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5wb3N0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9ub3RpZmljYXRpb25zJywgTm90aWZpY2F0aW9uKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfVxuICAgIHRoaXMuZGVsZXRlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5kZWxldGUoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL25vdGlmaWNhdGlvbnMvJyArIG5vdGlmaWNhdGlvbilcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XSk7XG5cbnN5bmMuY29udHJvbGxlcignbm90aWZpY2F0aW9uQ29udHJvbGxlcicsIFsnJHNjb3BlJywnTm90aWZpY2F0aW9uJywnJGxvZycsIGZ1bmN0aW9uICgkc2NvcGUsTm90aWZpY2F0aW9uLCRsb2cpIHtcbiAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICRzY29wZS5nZXROb3RpZmljYXRpb24oKTtcbiAgICB9XG4gICAgJHNjb3BlLmNsZWFyTm90aWZpY2F0aW9uID0gZnVuY3Rpb24obm90aWZpY2F0aW9uKXtcblxuXG4gICAgICBOb3RpZmljYXRpb24uY2xlYXJOb3RpZmljYXRpb24obm90aWZpY2F0aW9uKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAvL2xvYWQgcmVtYWluaW5nIG5vdGlmaWNhdGlvblxuICAgICAgICAkc2NvcGUuZ2V0Tm90aWZpY2F0aW9uKCk7XG4gICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgJHNjb3BlLmdldE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIE5vdGlmaWNhdGlvbi5nZXROb3RpZmljYXRpb24oKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAgICAgLy8gJGxvZy5pbmZvKHJlc3VsdCk7XG4gICAgICAgICAgICAkc2NvcGUubm90aWZpY2F0aW9ucyA9IHJlc3VsdDtcbiAgICAgICAgICAgIFxuICAgICAgICB9LGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgIC8vICRsb2cuaW5mbyhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAkc2NvcGUuaW5pdCgpO1xufV0pO1xuc3luYy5kaXJlY3RpdmUoJ25vdGlmeScsW2Z1bmN0aW9uKCl7XG4gIHJldHVybntcbiAgICByZXN0cmljdDonQUUnLFxuICAgIHNjb3BlOntcblxuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBpQXR0cnMpe1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICB2YXIgdGl0bGU9J1RoaXMgd2lsbCBiZSB0aXRsZSc7XG4gICAgICAgICAgICAgIHZhciBkZXNjPSdNb3N0IHBvcHVsYXIgYXJ0aWNsZS4nO1xuICAgICAgICAgICAgICB2YXIgdXJsPSdzeW5jLmNvbTo4MDAwJztcbiAgICAgICAgICAgICAgbm90aWZ5QnJvd3Nlcih0aXRsZSxkZXNjLHVybCk7XG4gICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgICAgIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiAhPT0gXCJncmFudGVkXCIpe1xuICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gbm90aWZ5QnJvd3Nlcih0aXRsZSxkZXNjLHVybClcbiAgICAgIHtcbiAgICAgICAgaWYgKCFOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXNrdG9wIG5vdGlmaWNhdGlvbnMgbm90IGF2YWlsYWJsZSBpbiB5b3VyIGJyb3dzZXIuLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uICE9PSBcImdyYW50ZWRcIil7XG4gICAgICAgICAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24odGl0bGUsIHtcbiAgICAgICAgICAgIGljb246J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tYUNGaUs0YmFYWDQvVmptR0pvanNRX0kvQUFBQUFBQUFOSmcvaC1zTFZYMU01ekEvczQ4LUljNDIvZWdnc21hbGwucG5nJyxcbiAgICAgICAgICAgIGJvZHk6IGRlc2MsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBSZW1vdmUgdGhlIG5vdGlmaWNhdGlvbiBmcm9tIE5vdGlmaWNhdGlvbiBDZW50ZXIgd2hlbiBjbGlja2VkLlxuICAgICAgICBub3RpZmljYXRpb24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBpcyBjbG9zZWQuXG4gICAgICAgIG5vdGlmaWNhdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdOb3RpZmljYXRpb24gY2xvc2VkJyk7XG4gICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKVxuXG5zeW5jLmZhY3RvcnkoJ3VzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MobWVzc2FnZSwgXCJTdWNjZXNzXCIpO1xuICAgICAgICB9LFxuICAgICAgICB3YXJuOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcobWVzc2FnZSwgXCJIZXlcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGluZm86IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB0b2FzdHIuaW5mbyhtZXNzYWdlLCBcIkZZSVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IobWVzc2FnZSwgXCJPaCBOb1wiKTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcblxuc3luYy5mYWN0b3J5KCd1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKG1lc3NhZ2UsIFwiU3VjY2Vzc1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2FybjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKG1lc3NhZ2UsIFwiSGV5XCIpO1xuICAgICAgICB9LFxuICAgICAgICBpbmZvOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLmluZm8obWVzc2FnZSwgXCJGWUlcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKG1lc3NhZ2UsIFwiT2ggTm9cIik7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG5cbi8qIGdsb2JhbCBzeW5jICovXG4vKipcbiAqICBDcmVhdGVkIGJ5IE11cmFnaWppbWFuYSBSaWNoYXJkIG9uIDEwLzIwLzE1LlxuICogIEJlYXN0YXI0NTdAZ21haWwuY29tICwgc3luY0BnbWFpbC5jb20gLCBjaGVjayB3aXRoIG1lIVxuICovXG4vKkkgdXNlIENhbWVsQ2FzZSB3aGlsZSByZW5hbWluZyBteSBmdW5jdGlvbnMgKi9cbi8qYW5kIGkgdXNlIHNuYWtlIGNhc2Ugd2hpbGUgcmVuYW1pbmcgdmFyaWFibGVzICovXG4vKnBvc3Qgc2VydmljZSAqL1xuXG5zeW5jLnNlcnZpY2UoJ1Bvc3QnLCBbJyRodHRwJywgJyRxJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiBQb3N0KCRodHRwLCAkcSwgJHJvb3RTY29wZSkge1xuICAgIHRoaXMuZ2V0UG9zdCA9IGZ1bmN0aW9uICh1c2VyX2lkKSB7XG4gICAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvcG9zdHM/dXNlcl9pZCcgKyB1c2VyX2lkLCB7Y2FjaGU6IGZhbHNlfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfTtcbiAgICB0aGlzLnBhcnRpY2lwYXRlID0gZnVuY3Rpb24ob2JqKXtcbiAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5wdXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL3Bvc3RzLycsb2JqKVxuICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5jcmVhdGVQb3N0ID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAucG9zdCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvcG9zdHMnLCBwb3N0KVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfTtcbiAgICB0aGlzLmRlbGV0ZVBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAuZGVsZXRlKCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9wb3N0cy8nICsgaWQpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xufV0pO1xuXG5zeW5jLmNvbnRyb2xsZXIoJ1Bvc3RpbmdDb250cm9sbGVyJywgW1xuICAnJHNjb3BlJyxcbiAgJ1Bvc3QnLFxuICAnJHRpbWVvdXQnLFxuICAnVXNlcicsXG4gICckaW50ZXJ2YWwnLFxuICAnTm90aWZpY2F0aW9uJyxcbiAgLy8gJyRpb25pY0xpc3REZWxlZ2F0ZScsXG4gICckbG9nJyxcbiAgJ3VzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbicsXG4gIGZ1bmN0aW9uIChcbiAgJHNjb3BlLFxuICBQb3N0LFxuICAkdGltZW91dCxcbiAgVXNlcixcbiAgJGludGVydmFsLFxuICBOb3RpZmljYXRpb24sXG4gICRpb25pY0xpc3REZWxlZ2F0ZSxcbiAgJGxvZyxcbiAgdXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uXG4pIHtcblxuICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUucG9zdExvYWRlcigpO1xuICAgICAgICAkc2NvcGUuZ2V0VXNlcigpO1xuXG4gICAgfTtcblxuICAgICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5wb3N0TG9hZGVyKCk7XG4gICAgfSwgODAwMCk7XG4gICAgJHNjb3BlLmdldFVzZXIgPWZ1bmN0aW9uKCl7XG5cbiAgICAgIFVzZXIuX2lkKClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAkc2NvcGUudXNlciA9IHJlc3BvbnNlO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgIC8vcXVpdCBzbGludGx5XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5sb2FkTW9yZSA9IGZ1bmN0aW9uKCl7XG5cbiAgICB9O1xuICAgICRzY29wZS5wYXJ0aWNpcGF0ZUludG9Qb3N0ID0gZnVuY3Rpb24ocG9zdCx1c2VyKXtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHVzZXIpO1xuICAgICAgdmFyIG9iaiA9e1xuICAgICAgICAncG9zdF9pZCc6cG9zdCxcbiAgICAgICAgJ3VzZXJfaWQnOnVzZXJcbiAgICAgIH07XG4gICAgICBQb3N0LnBhcnRpY2lwYXRlKG9iailcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgJHNjb3BlLnBvc3RMb2FkZXIoKTtcbiAgICAgIH0sZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgLy9xdWl0IHNsZW50bHlcblxuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUucG9zdExvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLmRhdGFMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgUG9zdC5nZXRQb3N0KClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmVlKSB7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMgPXRyZWU7XG4gICAgICAgICAgICAgICAgLy9uYXZpZ2F0ZSB0cm91Z2ggdHJlZSByZXNwb25zZSB3aGljaCBpcyByZXF1aXJlIG11Y2ggYXR0ZW50aW9uXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHM9W107XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcGxpZXM9W107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmVlW2ldLmhhc093blByb3BlcnR5KCdmcmllbmRzJykgJiYgdHJlZVtpXVsncmVwbGllcyddICAmJiB0cmVlW2ldWydmcmllbmRzJ10gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMucHVzaCh0cmVlW2ldLmZyaWVuZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXBsaWVzLnB1c2godHJlZVtpXS5yZXBsaWVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmVlW2ldLmhhc093blByb3BlcnR5KCdmcmllbmRzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gZnJpZW5kcy5jb25jYXQodHJhdmVyc2UodHJlZVtpXS5mcmllbmRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVwbGllcyA9IHJlcGxpZXMuY29uY2F0KHRyYXZlcnNlKHRyZWVbaV0ucmVwbGllcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmltYWdlRGVzYyA9IGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgIC8vc2hvdyBpbWFnZXMgd2l0aCBkaWZmZXJlbnQgcGl4ZWxcbiAgICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAnNjBweCc7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gXCI2MHB4XCI7XG5cbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gXCI2MHB4XCI7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gXCI2MHB4XCI7XG5cbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gXCI2MHB4XCI7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFwiNjBweFwiO1xuXG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhpbmRleCk7XG4gICAgfTtcbiAgICAkc2NvcGUuc2hhcmUgPSBmdW5jdGlvbihpZCl7XG4gICAgICAgICRpb25pY0xpc3REZWxlZ2F0ZS5jbG9zZU9wdGlvbkJ1dHRvbnMoKTtcbiAgICAgICAgJGxvZy5pbmZvKGlkKTtcbiAgICB9O1xuICAgICRzY29wZS5jcmVhdGVQb3N0ID0gZnVuY3Rpb24gKHBvc3RpbmcpIHtcbiAgICAgIC8vaWYgaW1hZ2UgaXMgdXBsb2FkZWQgdXBsb2FkZWRcbiAgICAgICAgdmFyIF90aGlzID0geyBtZXNzYWdlOiBwb3N0aW5nIH07XG4gICAgICAgIFBvc3QuY3JlYXRlUG9zdChfdGhpcylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwb3N0Q3JlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy5wdXNoKHBvc3RDcmVhdGVkKTtcbiAgICAgICAgICAgICAgICAgIHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiTmV3IFBvc3QgZmVlZCBjcmVhdGVkIVwiKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmluaXQoKTtcbn1dKTtcbnN5bmMuZGlyZWN0aXZlKCdmZWVkc1VwbG9hZGVyJyxbZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0FFJyxcbiAgICByZXBsYWNlOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZVVybDogJ0FwcC9qcy9zY3JpcHRzL3ZpZXdzL2ZlZWRBdHRhY2htZW50Lmh0bWwnLFxuICAgIHNjb3BlOiB7XG4gICAgICBhY3Rpb246ICdAJ1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAkc2NvcGUucHJvZ3Jlc3MgPSAwO1xuICAgICAgJHNjb3BlLmF2YXRhciA9ICcnO1xuICAgICAgJHNjb3BlLnNlbmRGaWxlID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgdmFyICRmb3JtID0gJChlbCkucGFyZW50cygnZm9ybScpO1xuICAgICAgICBpZiAoJChlbCkudmFsKCkgPT09ICcnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgICRmb3JtLmF0dHIoJ2FjdGlvbicsICRzY29wZS5hY3Rpb24pO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5wcm9ncmVzcyA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICAkZm9ybS5hamF4U3VibWl0KHtcbiAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgIFx0YmVmb3JlU2VuZDogZnVuY3Rpb24gKHhocikge1xuICAgICAgICBcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ2F1dGhvcml6YXRpb24nLCAnQmVhcmVyIE9xRmlyUVM0NFJRVGpSdVduaVhqZEhaSlFYZEN1RXg0OXJxOEpZNUEnKTtcbiAgICAgICAgXHR9LFxuICAgICAgICAgIHVwbG9hZFByb2dyZXNzOiBmdW5jdGlvbihldnQsIHBvcywgdG90LCBwZXJjQ29tcGxldGUpIHtcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIHVwbG9hZCB0aGUgcHJvZ3Jlc3MgYmFyIGR1cmluZyB0aGUgdXBsb2FkXG4gICAgICAgICAgICAgIC8vICRzY29wZS5wcm9ncmVzcyA9IHBlcmNlbnRDb21wbGV0ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGV2dCwgc3RhdHVzVGV4dCwgcmVzcG9uc2UsIGZvcm0pIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYWN0aW9uIGF0dHJpYnV0ZSBmcm9tIHRoZSBmb3JtXG4gICAgICAgICAgICAkZm9ybS5yZW1vdmVBdHRyKCdhY3Rpb24nKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhociwgZm9ybSkge1xuICAgICAgICAgICAgdmFyIGFyID0gJChlbCkudmFsKCkuc3BsaXQoJ1xcXFwnKSxcbiAgICAgICAgICAgICAgZmlsZW5hbWUgPSAgYXJbYXIubGVuZ3RoLTFdO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBhY3Rpb24gYXR0cmlidXRlIGZyb20gdGhlIGZvcm1cbiAgICAgICAgICAgICRmb3JtLnJlbW92ZUF0dHIoJ2FjdGlvbicpO1xuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmF2YXRhciA9IGZpbGVuYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1dLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycywgY3RybCkge1xuXG4gICAgICBlbGVtLmZpbmQoJy5mYWtlLXVwbG9hZGVyJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW0uZmluZCgnaW5wdXRbdHlwZT1cImZpbGVcIl0nKS5jbGljaygpO1xuICAgICAgfSk7XG5cbiAgICB9XG4gIH07XG59XSk7XG5cbi8qIGdsb2JhbCAkdWliTW9kYWxJbnN0YW5jZSAqL1xuLyogZ2xvYmFsIE1vZGFsSW5zdGFuY2VDdHJsICovXG4vKiBnbG9iYWwgJHVpYk1vZGFsICovXG4vKiBnbG9iYWwgc3luYyAqL1xuLyogZ2xvYmFsIHN5bmMgKi9cbnN5bmMuY29udHJvbGxlcignRmlsZXNDb250cm9sbGVyJyxcbiBbXG5cdCckc2NvcGUnLCdGaWxlcycsJyRsb2cnLCckd2luZG93JywnVXNlcicsJyR1aWJNb2RhbCcsJyRpbnRlcnZhbCcsJ3BkZkRlbGVnYXRlJywnJHRpbWVvdXQnLCckc3RhdGVQYXJhbXMnLCckcm9vdFNjb3BlJywnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbiAoXG5cdFx0JHNjb3BlLCBGaWxlcywkbG9nLCR3aW5kb3csVXNlciwkdWliTW9kYWwsJGludGVydmFsLHBkZkRlbGVnYXRlLCR0aW1lb3V0LCRzdGF0ZVBhcmFtcywkcm9vdFNjb3BlLCRleGNlcHRpb25IYW5kbGVyKSB7XG5cblx0ICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhbGVydCgnaGVyZSBJIGFtIGNhbGxlZCcpO1xuXG4gICAgICAvL2xvYWQgYWxsIGJveCBmaWxlc1xuXHRcdCAgICAkc2NvcGUuYWxsKCk7XG5cdCAgfTtcblxuXG5cdCAgLy8gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vICRzY29wZS5hbGwoKTtcbiAgIC8vICB9LCA4MDAwKTtcblxuXG5cdCAkc2NvcGUuYWxsID0gZnVuY3Rpb24oKXtcbiAgICAkc2NvcGUuZGF0YUxvYWRpbmcgPSB0cnVlO1xuXHRcdEZpbGVzLmdldEJveEZpbGVzKClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlcyl7XG5cblx0XHRcdFx0JHNjb3BlLmZpbGVzIFx0PVx0cmVzO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHR9KVxuICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzY29wZS5kYXRhTG9hZGluZyA9IGZhbHNlO1xuICAgICB9KTtcblx0IH07XG4gICRzY29wZS5maWxlVHlwZSAgPSBmdW5jdGlvbih0eXBlKSB7XG5cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwZGYnOlxuICAgICAgICAgIHJldHVybiAnaW1nL3BkZi5wbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmb2xkZXInOlxuICAgICAgICAgIHJldHVybiAnaW1nL3VuaXZlcnNhbF9mb2xkZXIucG5nJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZm9sZGVyKyc6XG4gICAgICAgICAgcmV0dXJuICdpbWcvQWRkX2ZvbGRlci5wbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwaHAnOlxuICAgICAgICAgIHJldHVybiAnaW1nL2NvZGUucG5nJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHh0JzpcbiAgICAgICAgcmV0dXJuICdpbWcvY29kZS5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG9jeCc6XG4gICAgICAgICAgcmV0dXJuICdpbWcvd29yZC5wbmcnO1xuICAgICAgICBjYXNlICdqcGcnOlxuICAgICAgICAgIHJldHVybiAnZmEgZmEtaW1hZ2UnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwbmcnOlxuICAgICAgICAgIHJldHVybiAnaW1nL3ZpZGVvLnBuZyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2pwZWcnOlxuICAgICAgICAgICAgcmV0dXJuICdpbWcvdW5pdmVyc2FsX2ZvbGRlci5wbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd6aXAnOlxuICAgICAgICAgcmV0dXJuICdpbWcvemlwLnBuZyc7XG4gICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdpbWcvdW5pdmVyc2FsX2ZvbGRlci5wbmcnO1xuICAgICAgfVxuICB9O1xuXG5cdCRzY29wZS5pbml0KCk7XG59XSk7XG5cbnN5bmMuZGlyZWN0aXZlKCdkcmFnZ2FibGUnLCBmdW5jdGlvbigpIHtcblxuICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgIHZhciBlbCA9IGVsZW1lbnRbMF07XG5cbiAgICAgICAgICAgIGVsLmRyYWdnYWJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ2RyYWdzdGFydCcsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2RyYWcgZXZlbnQgc3RhcnRlZCcpO1xuICAgICAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgdGhpcy5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZHJhZycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnZHJhZ2VuZCcsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZHJhZyBldmVudCByZWxlYXNlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG5cbnN5bmMuZGlyZWN0aXZlKCdkcm9wcGFibGUnLCBbJ3VzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbicsJ0ZpbGVzJyxmdW5jdGlvbih1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24sRmlsZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgZHJvcDogJyYnLFxuICAgICAgICAgICAgYmluOiAnPScvLyBwYXJlbnRcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIGFnYWluIHdlIG5lZWQgdGhlIG5hdGl2ZSBvYmplY3RcbiAgICAgICAgICAgIHZhciBlbCA9IGVsZW1lbnRbMF07XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAnZHJhZ292ZXInLFxuICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xuICAgICAgICAgICAgICAgICAgLy8gYWxsb3dzIHVzIHRvIGRyb3BcblxuICAgICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnb3ZlcicpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG4gICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICdkcmFnZW50ZXInLFxuICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ292ZXInKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgJ2RyYWdsZWF2ZScsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcicpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdkcm9wJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3BzIHNvbWUgYnJvd3NlcnMgZnJvbSByZWRpcmVjdGluZy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcicpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBiaW5JZCA9IHRoaXMuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgnVGV4dCcpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0l0ZW0gbm93IGlzOicraXRlbSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0aGUgcGFzc2VkIGRyb3AgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBzY29wZS5kcm9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKGl0ZW0uaWQsIGJpbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgICAgLy90aHJvdyBlcnJvciB0aGF0IGhhcHBlbiB3aGVuIGZpbGUgaXMgZHJvcHBlZCBpbiBpdCdzIG93biBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgIC8vZ2l2ZSBzb21lIGFsZXJ0IHRvIG5vdGlmeSB3aGF0IGhhcHBuZWRcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyggbmV3IEVycm9yKGUpKVxuICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbi5lcnJvcihcIkRyb3AgRmlsZSBvbiBmb2xkZXIgdG8gbW92ZSBpdCFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1dKTtcbnN5bmMuY29udHJvbGxlcignRHJhZ0Ryb3BDdHJsJywgWyckc2NvcGUnLCdGaWxlcycsJyRpbnRlcnZhbCcsZnVuY3Rpb24oJHNjb3BlLEZpbGVzLCRpbnRlcnZhbCkge1xuXG5cbiAgICAkc2NvcGUuaGFuZGxlRHJvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gMSlpZiBtb3ZlZCBvbmx5IHdoZW4gaXQgcmVhY2ggb24gZm9sZGVyIGFsbG93IG1vdmVcbiAgICAgIC8vIDIpdGFrZSB0aCBpZCBvZiBmaWxlIG1vdmVkIGFuZCB0YWtlIGlkIG9mIGZvbGRlciBtb3ZlIGZpbGUgaW50byBmb2xkZXJcblxuICAgICAgIC8vbW92ZSB0aGUgaXRlbSBpbnRvIHdoZXJlIGl0IGlzIGRyb3BlZFxuICAgICAgIC8vdGhlIGZpcnN0IHRoaW5nIGhlcmUgaXMgdG8gcmVjYWxjdWxhdGUgdGhlIGFycmF5IHRvIGtlZXAgdGhlIGFycmFuZ2VtZW50IGludGFjdFxuXG5cbiAgICB9XG59XSk7XG5cbnN5bmMuY29udHJvbGxlcigncHJldmlld0NvbnRyb2xsZXInLFxuIFtcblx0JyRzY29wZScsJ3BkZkRlbGVnYXRlJywnJHRpbWVvdXQnLCckc3RhdGVQYXJhbXMnLCckcm9vdFNjb3BlJywnJGV4Y2VwdGlvbkhhbmRsZXInLCdGaWxlcycsICdGaWxlU2F2ZXInLCdCbG9iJyxmdW5jdGlvbiAoXG5cdFx0JHNjb3BlLHBkZkRlbGVnYXRlLCR0aW1lb3V0LCRzdGF0ZVBhcmFtcywkcm9vdFNjb3BlLCRleGNlcHRpb25IYW5kbGVyLEZpbGVzLEZpbGVTYXZlciwgQmxvYikge1xuXG4gICAgICAvL2dldCBtaW1lIHR5cGUgb2YgYW55RmlsZSB0aGF0IGNvbWVzIGluIG15IGhvb2QhXG5cbiAgICAgIFxuXG4gICAgICBpZigkc3RhdGVQYXJhbXMucHJldmlldyAmJiAkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdwZGYnKXtcbiAgICAgICAgJHNjb3BlLnByZXZpZXdhYmxlID0gdHJ1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vYSB1c2VyIFN0cmltVXAgaXMgaW5qZWN0ZWQgaW4gYmVsbG93IHVybCBpdCBzaG91bGQgYmUgZHluYW1pYyBpbiBmdXR1cmUhXG4gICAgICAgICAgICAkc2NvcGUucGRmVXJsID0gJHJvb3RTY29wZS5lbmRQb2ludCsgJy9wcmV2aWV3LycrICRzdGF0ZVBhcmFtcy5wcmV2aWV3Kycvb2YvJysnU3RyaW1VcCc7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBkZkRlbGVnYXRlLiRnZXRCeUhhbmRsZSgnbXktcGRmLWNvbnRhaW5lcicpLnpvb21JbigwLjUpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICB0aHJvdyggbmV3IEVycm9yKGUpKVxuICAgICAgICB9XG4gICAgICB9ZWxzZSBpZigkc3RhdGVQYXJhbXMucHJldmlldyAmJiAkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdqcGcnfHwkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdwbmcnKXtcbiAgICAgICAgJHNjb3BlLmZpbGVfbmFtZSA9ICRzdGF0ZVBhcmFtcy5wcmV2aWV3O1xuICAgICAgICAkc2NvcGUucHJldmlld2FibGUgPSBmYWxzZTtcbiAgICAgICAgLy9hcyBieSBub3cgaW1hZ2VzIGFyZSBub3QgcmVhZHkgdG8gYmUgcHJldmlld2VkIHNvIHNldCBpdCB0byBmYWxzZSFwcm92aWRlIG9ubHkgb3B0aW9uIHRvIGRvd25sb2FkIHRoZW0hXG4gICAgICAgICAgLy8gJHNjb3BlLnByZXZpZXdhYmxlID0gZmFsc2U7XG4gICAgICAgICAgLy8gRmlsZXMuc2luZ2xlKCRzdGF0ZVBhcmFtcy5wcmV2aWV3KVxuICAgICAgICAgIC8vIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAvLyAgICRzY29wZS5pbWFnZVByZXZpZXcgPSByZXNwb25zZTtcbiAgICAgICAgICAvLyB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICAvL3NlbmQgYSBmaWxlbmFtZSB0byBhIGRvd25sb2FkIGJ1dHRvblxuICAgICAgICAkc2NvcGUuZmlsZV9uYW1lID0gJHN0YXRlUGFyYW1zLnByZXZpZXc7XG4gICAgICAgICRzY29wZS5wcmV2aWV3YWJsZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuZ29OZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmluY3JlbWVudCA9IDE7XG4gICAgICAgICAgcGRmRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdteS1wZGYtY29udGFpbmVyJykubmV4dCgkc2NvcGUuaW5jcmVtZW50KzEpO1xuICAgICAgfTtcbiAgICAgIC8vdGhpcyBvcHRpb24gZG93biBoZXJlIG9mIGRvd25sb2FkaW5nIGEgZmlsZSB3YXMgbmljZSBidXQgc3RpbGwgaGF2ZSBzb21lIGRyb3diYWNrXG5cbiAgICAgIC8vICRzY29wZS5kb3dubG9hZCA9IGZ1bmN0aW9uKGZpbGVfbmFtZSl7XG5cbiAgICAgIC8vICAgRmlsZXMuZG93bmxvYWRGaWxlKGZpbGVfbmFtZSlcbiAgICAgIC8vICAgLnRoZW4oZnVuY3Rpb24oZmlsZV93cml0ZW4pe1xuICAgICAgICAgICAgXG4gICAgICAvLyAgICAgRmlsZXMuZ2V0TWltZVR5cGUoJHN0YXRlUGFyYW1zLnByZXZpZXcpXG4gICAgICAvLyAgICAgICAudGhlbihmdW5jdGlvbihtaW1lVHlwZSl7XG5cbiAgICAgIC8vICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbZmlsZV93cml0ZW5dLCB7XG4gICAgICAvLyAgICAgICAgICAgICB0eXBlOiBtaW1lVHlwZSxcbiAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAvLyAgICAgICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgJHN0YXRlUGFyYW1zLnByZXZpZXcpO1xuXG4gICAgICAvLyAgICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAvLyAgICAgICB9KTtcblxuICAgICAgICAgIFxuXG4gICAgICAvLyAgIH0sZnVuY3Rpb24oZXJyKXtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH07XG4gICAgICAkc2NvcGUuZ29QcmV2ID0gZnVuY3Rpb24ocGFnZSl7XG4gICAgICAgICAgcGRmRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdteS1wZGYtY29udGFpbmVyJykucHJldigkc2NvcGUuaW5jcmVtZW50LTEpO1xuICAgICAgfTtcbn1dKTtcblxuc3luYy5kaXJlY3RpdmUoJ2ZpbGVEb3dubG9hZCcsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtbmctY2xpY2s9XCJkb3dubG9hZCgpXCI+PHNwYW4gY2xhc3M9XCJcIj48L3NwYW4+RG93bmxvYWQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdGltZW91dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9ncmVzcyA9IDA7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkaWFsb2dzLndhaXQoXCJQbGVhc2Ugd2FpdFwiLCBcIllvdXIgZG93bmxvYWQgc3RhcnRzIGluIGEgZmV3IHNlY29uZHMuXCIsICRzY29wZS5wcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGZha2VQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2RpYWxvZ3Mud2FpdC5jb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvcihyZXNwb25zZSwgdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpYWxvZ3MuZXJyb3IoXCJDb3VsZG4ndCBwcm9jZXNzIHlvdXIgZG93bmxvYWQhXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZha2VQcm9ncmVzcygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wcm9ncmVzcyA8IDk1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2dyZXNzICs9ICg5NiAtICRzY29wZS5wcm9ncmVzcykgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZGlhbG9ncy53YWl0LnByb2dyZXNzJywgeyAncHJvZ3Jlc3MnOiAkc2NvcGUucHJvZ3Jlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFrZVByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDI1MCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRvd25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICAkLmZpbGVEb3dubG9hZCgnaHR0cDovL3N5bmNtZS5jb206ODAwMC9hcGkvdjEvZmlsZXMvZG93bmxvYWQvcGhweEZubGhlRFZFNWo1bWNWRFgucG5nL29mL1N0cmltVXA/YWNjZXNzX3Rva2VuPUJjN0RXUzdLS1JMdHhtZGRVWkkxVDFsWnUySjFZaFI4T0xYR1dOWm4nLCB7IHByZXBhcmVDYWxsYmFjazogcHJlcGFyZSwgc3VjY2Vzc0NhbGxiYWNrOiBzdWNjZXNzLCBmYWlsQ2FsbGJhY2s6IGVycm9yIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbn1dKTtcblxuLyogZ2xvYmFsIHN5bmMgKi9cblwidXNlIHN0cmljdFwiO1xuc3luYy5jb250cm9sbGVyKCdQZW9wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCdQZW9wbGUnLGZ1bmN0aW9uICgkc2NvcGUsIFBlb3BsZSkge1xuXHRcdCRzY29wZS5pbml0ID0gZnVuY3Rpb24oKXtcblx0XHRcdCRzY29wZS5nZXRQZW9wbGVUb0ZvbGxvdygpO1xuXHRcdH1cblx0XHQkc2NvcGUuZ2V0UGVvcGxlVG9Gb2xsb3cgID0gZnVuY3Rpb24oKXtcblx0XHRcdFBlb3BsZS5nZXQoKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHRcblx0XHRcdFx0JHNjb3BlLnBlb3BsZSA9IHJlc3BvbnNlO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXG5cdFx0XHR9KVxuXHRcdH1cblx0XHQkc2NvcGUuJG9uKCdmb2xsb3dNZW1iZXInLGZ1bmN0aW9uKGV2ZW50LHBhcmFtcyl7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0UGVvcGxlLmZvbGxvdyhwYXJhbXMpXG5cdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRcdC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXHRcdFx0XHQkc2NvcGUuZ2V0UGVvcGxlVG9Gb2xsb3coKTtcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXHRcdCRzY29wZS5mb2xsb3cgPSBmdW5jdGlvbihpZCl7XG5cdFx0XHR2YXIgZm9sbG93ID17aWQ6IGlkLCBvcHRpb246J2FkZFBlb3BsZSd9O1xuXHRcdFx0JHNjb3BlLiRlbWl0KFwiZm9sbG93TWVtYmVyXCIsIGZvbGxvdyk7XG5cdFx0fVxuXHRcdCRzY29wZS5pbml0KCk7XG59XSk7XG5cbi8qIGdsb2JhbCBGaWxlcyAqL1xuLyogZ2xvYmFsIHN5bmMgKi9cbi8qIGdsb2JhbCAkc2NvcGUgKi9cbi8qIGdsb2JhbCBhbmd1bGFyICovXG4vKkF1dGhvciBNdXJhZ2lqaW1hbmEgRm91bmRlciAmIENFTyBvZiBzeW5jIGNhbGwgaGltIG9uIFN0cmltVXBAZ21haWwuY29tKi9cblxuc3luYy5zZXJ2aWNlKCdHcm91cCcsIFtcblx0JyRodHRwJyxcblx0JyRyb290U2NvcGUnLFxuXHQnJHEnLGZ1bmN0aW9uIEdyb3VwIChcblx0XHQkaHR0cCxcblx0XHQkcm9vdFNjb3BlLFxuXHRcdCRxKSB7XG5cdHRoaXMuY3JlYXRlIFx0XHQ9XHRmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgZGlmZmVyZWQgXHQ9XHQkcS5kZWZlcigpO1xuXHRcdCRodHRwLnBvc3QoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3VwcycsIG5hbWUpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHR0aGlzLmRlbGV0ZSBcdFx0PVx0ZnVuY3Rpb24oaWQpe1xuXHRcdHZhciBkaWZmZXJlZCBcdD1cdCRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZGVsZXRlKCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9ncm91cHMvJytpZClcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cdHRoaXMubXlHcm91cHNcdFx0PVx0ZnVuY3Rpb24oKXtcblx0XHR2YXIgZGlmZmVyZWQgXHQ9XHQkcS5kZWZlcigpO1xuXG5cdFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9ncm91cHMnKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZGlmZmVyZWQgc2xvdzonICsgZXJyb3IpO1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cblx0dGhpcy5hZGRQZW9wbGUgXHQ9XHRmdW5jdGlvbihtZW1iZXIpe1xuXHRcdHZhciBkaWZmZXJlZCBcdD1cdCRxLmRlZmVyKCk7XG5cdFx0JGh0dHAucHV0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9ncm91cHMvJytKU09OLnN0cmluZ2lmeShtZW1iZXIpKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKGVycm9yKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9O1xuXHR0aGlzLmFkZEZpbGVUb0dyb3VwID0gZnVuY3Rpb24oZmlsZU9iail7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5wdXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3Vwcy8nKyBKU09OLnN0cmluZ2lmeShmaWxlT2JqKSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnIpe1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHR0aGlzLnJlbW92ZVBlb3BsZSBcdD1cdGZ1bmN0aW9uKG1lbWJlcil7XG5cdFx0dmFyIGRpZmZlcmVkIFx0PVx0JHEuZGVmZXIoKTtcblx0XHQkaHR0cC5wdXQoJHJvb3RTY29wZS5lbmRQb2ludCArJy9hcGkvdjEvbWUvZ3JvdXBzLycrSlNPTi5zdHJpbmdpZnkobWVtYmVyKSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG4gIHRoaXMuc3VnZ2VzdFBlb3BsZSA9IGZ1bmN0aW9uKGlkKXtcblxuICAgIFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICBcdCRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvZ3JvdXBzLycgKyBpZClcbiAgICBcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlcyl7XG4gICAgXHRcdGRpZmZlcmVkLnJlc29sdmUocmVzKTtcbiAgICBcdH0pXG4gICAgXHQuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgXHRcdGRpZmZlcmVkLnJlamVjdChlcnIpO1xuICAgIFx0fSlcbiAgICBcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH1cblx0cmV0dXJuIHRoaXM7XG59XSk7XG5cbnN5bmMuY29udHJvbGxlcignR3JvdXBDb250cm9sbGVyJywgW1xuXHQnJHNjb3BlJyxcblx0J0dyb3VwJyxcblx0J1VzZXInLFxuXHQnRmlsZXMnLFxuXHQndXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uJyxcblx0ZnVuY3Rpb24gR3JvdXBDb250cm9sbGVyIChcblx0XHQkc2NvcGUsXG5cdFx0R3JvdXAsXG5cdFx0VXNlcixcblx0XHRGaWxlcyxcblx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb25cblx0KSB7XG5cdCRzY29wZS5pbml0IFx0PVx0ZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubXlHcm91cHMoKTtcblxuXHRcdCRzY29wZS5zdWdnZXN0ZWRQZW9wbGVUb0dyb3VwKCk7Ly9vZmNhdXNlIHRoZXkgYXJlIGFybGVhZHkgeW91ciBmcmllbmQgYnV0IG5vdCBwYXJ0aWNpcGFudCBpbiB5b3VyIHN0dWZmIHdvcmshXG5cdH1cblx0JHNjb3BlLnVzZXJJZCBcdFx0XHRcdD1cdGZ1bmN0aW9uKCl7XG5cdFx0VXNlci5faWQoKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdCRzY29wZS51c2VySWQgXHQ9XHRyZXNwb25zZTtcblx0XHR9LCBmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0fSk7XG5cdH07XG5cdCRzY29wZS5teUdyb3VwcyBcdFx0XHQ9XHRmdW5jdGlvbigpe1xuXHRcdEdyb3VwLm15R3JvdXBzKClcblx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHQkc2NvcGUuZ3JvdXAgXHQ9IHJlc3BvbnNlO1xuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKXtcblx0XHR9KTtcblx0fTtcblx0JHNjb3BlLnN1Z2dlc3RlZFBlb3BsZVRvR3JvdXAgXHQ9XHRmdW5jdGlvbihpZCl7XG5cdFx0Ly9jbGVhcmluZyBhbGwgdmlldyByZW5kZXJlZCBiZWZvcmVcblx0XHQkc2NvcGUuc2hvd0ZpbGVzPWZhbHNlO1xuXHRcdCRzY29wZS5zaG93R3JvdXA9ZmFsc2U7XG5cdFx0JHNjb3BlLnNob3dCb3g9ZmFsc2U7XG5cdFx0aWYoIWFuZ3VsYXIuaXNVbmRlZmluZWQoaWQpKXtcblx0XHRcdEdyb3VwLnN1Z2dlc3RQZW9wbGUoaWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdFx0XHRcdCRzY29wZS5mb2xsb3dlcnMgPSByZXNwb25zZTtcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXHQkc2NvcGUuJG9uKCdyZWZyZXNoR3JvdXAnLGZ1bmN0aW9uKCl7XG4gICAgICAgJHNjb3BlLmluaXQoKTtcbiAgXHR9KTtcblx0JHNjb3BlLiRvbignZ3JvdXBEZWxldGVkJywgZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHQkc2NvcGUubXlHcm91cHMoKTtcblx0fSk7XG5cdCRzY29wZS4kb24oJ2dyb3VwVG9iaW5kd2l0aCcsIGZ1bmN0aW9uIChldmVudCwgZ3JvdXBpZCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRzY29wZS5lbWl0dGVkID1ncm91cGlkO1xuICAgICAgICBpZiggJHNjb3BlLnNob3dGaWxlcyA9PSB0cnVlKXtcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZXM9ZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLnN1Z2dlc3RlZFBlb3BsZVRvR3JvdXAoZ3JvdXBpZCk7XG4gICAgICAgICRzY29wZS5hZGRQZW9wbGU9dHJ1ZTtcblx0fSk7XG5cdCRzY29wZS5nZXRHcm91cEZpbGVzID0gZnVuY3Rpb24ob3duZXIpe1xuICAgIEZpbGVzLmdldEdyb3VwRmlsZXMob3duZXIpXG5cdFx0LnRoZW4oZnVuY3Rpb24odHJlZSl7XG5cdFx0XHQkc2NvcGUuZmlsZXMgPSB0cmVlO1xuXHRcdFx0XHQvL25hdmlnYXRlIHRyb3VnaCB0cmVlIHJlc3BvbnNlIHdoaWNoIGlzIHJlcXVpcmUgbXVjaCBhdHRlbnRpb25cblx0XHRcdFx0JHNjb3BlLmdyb3Vwcz1bXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXBzJykgJiYgdHJlZVtpXVsnZ3JvdXBzJ10pIHtcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZ3JvdXBzLnB1c2godHJlZVtpXS5mcmllbmRzKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXBzJykpIHtcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZ3JvdXBzID0gZ3JvdXBzLmNvbmNhdCh0cmF2ZXJzZSh0cmVlW2ldLmdyb3VwcykpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdH0pO1xuICB9O1xuXHQkc2NvcGUuZ2V0Qm94RmlsZXMgPSBmdW5jdGlvbihncm91cElkKXtcblx0XHQkc2NvcGUuZW1pdHRlZCA9Z3JvdXBJZDtcbiAgXHRGaWxlcy5nZXRCb3hGaWxlcyhncm91cElkKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHRyZWUpe1xuXHRcdFx0JHNjb3BlLmZpbGVzID0gdHJlZTtcblx0XHRcdFx0Ly9uYXZpZ2F0ZSB0cm91Z2ggdHJlZSByZXNwb25zZSB3aGljaCBpcyByZXF1aXJlIG11Y2ggYXR0ZW50aW9uXG5cdFx0XHRcdCRzY29wZS5ncm91cHM9W107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKHRyZWVbaV0uaGFzT3duUHJvcGVydHkoJ2dyb3VwcycpICYmIHRyZWVbaV1bJ2dyb3VwcyddKSB7XG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmdyb3Vwcy5wdXNoKHRyZWVbaV0uZnJpZW5kcyk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRyZWVbaV0uaGFzT3duUHJvcGVydHkoJ2dyb3VwcycpKSB7XG5cdFx0XHRcdCAgICAgICAgICAgICRzY29wZS5ncm91cHMgPSBncm91cHMuY29uY2F0KHRyYXZlcnNlKHRyZWVbaV0uZ3JvdXBzKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHR9LCBmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0fSk7XG4gIH07XG4kc2NvcGUuJG9uKCdzaG93T3B0aW9ucycsZnVuY3Rpb24oXyxwYXJhbXMpe1xuICAgICBpZihwYXJhbXMub3duZXIgPT09XCJib3hcIil7XG5cdFx0XHQgJHNjb3BlLmFkZFBlb3BsZT1mYWxzZTtcblx0XHRcdCAkc2NvcGUuc2hvd0dyb3VwPWZhbHNlO1xuICAgICAgICRzY29wZS5zaG93Qm94PXRydWU7XG4gICAgICAgaWYoICRzY29wZS5hZGRQZW9wbGUgPT0gdHJ1ZSl7XG4gICAgICAgICAgICRzY29wZS5hZGRQZW9wbGU9ZmFsc2U7XG4gICAgICAgfVxuXHRcdFx0IC8vc2V0IGZpbGVzIHNjb3BlIHRvIHNob3cgZmlsZXMgb2YgYm94IGZpbGVzIGlzIHJlcGVhdGVkIGluIHZpZXcgZGlyZWN0aXZlXG4gICAgICAgJHNjb3BlLmdldEJveEZpbGVzIChwYXJhbXMuZ3JvdXBfaWQpO1xuXHRcdCB9ZWxzZSBpZiAocGFyYW1zLm93bmVyID09PSBcImdyb3VwXCIpIHtcblx0XHRcdCAkc2NvcGUuc2hvd0JveD1mYWxzZTtcblx0XHRcdCAkc2NvcGUuYWRkUGVvcGxlPWZhbHNlO1xuXHRcdFx0ICRzY29wZS5zaG93R3JvdXA9dHJ1ZTtcblx0XHRcdCBpZiggJHNjb3BlLmFkZFBlb3BsZSA9PSB0cnVlKXtcblx0XHRcdFx0XHQgJHNjb3BlLmFkZFBlb3BsZT1mYWxzZTtcblx0XHRcdCB9XG5cdFx0XHQgLy9jaGFuZ2UgZmlsZXMgdG8gbmV3IHNjb3BlIGZpbGVzIHRvIHNob3cgZmlsZXMgb2YgZ3JvdXBzICBpcyByZXBlYXRlZCBpbiB2aWV3IGRpcmVjdGl2ZVxuXHRcdFx0ICRzY29wZS5nZXRHcm91cEZpbGVzIChwYXJhbXMuZ3JvdXBfaWQpO1xuXHRcdCB9XG59KTtcbiRzY29wZS5pbml0KCk7XG59XSk7XG5zeW5jLmRpcmVjdGl2ZSgnbXlHcm91cHMnLCBbXG5cdCdHcm91cCcsXG5cdCdSZXBvcnQnLFxuXHQndXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uJyxcblx0ZnVuY3Rpb24gbXlHcm91cHMgKFxuXHRcdEdyb3VwLFxuXHRcdFJlcG9ydCxcblx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24sXG5cdFx0Tm90aWZpY2F0aW9uKSB7XG5cdHJldHVybiB7XG5cdFx0cHJpb3JpdHk6IDEwLFxuXHRcdHRlbXBsYXRlVXJsOiAnQXBwL3NjcmlwdHMvanMvZGlyZWN0aXZlcy9ncm91cHMuaHRtbCcsXG5cdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRzY29wZToge1xuXHRcdFx0ICBpZDogJz11c2VySWQnLFxuICAgICAgICAgIGdyb3VwczogJz0nLFxuICAgICAgICAgIGZvbGxvd2VyczogJz0nLFxuICAgICAgICAgIGVtaXR0ZWQ6Jz0nLFxuICAgICAgICAgIHNob3dQZW9wbGU6Jz0nLFxuICAgICAgICAgIHNob3dHcm91cCAgIDogICc9JyxcbiAgICAgICAgICBmaWxlcyAgIDogICc9Jyxcblx0ICBcdFx0XHRzaG93Qm94OiAgJz0nXG5cdFx0fSxcblx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHtcblx0XHRcdHNjb3BlLmRlbGV0ZUdyb3VwID0gZnVuY3Rpb24oaWQpe1xuXHRcdFx0XHRHcm91cC5kZWxldGUoaWQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRcdFx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uaW5mbyhcIkdyb3VwIGRlbGV0ZWRcIik7XG5cdFx0XHRcdFx0IFx0c2NvcGUuJGVtaXQoXCJncm91cERlbGV0ZWRcIiwgJ2dyb3VwIGRlbGV0ZWQnKTtcblx0XHRcdFx0fSwgZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0XHRSZXBvcnQuc2VuZCgnZGVsZXRlIGdyb3VwIGVycm9yOicrZXJyKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCl7fSwgZnVuY3Rpb24oKXt9KTtcblx0XHRcdFx0fSlcblx0XHRcdH07XG4gICAgICBzY29wZS5jcmVhdGVHcm91cFx0PVx0ZnVuY3Rpb24obmFtZSl7XG4gICAgICAgICAgR3JvdXAuY3JlYXRlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJDcmVhdGVkIG5ldyBHcm91cFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgncmVmcmVzaEdyb3VwJyxudWxsKTtcbiAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcblx0XHRcdHNjb3BlLmluaXRBZGRQZW9wbGUgPSBmdW5jdGlvbihncm91cGlkKXtcblx0XHRcdFx0c2NvcGUuJGVtaXQoXCJncm91cFRvYmluZHdpdGhcIiwgZ3JvdXBpZCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRzY29wZS5hZGRQZW9wbGUgPSBmdW5jdGlvbihwYXJhbXMpe1xuXHRcdFx0XHR2YXIgbmV3UGFyYW1zID17XG5cdFx0XHRcdFx0J29wdGlvbic6J2FkZE1lbWJlcicsXG5cdFx0XHRcdFx0J3VzZXJJZCc6cGFyYW1zLnVzZXJJZCxcblx0XHRcdFx0XHQnZ3JvdXBJZCc6cGFyYW1zLmdyb3VwSWRcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHBhcmFtcykpe1xuXHRcdFx0XHRcdC8vd29uJ3QgaGFwcGVuIW9yIGlmIHRpIGhhcHBlbiB3ZSBxdWl0XG5cdFx0XHRcdH1lbHNle1xuXG5cdFx0XHRcdFx0R3JvdXAuYWRkUGVvcGxlKG5ld1BhcmFtcylcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0XHRcdFx0Ly9yZWZyZXNoIGdyb3VwIHdpdGggbmV3IG1lbWJlciBzdGF0dXNcblx0XHRcdFx0XHRcdFx0dXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJBZGRlZCBNZW1iZXIgaW4gZ3JvdXAuXCIpO1xuICAgICAgICAgICAgICBzY29wZS5pbml0QWRkUGVvcGxlKHBhcmFtcy5ncm91cElkKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3JlZnJlc2hHcm91cCcsJycpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdFx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycm9yLHN0YXR1cyl7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2NvcGUucmVtb3ZlUGVvcGxlID0gZnVuY3Rpb24ocGFyYW1zKXtcblxuXHRcdFx0XHR2YXIgbmV3UGFyYW1zID17XG5cdFx0XHRcdFx0J29wdGlvbic6J3JlbW92ZU1lbWJlcicsXG5cdFx0XHRcdFx0J3VzZXJJZCc6cGFyYW1zLnVzZXJJZCxcblx0XHRcdFx0XHQnZ3JvdXBJZCc6cGFyYW1zLmdyb3VwSWRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQocGFyYW1zKSl7XG5cdFx0XHRcdFx0Ly93b24ndCBoYXBwZW4hb3IgaWYgdGkgaGFwcGVuIHdlIHF1aXQgdG9vIGJhZCBoaWVyYWNoeSFcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdEdyb3VwLnJlbW92ZVBlb3BsZShuZXdQYXJhbXMpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKXtcblx0XHRcdFx0XHRcdFx0dXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLmluZm8oXCJSZW1vdmVkIE1lbWJlciBpbiBncm91cC5cIik7XG5cdCAgICAgICAgICAgIHNjb3BlLmluaXRBZGRQZW9wbGUocGFyYW1zLmdyb3VwSWQpO1xuXHQgICAgICAgICAgICBzY29wZS4kZW1pdCgncmVmcmVzaEdyb3VwJywnJyk7XG4gICAgICAgICAgICBcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3Isc3RhdHVzKXtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0c2NvcGUucmVtb3ZlRnJvbUdyb3VwID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0Y29uc29sZS5sb2coJ3dlIGNhbiByZW1vdmUgZmlsZSBpbiBncm91cCcpO1xuXHRcdFx0fVxuXHRcdFx0c2NvcGUuYWRkRmlsZVRvR3JvdXAgPSBmdW5jdGlvbihwYXJhbXMpe1xuXHRcdFx0XHR2YXIgZmlsZU9iaiA9e1xuXHRcdFx0XHRcdCdvcHRpb24nOidhZGRGaWxlcycsXG5cdFx0XHRcdFx0J2ZpbGVJZCc6cGFyYW1zLmZpbGVJZCxcblx0XHRcdFx0XHQnZ3JvdXBJZCc6cGFyYW1zLmdyb3VwSWRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdEdyb3VwLmFkZEZpbGVUb0dyb3VwKGZpbGVPYmopXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdFx0XHRcdFx0Ly8gdXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJBIGZpbGUgaXMgYWRkZWQgaW4gZ3JvdXBcIik7XG5cdFx0XHRcdH0sZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24ud2FybihcIlNvbWUgZXJyb3Igb2NjdXJlZCBkdXJpbmcgYWRkaW5nIGZpbGVcIik7XG5cdFx0XHRcdH0pXG5cblx0XHRcdH1cblx0XHRcdHNjb3BlLmZpbGVzSW5Cb3ggPSBmdW5jdGlvbihncm91cGlkKXtcblx0XHRcdFx0dmFyIHBhcmFtcyA9eydncm91cF9pZCc6Z3JvdXBpZCwnb3duZXInOidib3gnfTtcblx0XHRcdFx0c2NvcGUuJGVtaXQoJ3Nob3dPcHRpb25zJyxwYXJhbXMpO1xuXG5cdFx0XHR9XG5cdFx0XHRzY29wZS5maWxlc0luR3JvdXAgPSBmdW5jdGlvbihncm91cGlkKXtcblxuXHRcdFx0XHR2YXIgcGFyYW1zID17J2dyb3VwX2lkJzpncm91cGlkLCdvd25lcic6J2dyb3VwJ307XG5cdFx0XHRcdHNjb3BlLiRlbWl0KCdzaG93T3B0aW9ucycscGFyYW1zKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59XSk7XG5cbnN5bmMuc2VydmljZSgnUmVwb3J0JywgW2Z1bmN0aW9uIFJlcG9ydCAoJGh0dHAsJHEsJHJvb3RTY29wZSkge1xuXHR0aGlzLnNlbmQgPSBmdW5jdGlvbihpc3N1ZSl7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5wb3N0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9pc3N1ZXMnLCBpc3N1ZSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXMpe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXMpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycikge1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHRyZXR1cm4gdGhpcztcbn1dKTtcblxuLyogZ2xvYmFsIHN5bmMgKi9cbnN5bmMuc2VydmljZSgnU2V0dGluZ3MnLCBbJyRodHRwJywnJHJvb3RTY29wZScsJyRxJyxmdW5jdGlvbiAoJGh0dHAsJHJvb3RTY29wZSwkcSkge1xuXHR0aGlzLmN1cnJlbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL3NldHRpbmdzJylcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3ApO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnIpO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XSk7XG5cbnN5bmMuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyJywgWyckc2NvcGUnLCdTZXR0aW5ncycsJyRsb2cnLCBmdW5jdGlvbiAoJHNjb3BlLFNldHRpbmdzLCRsb2cpIHtcblx0JHNjb3BlLmluaXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUubG9hZEN1cnJlbnRTZXR0aW5ncygpO1xuICAgIH1cbiAgICAgJHNjb3BlLmxvYWRDdXJyZW50U2V0dGluZ3MgPSBmdW5jdGlvbigpe1xuICAgICAgICAgU2V0dGluZ3MuY3VycmVudCgpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzID0gcmVzcDtcbiAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICAgJGxvZy5pbmZvKCdlcnJyb3IgcHJldmVudCBwcm9taXNlIHRvIGJlIGZ1bGxmaWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgfVxuICAgICAkc2NvcGUuaW5pdCgpO1xufV0pO1xuXG4vKiBnbG9iYWwgc3luYyAqL1xuc3luYy5jb250cm9sbGVyKCdTaGFyZUNvbnRyb2xsZXInLCBbXG5cdCckc2NvcGUnLFxuXHQnJHJvb3RTY29wZScsXG5cdCckcm91dGVQYXJhbXMnLFxuXHQnJHJvdXRlJyxcblx0JyRsb2cnLFxuXHQnJHVpYk1vZGFsJyxcblx0J1NoYXJlJyxcblx0J1VzZXInLFxuXHRmdW5jdGlvbiAoXG5cdFx0JHNjb3BlLFxuXHRcdCRyb290U2NvcGUsXG5cdFx0JHJvdXRlUGFyYW1zLFxuXHRcdCRyb3V0ZSxcblx0XHQkbG9nLFxuXHRcdCR1aWJNb2RhbCxcblx0XHRTaGFyZSxcblx0XHRVc2VyXG5cdCkgXG57XG5cblx0JHNjb3BlLnNoYXJlID0gZnVuY3Rpb24oZmlsZV9pZCl7XG5cdFx0Ly8gYWxlcnQoJ2hlcmUnKTtcblx0XHRjb25zb2xlLmxvZyhmaWxlX2lkKTtcblx0fTtcbn1cbl0pO1xuXG4vKiBnbG9iYWwgc3luYyAqL1xuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuXG4gICAgc3luYy5jb250cm9sbGVyKCdVcGxvYWRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnRmlsZVVwbG9hZGVyJywnJHJvb3RTY29wZScsJ0ZpbGVzJywgZnVuY3Rpb24oJHNjb3BlLCBGaWxlVXBsb2FkZXIsJHJvb3RTY29wZSxGaWxlcykge1xuICAgICAgICB2YXIgdXBsb2FkZXIgPSAkc2NvcGUudXBsb2FkZXIgPSBuZXcgRmlsZVVwbG9hZGVyKHtcbiAgICAgICAgICAgIHVybDogJHJvb3RTY29wZS5lbmRQb2ludCsnL2FwaS92MS91cGxvYWQnXG4gICAgICAgIH0pO1xuICAgICAgICAvL0ZJTFRFUlNcbiAgICAgICAgdXBsb2FkZXIuZmlsdGVycy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6ICdjdXN0b21GaWx0ZXInLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uKGl0ZW0gLyp7RmlsZXxGaWxlTGlrZU9iamVjdH0qLywgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aCA8IDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy9DQUxMQkFDS1NcbiAgICAgICAgdXBsb2FkZXIub25XaGVuQWRkaW5nRmlsZUZhaWxlZCA9IGZ1bmN0aW9uKGl0ZW0gLyp7RmlsZXxGaWxlTGlrZU9iamVjdH0qLywgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uV2hlbkFkZGluZ0ZpbGVGYWlsZWQnLCBpdGVtLCBmaWx0ZXIsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vbkFmdGVyQWRkaW5nRmlsZSA9IGZ1bmN0aW9uKGZpbGVJdGVtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uQWZ0ZXJBZGRpbmdGaWxlJywgZmlsZUl0ZW0pO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vbkFmdGVyQWRkaW5nQWxsID0gZnVuY3Rpb24oYWRkZWRGaWxlSXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25BZnRlckFkZGluZ0FsbCcsIGFkZGVkRmlsZUl0ZW1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25CZWZvcmVVcGxvYWRJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvbkJlZm9yZVVwbG9hZEl0ZW0nLCBpdGVtKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25Qcm9ncmVzc0l0ZW0gPSBmdW5jdGlvbihmaWxlSXRlbSwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25Qcm9ncmVzc0l0ZW0nLCBmaWxlSXRlbSwgcHJvZ3Jlc3MpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vblByb2dyZXNzQWxsID0gZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25Qcm9ncmVzc0FsbCcsIHByb2dyZXNzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25TdWNjZXNzSXRlbSA9IGZ1bmN0aW9uKGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uU3VjY2Vzc0l0ZW0nLCBmaWxlSXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG4gICAgICAgIH07XG4gICAgICAgIHVwbG9hZGVyLm9uRXJyb3JJdGVtID0gZnVuY3Rpb24oZmlsZUl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25FcnJvckl0ZW0nLCBmaWxlSXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycyk7XG4gICAgICAgIH07XG4gICAgICAgIHVwbG9hZGVyLm9uQ2FuY2VsSXRlbSA9IGZ1bmN0aW9uKGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uQ2FuY2VsSXRlbScsIGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25Db21wbGV0ZUl0ZW0gPSBmdW5jdGlvbihmaWxlSXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvbkNvbXBsZXRlSXRlbScsIGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25Db21wbGV0ZUFsbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIEZpbGVzLmdldEJveEZpbGVzKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgICAgICAgICRzY29wZS5maWxlcyBcdD1cdHJlcztcblxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25Db21wbGV0ZUFsbCcpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmluZm8oJ3VwbG9hZGVyJywgdXBsb2FkZXIpO1xuICAgIH1dKTtcblxuc3luYy5zZXJ2aWNlKCd1cmxTaG9ydGVuZXInLFtmdW5jdGlvbigpe1xuICB0aGlzLm1ha2VTaG9ydCA9IGZ1bmN0aW9uKGxvbmdVcmwpe1xuICAgIHJldHVybiBsb25nVXJsO1xuICB9O1xuICAvLyB0aGlzLm1ha2VTaG9ydCA9IGZ1bmN0aW9uKGxvbmdVcmwpXG4gIC8vIHtcbiAgLy8gICAvLyAgdmFyIGxvbmdVcmw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb25ndXJsXCIpLnZhbHVlO1xuICAvLyAgICAgdmFyIHJlcXVlc3QgPSBnYXBpLmNsaWVudC51cmxzaG9ydGVuZXIudXJsLmluc2VydCh7XG4gIC8vICAgICAncmVzb3VyY2UnOiB7XG4gIC8vICAgICAgICdsb25nVXJsJzogbG9uZ1VybFxuICAvLyBcdH1cbiAgLy8gICAgIH0pO1xuICAvLyAgICAgcmVxdWVzdC5leGVjdXRlKGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAvLyBcdHtcbiAgLy9cbiAgLy8gXHRcdGlmKHJlc3BvbnNlLmlkICE9IG51bGwpXG4gIC8vIFx0XHR7XG4gIC8vIFx0XHRcdHN0ciA9XCI8Yj5Mb25nIFVSTDo8L2I+XCIrbG9uZ1VybCtcIjxicj5cIjtcbiAgLy8gXHRcdFx0c3RyICs9XCI8Yj55b3VyIEZpbGUgaXM6PC9iPiA8YSBocmVmPSdcIityZXNwb25zZS5pZCtcIic+XCIrcmVzcG9uc2UuaWQrXCI8L2E+PGJyPlwiO1xuICAvLyBcdFx0XHRyZXR1cm4gc3RyO1xuICAvLyBcdFx0fVxuICAvLyBcdFx0ZWxzZVxuICAvLyBcdFx0e1xuICAvLyBcdFx0XHRjb25zb2xlLmxvZyhcImVycm9yOiB1bmFibGUgdG8gY3JlYXRlIHNob3J0IHVybFwiKTtcbiAgLy8gXHRcdH1cbiAgLy9cbiAgLy8gICAgIH0pO1xuICAvLyAgfVxuICAvL1xuICAvLyB0aGlzLmdldFNob3J0SW5mbyA9IGZ1bmN0aW9uKClcbiAgLy8gIHtcbiAgLy8gICAgICB2YXIgc2hvcnRVcmw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG9ydHVybFwiKS52YWx1ZTtcbiAgLy9cbiAgLy8gICAgICB2YXIgcmVxdWVzdCA9IGdhcGkuY2xpZW50LnVybHNob3J0ZW5lci51cmwuZ2V0KHtcbiAgLy8gICAgICAgICdzaG9ydFVybCc6IHNob3J0VXJsLFxuICAvLyAgXHQgICAgICdwcm9qZWN0aW9uJzonRlVMTCdcbiAgLy8gICAgICB9KTtcbiAgLy8gICAgICByZXF1ZXN0LmV4ZWN1dGUoZnVuY3Rpb24ocmVzcG9uc2UpXG4gIC8vICBcdHtcbiAgLy8gIFx0XHRpZihyZXNwb25zZS5sb25nVXJsIT0gbnVsbClcbiAgLy8gIFx0XHR7XG4gIC8vICBcdFx0XHRzdHIgPVwiPGI+TG9uZyBVUkw6PC9iPlwiK3Jlc3BvbnNlLmxvbmdVcmwrXCI8YnI+XCI7XG4gIC8vICBcdFx0XHRzdHIgKz1cIjxiPkNyZWF0ZSBPbjo8L2I+XCIrcmVzcG9uc2UuY3JlYXRlZCtcIjxicj5cIjtcbiAgLy8gIFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmlubmVySFRNTCA9IHN0cjtcbiAgLy8gIFx0XHR9XG4gIC8vICBcdFx0ZWxzZVxuICAvLyAgXHRcdHtcbiAgLy8gIFx0XHRcdGNvbnNvbGUubG9nKFwiZXJyb3I6IHVuYWJsZSB0byBnZXQgVVJMIGluZm9ybWF0aW9uXCIpO1xuICAvLyAgXHRcdH1cbiAgLy9cbiAgLy8gICAgICB9KTtcbiAgLy9cbiAgLy8gIH1cbiAgLy8gIGZ1bmN0aW9uIGxvYWQoKVxuICAvLyAge1xuICAvLyAgXHRnYXBpLmNsaWVudC5zZXRBcGlLZXkoJ0FJemFTeURTbjd6N1YxZjZIM3lYcmdBbGdWR3c1MmRTRW1xQUxJYycpOyAvL2dldCB5b3VyIG93bm4gQnJvd3NlciBBUEkgS0VZXG4gIC8vICBcdGdhcGkuY2xpZW50LmxvYWQoJ3VybHNob3J0ZW5lcicsICd2MScsZnVuY3Rpb24oKXt9KTtcbiAgLy8gIH1cbiAgLy8gIHdpbmRvdy5vbmxvYWQgPSBsb2FkO1xufV0pO1xuXG4gIC8vXG4gIC8vIChmdW5jdGlvbihpLHMsbyxnLHIsYSxtKXtpWydHb29nbGVBbmFseXRpY3NPYmplY3QnXT1yO2lbcl09aVtyXXx8ZnVuY3Rpb24oKXtcbiAgLy8gKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksXG4gIC8vIG09cy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTthLmFzeW5jPTE7YS5zcmM9ZzttLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbSlcbiAgLy8gfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCcvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCdnYScpO1xuICAvL1xuICAvLyBnYSgnY3JlYXRlJywgJ1VBLTY0OTU1ODY2LTInLCAnYXV0bycpO1xuICAvLyBnYSgnc2VuZCcsICdwYWdldmlldycpO1xuXG4gICAgICAgIC8vdGhpcyBmdW5jdGlvbiBjYW4gcmVtb3ZlIGFuIGFycmF5IGVsZW1lbnQuXG4gICAgICAgICAgICBBcnJheS5yZW1vdmUgPSBmdW5jdGlvbihhcnJheSwgZnJvbSwgdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdCA9IGFycmF5LnNsaWNlKCh0byB8fCBmcm9tKSArIDEgfHwgYXJyYXkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBhcnJheS5sZW5ndGggPSBmcm9tIDwgMCA/IGFycmF5Lmxlbmd0aCArIGZyb20gOiBmcm9tO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5wdXNoLmFwcGx5KGFycmF5LCByZXN0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdG90YWxfcG9wdXBzID0gMDtcbiAgICAgICAgICAgIHZhciBwb3B1cHMgPSBbXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlX3BvcHVwKGlkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaWlpID0gMDsgaWlpIDwgcG9wdXBzLmxlbmd0aDsgaWlpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZihpZCA9PSBwb3B1cHNbaWlpXSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucmVtb3ZlKHBvcHVwcywgaWlpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlX3BvcHVwcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZGlzcGxheXMgdGhlIHBvcHVwcy4gRGlzcGxheXMgYmFzZWQgb24gdGhlIG1heGltdW0gbnVtYmVyIG9mIHBvcHVwcyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlfcG9wdXBzKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSAyMjA7XG5cbiAgICAgICAgICAgICAgICB2YXIgaWlpID0gMDtcbiAgICAgICAgICAgICAgICBmb3IoaWlpOyBpaWkgPCB0b3RhbF9wb3B1cHM7IGlpaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocG9wdXBzW2lpaV0gIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcHVwc1tpaWldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmlnaHQgPSByaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gcmlnaHQgKyAzMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGpqaiA9IGlpaTsgampqIDwgcG9wdXBzLmxlbmd0aDsgampqKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcHVwc1tqampdKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgdGhpcyBzY3JpcHQgaGFzIGJlZW4gYWRkZWQgYnkgbWUgZm9yIG15IGN1c3RvbWVcblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheFNldHVwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdYLUNTUkYtVE9LRU4nOiAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2hhdFwiKS5rZXlwcmVzcyhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2dC53aGljaCA9PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwid2UgYXJlIGxpc3RuaW5nIHRvIGVudGVyIGV2ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXVzZXJuYW1lID0gJCgnI3Nob3V0X3VzZXJuYW1lJykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWVzc2FnZSA9ICQoJyNzaG91dF9tZXNzYWdlJykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHsndXNlcm5hbWUnOml1c2VybmFtZSwgJ21lc3NhZ2UnOmltZXNzYWdlfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlbmQgZGF0YSB0byBcInNob3V0LnBocFwiIHVzaW5nIGpRdWVyeSAkLnBvc3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QoJ3Nob3V0LnBocCcsIHBvc3RfZGF0YSwgZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGVuZCBkYXRhIGludG8gbWVzc2FnZWJveCB3aXRoIGpRdWVyeSBmYWRlIGVmZmVjdCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZGF0YSkuaGlkZSgpLmFwcGVuZFRvKCcubWVzc2FnZV9ib3gnKS5mYWRlSW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9rZWVwIHNjcm9sbGVkIHRvIGJvdHRvbSBvZiBjaGF0IVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbHRvaCA9ICQoJy5tZXNzYWdlX2JveCcpWzBdLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlX2JveCcpLnNjcm9sbFRvcChzY3JvbGx0b2gpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IHZhbHVlIG9mIG1lc3NhZ2UgYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2hvdXRfbWVzc2FnZScpLnZhbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0IEhUVFAgc2VydmVyIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KGVyci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvL3RvZ2dsZSBoaWRlL3Nob3cgc2hvdXQgYm94XG4gICAgICAgICAgICAgICAgICAgICQoXCIuY2xvc2VfYnRuXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBDU1MgZGlzcGxheSBzdGF0ZSBvZiAudG9nZ2xlX2NoYXQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZVN0YXRlID0gJCgnLnRvZ2dsZV9jaGF0JykuY3NzKCdkaXNwbGF5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9nZ2xlIHNob3cvaGlkZSBjaGF0IGJveFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnRvZ2dsZV9jaGF0Jykuc2xpZGVUb2dnbGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy91c2UgdG9nZ2xlU3RhdGUgdmFyIHRvIGNoYW5nZSBjbG9zZS9vcGVuIGljb24gaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvZ2dsZVN0YXRlID09ICdibG9jaycpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5oZWFkZXIgZGl2XCIpLmF0dHIoJ2NsYXNzJywgJ29wZW5fYnRuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmhlYWRlciBkaXZcIikuYXR0cignY2xhc3MnLCAnY2xvc2VfYnRuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvKmRvbmUgYWRkaW5nIG15IGN1c3RvbSBzY3JpcHRzKi9cbiAgICAgICAgICAgIC8vY3JlYXRlcyBtYXJrdXAgZm9yIGEgbmV3IHBvcHVwLiBBZGRzIHRoZSBpZCB0byBwb3B1cHMgYXJyYXkuXG4gICAgICAgICAgICBmdW5jdGlvbiByZWdpc3Rlcl9wb3B1cChpZCwgbmFtZSlcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWlpID0gMDsgaWlpIDwgcG9wdXBzLmxlbmd0aDsgaWlpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvL2FscmVhZHkgcmVnaXN0ZXJlZC4gQnJpbmcgaXQgdG8gZnJvbnQuXG4gICAgICAgICAgICAgICAgICAgIGlmKGlkID09IHBvcHVwc1tpaWldKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5yZW1vdmUocG9wdXBzLCBpaWkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cHMudW5zaGlmdChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZV9wb3B1cHMoKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudD0nPGRpdiBjbGFzcz1cInBvcHVwLWJveCBjaGF0LXBvcHVwXCIgaWQ9XCInKyBpZCArJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPWVsZW1lbnQgKyAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQ6I2RkZDtjb2xvcjojZmZmO1wiIGNsYXNzPVwiaGVhZGVyXCI+R3JvdXA8ZGl2IGNsYXNzPVwiY2xvc2VfYnRuXCI+Jm5ic3A7PC9kaXY+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ZWxlbWVudCArICcgPGRpdiBjbGFzcz1cInRvZ2dsZV9jaGF0XCI+JztcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ZWxlbWVudCArICc8ZGl2IGNsYXNzPVwibWVzc2FnZV9ib3hcIj48L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID1lbGVtZW50ICsgJzx0ZXh0YXJlYSBzdHlsZT1cImJhY2tncm91bmQ6d2hpdGU7bWFyZ2luLXRvcDoxODBweDtcIiBpZD1cImNoYXRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHJvd3M9XCIzXCIgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiPjwvdGV4dGFyZWE+JztcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCA9ZWxlbWVudCArXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgY2xhc3M9XCJwb3B1cC1oZWFkLXJpZ2h0XCI+PGEgaHJlZj1cImphdmFzY3JpcHQ6Y2xvc2VfcG9wdXAoXFwnJysgaWQgKydcXCcpO1wiPiYjMTAwMDU7PC9hPjwvZGl2Pic7XG4gICAgICAgICAgICAgICAgLy8gdmFyIGVsZW1lbnQgPSAnPGRpdiBjbGFzcz1cInBvcHVwLWJveCBjaGF0LXBvcHVwXCIgaWQ9XCInKyBpZCArJ1wiPic7XG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCA9IGVsZW1lbnQgKyAnPGRpdiBjbGFzcz1cInBvcHVwLWhlYWRcIj4nO1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgY2xhc3M9XCJwb3B1cC1oZWFkLWxlZnRcIj4nKyBuYW1lICsnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50ID0gZWxlbWVudCArICc8ZGl2IGNsYXNzPVwicG9wdXAtaGVhZC1yaWdodFwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OmNsb3NlX3BvcHVwKFxcJycrIGlkICsnXFwnKTtcIj4mIzEwMDA1OzwvYT48L2Rpdj4nO1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgPSBlbGVtZW50ICsgJzxkaXYgc3R5bGU9XCJjbGVhcjogYm90aDtcIj48L2Rpdj48L2Rpdj48cCBvbmNsaWNrPVwidCgpXCIgaWQ9XCJtXCI+PC9wPjxkaXYgY2xhc3M9XCJwb3B1cC1tZXNzYWdlc1wiPjx0ZXh0YXJlYSAgY2xhc3M9XCJ0b3BcIj48L3RleHRhcmVhPjwvZGl2PjwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uaW5uZXJIVE1MID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLmlubmVySFRNTCArIGVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBwb3B1cHMudW5zaGlmdChpZCk7XG5cbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVfcG9wdXBzKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9jYWxjdWxhdGUgdGhlIHRvdGFsIG51bWJlciBvZiBwb3B1cHMgc3VpdGFibGUgYW5kIHRoZW4gcG9wdWxhdGUgdGhlIHRvYXRhbF9wb3B1cHMgdmFyaWFibGUuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVfcG9wdXBzKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICBpZih3aWR0aCA8IDU0MClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX3BvcHVwcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gd2lkdGggLSAyMDA7XG4gICAgICAgICAgICAgICAgICAgIC8vMzIwIGlzIHdpZHRoIG9mIGEgc2luZ2xlIHBvcHVwIGJveFxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9wb3B1cHMgPSBwYXJzZUludCh3aWR0aC8zMjApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpc3BsYXlfcG9wdXBzKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9yZWNhbGN1bGF0ZSB3aGVuIHdpbmRvdyBpcyBsb2FkZWQgYW5kIGFsc28gd2hlbiB3aW5kb3cgaXMgcmVzaXplZC5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGNhbGN1bGF0ZV9wb3B1cHMpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNhbGN1bGF0ZV9wb3B1cHMpO1xuLy9BdXRob3IgTXVyYWdpamltYW5hIFJpY2hhcmQgc3RyaW11cEBnbWFpbC5jb20gYmVhc3RhcjQ1N0BnbWFpbC5jb21cblxuICBzeW5jLmNvbnRyb2xsZXIoJ01lc3NhZ2VDb250cm9sbGVyJywgW1wiJGh0dHBcIiwgXCIkc2NvcGVcIiwgXCIkcVwiLCBcIiRyb290U2NvcGVcIiwgZnVuY3Rpb24gKCRodHRwLCRzY29wZSwkcSwkcm9vdFNjb3BlKSB7XG4gICAgICAgJC5hamF4U2V0dXAoe1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdYLUNTUkYtVE9LRU4nOiAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgXG4gICAgICAgICAkc2NvcGUubmFtZT1cIk11cmFnaWppbWFuYVwiO1xuICAgICAgICAgdmFyIHBvc3RzPSRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvcG9zdCcpLFxuICAgICAgICAgICAgIGluc3RpdHV0aW9ucz0kaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL3Bvc3QnKTtcblxuICAgICAgICAgICRxLmFsbChbcG9zdHMsaW5zdGl0dXRpb25zXSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSBbXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXN1bHQsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHRtcC5wdXNoKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odG1wUmVzdWx0KSB7XG4gICAgICAgICAgICAgIC8vIHBvc3RzPXRtcFJlc3VsdDtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYW5ndWxhci50b0pzb24odG1wUmVzdWx0WzBdLCB0cnVlKSk7XG4gICAgICAgICAgICAkc2NvcGUucG9zdHMgPSB0bXBSZXN1bHRbMF07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAkKCcucG9zdC1pbicpLmF0d2hvKHtcbiAgICAgICAgICAgIGF0OiBcIkBcIixcbiAgICAgICAgICAgIGRhdGE6WydQZXRlcicsICdUb20nLCAnQW5uZSddLFxuXG4gICAgICAgICB9KTtcblxuICB9XSk7XG5cblxuc3luYy5jb250cm9sbGVyKFwiVHV0b3JpYWxNb2RhbFwiLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24oJHNjb3BlKSB7XG5cbiAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsID0gdHJ1ZTtcbiAgfTtcbiAgJHNjb3BlLm9rID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLnNob3dNb2RhbCA9IGZhbHNlO1xuICB9O1xuXG4gICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsID0gZmFsc2U7XG4gIH07XG5cbn1dKTtcblxuc3luYy5jb250cm9sbGVyKFwiU3RyaW1pbk1vZGFsXCIsIFtcIiRzY29wZVwiLCBmdW5jdGlvbigkc2NvcGUpIHtcblxuICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSB0cnVlO1xuICB9O1xuICAkc2NvcGUub2sgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsID0gZmFsc2U7XG4gIH07XG5cbiAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSBmYWxzZTtcbiAgfTtcblxufV0pO1xuIiwic3luYy5zZXJ2aWNlKCdGaWxlcycsIFsnJGh0dHAnLCckcScsJyRyb290U2NvcGUnLGZ1bmN0aW9uIEZpbGVzICgkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG4gICAgdGhpcy5nZXRHcm91cEZpbGVzID1mdW5jdGlvbihncm91cElkKSB7XG4gICAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIC8vZG93biBlbmRwb2ludCByZXR1cm4gYWxsIGZpbGVzIEkgb3duXG4gICAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsnL2FwaS92MS9ncm91cHMvJytncm91cElkKycvZ3JvdXBmaWxlcycpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5zaW5nbGUgPSBmdW5jdGlvbihmaWxlKXtcbiAgICAgIHZhciBwcm9taXNlID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50KyAnL3ByZXZpZXcvJysgZmlsZSlcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHByb21pc2UucHJvbWlzZTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0Qm94RmlsZXMgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZ3JvdXBJZCA9IDE7Ly9ieSBkZWZhdWx0IHRoaXMgY2FuIGJlIGFueSBudW1iZXJcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgLy90aGUgaWRlYSBpcyB0byBnZXQgYSBmaWxlIGVpdGhlciBmcm9tIGdyb3VwcyBvciBpbmRpdmlkdWFsIGFjY291bnQgZ3JvdXAgaXMgb3B0aW9uYWxcbiAgICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9maWxlcy8nK2dyb3VwSWQrJy9ib3hmaWxlcycpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0TWltZVR5cGUgPSBmdW5jdGlvbihmaWxlX25hbWUpe1xuICAgICAgdmFyIHByb21pc2UgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9maWxlcy9taW1lVHlwZS8nKyBmaWxlX25hbWUpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcHJvbWlzZS5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5kb3dubG9hZEZpbGUgPSBmdW5jdGlvbihmaWxlX25hbWUpe1xuXG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLmRlZmVyKCk7XG4gICAgICAvL2hhcmQgY29kZWQgYSB1c2VyIFN0cmltVXAhIG5lZWQgdG8gaW5qZWN0IGhpbSBkeWFtaWNhbGx5XG4gICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCsgJy9hcGkvdjEvZmlsZXMvZG93bmxvYWQvJytmaWxlX25hbWUrJy9vZi8nKyAnU3RyaW1VcCcpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIHByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcm9taXNlLnByb21pc2U7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbn1dKTtcbiIsInN5bmMuc2VydmljZSgnUGVvcGxlJywgWyckcScsJyRodHRwJywnJHJvb3RTY29wZScsZnVuY3Rpb24gKCRxLCAkaHR0cCwgJHJvb3RTY29wZSkge1xuXHR0aGlzLmdldCAgPSBmdW5jdGlvbiAoKXtcblx0XHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvc3VnZ2VzdGlvbnMnKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cblx0dGhpcy5hbGxJZm9sbG93ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9mb2xsb3dpbmdzJylcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnIpe1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycik7XG5cdFx0fSlcblx0XHRyZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcblx0fVxuXHR0aGlzLnVuRm9sbG93ID0gZnVuY3Rpb24oaWQpe1xuXHRcdHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG5cdFx0JGh0dHAuZGVsZXRlKCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9mb2xsb3dpbmcvJyAraWQpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyKXtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnIpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cblx0dGhpcy5mb2xsb3cgPSBmdW5jdGlvbihwYXJhbSl7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5wdXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2ZvbGxvd2luZ3MnLCBwYXJhbSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cblx0cmV0dXJuIHRoaXM7XG59XSk7XG4iLCJzeW5jLnNlcnZpY2UoJ1NoYXJlJyxbJyRsb2cnLCckaHR0cCcsJyRxJywnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkbG9nLCRodHRwLCRxLCRyb290U2NvcGUpIHtcblx0dGhpcy5zaGFyZSA9IGZ1bmN0aW9uKHNoYXJlYmxlT2JqKXtcblx0XHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5wb3N0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9zaGFyZScsc2hhcmVibGVPYmopXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH07XG5cdHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uKHVzZXIpe1xuXG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL3VzZXJzLycrIHVzZXIpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyKXtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnIpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9O1xuXHR0aGlzLmZpbGVNaW1lID0gZnVuY3Rpb24oZmlsZSl7XG5cdFx0dmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcblx0XHQkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21pbWVUeXBlLycrIGZpbGUpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyKXtcblx0XHRcdGRpZmZlcmVkLnJlamVjdChlcnIpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9O1xuICAgIHJldHVybiB0aGlzO1xufV0pOyIsInN5bmMuc2VydmljZSgnVXNlcicsIFsnJGh0dHAnLCckcScsJyRyb290U2NvcGUnLGZ1bmN0aW9uIEZpbGVzICgkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG5cdHRoaXMuaW5mbyA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb21pc2UgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICtcIi9hcGkvdjEvdXNlcnMvaW5mb1wiKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRwcm9taXNlLnJlc29sdmUocmVzKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbigpIHtcblx0XHRcdHByb21pc2UucmVqZWN0KCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHByb21pc2UucHJvbWlzZTtcblx0fTtcblx0dGhpcy5ncm91cHMgPSBmdW5jdGlvbih1c2VyKXtcbiAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3VwcycpXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpe1xuICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyKTtcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgXG5cdHJldHVybiB0aGlzO1xufV0pIiwiLyogZ2xvYmFsIHN5bmMgKi9cbnN5bmMuc2VydmljZSgnTm90aWZpY2F0aW9uJywgWyckaHR0cCcsICckcScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gTm90aWZpY2F0aW9uKCRodHRwLCAkcSwgJHJvb3RTY29wZSkge1xuICAgIHRoaXMuZ2V0Tm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKHVzZXJfaWQpIHtcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9ub3RpZmljYXRpb25zJywge2NhY2hlOiBmYWxzZX0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChOb3RpZmljYXRpb24pIHtcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAucG9zdCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbm90aWZpY2F0aW9ucycsIE5vdGlmaWNhdGlvbilcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLmRlbGV0ZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgdmFyIGRpZmZlcmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgJGh0dHAuZGVsZXRlKCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9ub3RpZmljYXRpb25zLycgKyBub3RpZmljYXRpb24pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufV0pO1xuXG5zeW5jLmNvbnRyb2xsZXIoJ25vdGlmaWNhdGlvbkNvbnRyb2xsZXInLCBbJyRzY29wZScsJ05vdGlmaWNhdGlvbicsJyRsb2cnLCBmdW5jdGlvbiAoJHNjb3BlLE5vdGlmaWNhdGlvbiwkbG9nKSB7XG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuZ2V0Tm90aWZpY2F0aW9uKCk7XG4gICAgfVxuICAgICRzY29wZS5jbGVhck5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uKG5vdGlmaWNhdGlvbil7XG5cblxuICAgICAgTm90aWZpY2F0aW9uLmNsZWFyTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbilcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgLy9sb2FkIHJlbWFpbmluZyBub3RpZmljYXRpb25cbiAgICAgICAgJHNjb3BlLmdldE5vdGlmaWNhdGlvbigpO1xuICAgICAgfSxmdW5jdGlvbihlcnIpe1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgICRzY29wZS5nZXROb3RpZmljYXRpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICBOb3RpZmljYXRpb24uZ2V0Tm90aWZpY2F0aW9uKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgIC8vICRsb2cuaW5mbyhyZXN1bHQpO1xuICAgICAgICAgICAgJHNjb3BlLm5vdGlmaWNhdGlvbnMgPSByZXN1bHQ7XG4gICAgICAgICAgICBcbiAgICAgICAgfSxmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAvLyAkbG9nLmluZm8oZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgJHNjb3BlLmluaXQoKTtcbn1dKTtcbnN5bmMuZGlyZWN0aXZlKCdub3RpZnknLFtmdW5jdGlvbigpe1xuICByZXR1cm57XG4gICAgcmVzdHJpY3Q6J0FFJyxcbiAgICBzY29wZTp7XG5cbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgaUF0dHJzKXtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgdmFyIHRpdGxlPSdUaGlzIHdpbGwgYmUgdGl0bGUnO1xuICAgICAgICAgICAgICB2YXIgZGVzYz0nTW9zdCBwb3B1bGFyIGFydGljbGUuJztcbiAgICAgICAgICAgICAgdmFyIHVybD0nc3luYy5jb206ODAwMCc7XG4gICAgICAgICAgICAgIG5vdGlmeUJyb3dzZXIodGl0bGUsZGVzYyx1cmwpO1xuICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgICAgICBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gIT09IFwiZ3JhbnRlZFwiKXtcbiAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIG5vdGlmeUJyb3dzZXIodGl0bGUsZGVzYyx1cmwpXG4gICAgICB7XG4gICAgICAgIGlmICghTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVza3RvcCBub3RpZmljYXRpb25zIG5vdCBhdmFpbGFibGUgaW4geW91ciBicm93c2VyLi4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiAhPT0gXCJncmFudGVkXCIpe1xuICAgICAgICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBub3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKHRpdGxlLCB7XG4gICAgICAgICAgICBpY29uOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLWFDRmlLNGJhWFg0L1ZqbUdKb2pzUV9JL0FBQUFBQUFBTkpnL2gtc0xWWDFNNXpBL3M0OC1JYzQyL2VnZ3NtYWxsLnBuZycsXG4gICAgICAgICAgICBib2R5OiBkZXNjLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBub3RpZmljYXRpb24gZnJvbSBOb3RpZmljYXRpb24gQ2VudGVyIHdoZW4gY2xpY2tlZC5cbiAgICAgICAgbm90aWZpY2F0aW9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDYWxsYmFjayBmdW5jdGlvbiB3aGVuIHRoZSBub3RpZmljYXRpb24gaXMgY2xvc2VkLlxuICAgICAgICBub3RpZmljYXRpb24ub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9uIGNsb3NlZCcpO1xuICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XSlcbiIsInN5bmMuZmFjdG9yeSgndXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhtZXNzYWdlLCBcIlN1Y2Nlc3NcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHdhcm46IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB0b2FzdHIud2FybmluZyhtZXNzYWdlLCBcIkhleVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5mbzogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci5pbmZvKG1lc3NhZ2UsIFwiRllJXCIpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihtZXNzYWdlLCBcIk9oIE5vXCIpO1xuICAgICAgICB9XG4gICAgfTtcbn0pO1xuIiwic3luYy5mYWN0b3J5KCd1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKG1lc3NhZ2UsIFwiU3VjY2Vzc1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2FybjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKG1lc3NhZ2UsIFwiSGV5XCIpO1xuICAgICAgICB9LFxuICAgICAgICBpbmZvOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLmluZm8obWVzc2FnZSwgXCJGWUlcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKG1lc3NhZ2UsIFwiT2ggTm9cIik7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG4iLCIvKiBnbG9iYWwgc3luYyAqL1xuLyoqXG4gKiAgQ3JlYXRlZCBieSBNdXJhZ2lqaW1hbmEgUmljaGFyZCBvbiAxMC8yMC8xNS5cbiAqICBCZWFzdGFyNDU3QGdtYWlsLmNvbSAsIHN5bmNAZ21haWwuY29tICwgY2hlY2sgd2l0aCBtZSFcbiAqL1xuLypJIHVzZSBDYW1lbENhc2Ugd2hpbGUgcmVuYW1pbmcgbXkgZnVuY3Rpb25zICovXG4vKmFuZCBpIHVzZSBzbmFrZSBjYXNlIHdoaWxlIHJlbmFtaW5nIHZhcmlhYmxlcyAqL1xuLypwb3N0IHNlcnZpY2UgKi9cblxuc3luYy5zZXJ2aWNlKCdQb3N0JywgWyckaHR0cCcsICckcScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gUG9zdCgkaHR0cCwgJHEsICRyb290U2NvcGUpIHtcbiAgICB0aGlzLmdldFBvc3QgPSBmdW5jdGlvbiAodXNlcl9pZCkge1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL3Bvc3RzP3VzZXJfaWQnICsgdXNlcl9pZCwge2NhY2hlOiBmYWxzZX0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5wYXJ0aWNpcGF0ZSA9IGZ1bmN0aW9uKG9iail7XG4gICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAucHV0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9wb3N0cy8nLG9iailcbiAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9KVxuICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycil7XG4gICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9O1xuICAgIHRoaXMuY3JlYXRlUG9zdCA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICRodHRwLnBvc3QoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL3Bvc3RzJywgcG9zdClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpcy5kZWxldGVQb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBkaWZmZXJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICRodHRwLmRlbGV0ZSgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvcG9zdHMvJyArIGlkKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbn1dKTtcblxuc3luYy5jb250cm9sbGVyKCdQb3N0aW5nQ29udHJvbGxlcicsIFtcbiAgJyRzY29wZScsXG4gICdQb3N0JyxcbiAgJyR0aW1lb3V0JyxcbiAgJ1VzZXInLFxuICAnJGludGVydmFsJyxcbiAgJ05vdGlmaWNhdGlvbicsXG4gIC8vICckaW9uaWNMaXN0RGVsZWdhdGUnLFxuICAnJGxvZycsXG4gICd1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24nLFxuICBmdW5jdGlvbiAoXG4gICRzY29wZSxcbiAgUG9zdCxcbiAgJHRpbWVvdXQsXG4gIFVzZXIsXG4gICRpbnRlcnZhbCxcbiAgTm90aWZpY2F0aW9uLFxuICAkaW9uaWNMaXN0RGVsZWdhdGUsXG4gICRsb2csXG4gIHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvblxuKSB7XG5cbiAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLnBvc3RMb2FkZXIoKTtcbiAgICAgICAgJHNjb3BlLmdldFVzZXIoKTtcblxuICAgIH07XG5cbiAgICAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUucG9zdExvYWRlcigpO1xuICAgIH0sIDgwMDApO1xuICAgICRzY29wZS5nZXRVc2VyID1mdW5jdGlvbigpe1xuXG4gICAgICBVc2VyLl9pZCgpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cbiAgICAgICAgJHNjb3BlLnVzZXIgPSByZXNwb25zZTtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgfSxmdW5jdGlvbihlcnIpe1xuICAgICAgICAvL3F1aXQgc2xpbnRseVxuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUubG9hZE1vcmUgPSBmdW5jdGlvbigpe1xuXG4gICAgfTtcbiAgICAkc2NvcGUucGFydGljaXBhdGVJbnRvUG9zdCA9IGZ1bmN0aW9uKHBvc3QsdXNlcil7XG4gICAgICAvLyBjb25zb2xlLmxvZyh1c2VyKTtcbiAgICAgIHZhciBvYmogPXtcbiAgICAgICAgJ3Bvc3RfaWQnOnBvc3QsXG4gICAgICAgICd1c2VyX2lkJzp1c2VyXG4gICAgICB9O1xuICAgICAgUG9zdC5wYXJ0aWNpcGF0ZShvYmopXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICRzY29wZS5wb3N0TG9hZGVyKCk7XG4gICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgIC8vcXVpdCBzbGVudGx5XG5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnBvc3RMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5kYXRhTG9hZGluZyA9IHRydWU7XG4gICAgICAgIFBvc3QuZ2V0UG9zdCgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJlZSkge1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzID10cmVlO1xuICAgICAgICAgICAgICAgIC8vbmF2aWdhdGUgdHJvdWdoIHRyZWUgcmVzcG9uc2Ugd2hpY2ggaXMgcmVxdWlyZSBtdWNoIGF0dGVudGlvblxuICAgICAgICAgICAgICAgICRzY29wZS5mcmllbmRzPVtdO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZXBsaWVzPVtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZnJpZW5kcycpICYmIHRyZWVbaV1bJ3JlcGxpZXMnXSAgJiYgdHJlZVtpXVsnZnJpZW5kcyddICkge1xuICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mcmllbmRzLnB1c2godHJlZVtpXS5mcmllbmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVwbGllcy5wdXNoKHRyZWVbaV0ucmVwbGllcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZnJpZW5kcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IGZyaWVuZHMuY29uY2F0KHRyYXZlcnNlKHRyZWVbaV0uZnJpZW5kcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcGxpZXMgPSByZXBsaWVzLmNvbmNhdCh0cmF2ZXJzZSh0cmVlW2ldLnJlcGxpZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5pbWFnZURlc2MgPSBmdW5jdGlvbihpbmRleCl7XG4gICAgICAvL3Nob3cgaW1hZ2VzIHdpdGggZGlmZmVyZW50IHBpeGVsXG4gICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gJzYwcHgnO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIFwiNjBweFwiO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIFwiNjBweFwiO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIFwiNjBweFwiO1xuXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuIFwiNjBweFwiO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIjYwcHhcIjtcblxuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coaW5kZXgpO1xuICAgIH07XG4gICAgJHNjb3BlLnNoYXJlID0gZnVuY3Rpb24oaWQpe1xuICAgICAgICAkaW9uaWNMaXN0RGVsZWdhdGUuY2xvc2VPcHRpb25CdXR0b25zKCk7XG4gICAgICAgICRsb2cuaW5mbyhpZCk7XG4gICAgfTtcbiAgICAkc2NvcGUuY3JlYXRlUG9zdCA9IGZ1bmN0aW9uIChwb3N0aW5nKSB7XG4gICAgICAvL2lmIGltYWdlIGlzIHVwbG9hZGVkIHVwbG9hZGVkXG4gICAgICAgIHZhciBfdGhpcyA9IHsgbWVzc2FnZTogcG9zdGluZyB9O1xuICAgICAgICBQb3N0LmNyZWF0ZVBvc3QoX3RoaXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocG9zdENyZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMucHVzaChwb3N0Q3JlYXRlZCk7XG4gICAgICAgICAgICAgICAgICB1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uc3VjY2VzcyhcIk5ldyBQb3N0IGZlZWQgY3JlYXRlZCFcIik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS5pbml0KCk7XG59XSk7XG5zeW5jLmRpcmVjdGl2ZSgnZmVlZHNVcGxvYWRlcicsW2Z1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgcmVwbGFjZTogZmFsc2UsXG4gICAgdGVtcGxhdGVVcmw6ICdBcHAvanMvc2NyaXB0cy92aWV3cy9mZWVkQXR0YWNobWVudC5odG1sJyxcbiAgICBzY29wZToge1xuICAgICAgYWN0aW9uOiAnQCdcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgJHNjb3BlLnByb2dyZXNzID0gMDtcbiAgICAgICRzY29wZS5hdmF0YXIgPSAnJztcbiAgICAgICRzY29wZS5zZW5kRmlsZSA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciAkZm9ybSA9ICQoZWwpLnBhcmVudHMoJ2Zvcm0nKTtcbiAgICAgICAgaWYgKCQoZWwpLnZhbCgpID09PSAnJykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAkZm9ybS5hdHRyKCdhY3Rpb24nLCAkc2NvcGUuYWN0aW9uKTtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUucHJvZ3Jlc3MgPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgJGZvcm0uYWpheFN1Ym1pdCh7XG4gICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICBcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICh4aHIpIHtcbiAgICAgICAgXHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgJ0JlYXJlciBPcUZpclFTNDRSUVRqUnVXbmlYamRIWkpRWGRDdUV4NDlycThKWTVBJyk7XG4gICAgICAgIFx0fSxcbiAgICAgICAgICB1cGxvYWRQcm9ncmVzczogZnVuY3Rpb24oZXZ0LCBwb3MsIHRvdCwgcGVyY0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyB1cGxvYWQgdGhlIHByb2dyZXNzIGJhciBkdXJpbmcgdGhlIHVwbG9hZFxuICAgICAgICAgICAgICAvLyAkc2NvcGUucHJvZ3Jlc3MgPSBwZXJjZW50Q29tcGxldGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihldnQsIHN0YXR1c1RleHQsIHJlc3BvbnNlLCBmb3JtKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGFjdGlvbiBhdHRyaWJ1dGUgZnJvbSB0aGUgZm9ybVxuICAgICAgICAgICAgJGZvcm0ucmVtb3ZlQXR0cignYWN0aW9uJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSwgc3RhdHVzLCB4aHIsIGZvcm0pIHtcbiAgICAgICAgICAgIHZhciBhciA9ICQoZWwpLnZhbCgpLnNwbGl0KCdcXFxcJyksXG4gICAgICAgICAgICAgIGZpbGVuYW1lID0gIGFyW2FyLmxlbmd0aC0xXTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYWN0aW9uIGF0dHJpYnV0ZSBmcm9tIHRoZSBmb3JtXG4gICAgICAgICAgICAkZm9ybS5yZW1vdmVBdHRyKCdhY3Rpb24nKTtcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICRzY29wZS5hdmF0YXIgPSBmaWxlbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cnMsIGN0cmwpIHtcblxuICAgICAgZWxlbS5maW5kKCcuZmFrZS11cGxvYWRlcicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtLmZpbmQoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJykuY2xpY2soKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9O1xufV0pO1xuIiwiLyogZ2xvYmFsICR1aWJNb2RhbEluc3RhbmNlICovXG4vKiBnbG9iYWwgTW9kYWxJbnN0YW5jZUN0cmwgKi9cbi8qIGdsb2JhbCAkdWliTW9kYWwgKi9cbi8qIGdsb2JhbCBzeW5jICovXG4vKiBnbG9iYWwgc3luYyAqL1xuc3luYy5jb250cm9sbGVyKCdGaWxlc0NvbnRyb2xsZXInLFxuIFtcblx0JyRzY29wZScsJ0ZpbGVzJywnJGxvZycsJyR3aW5kb3cnLCdVc2VyJywnJHVpYk1vZGFsJywnJGludGVydmFsJywncGRmRGVsZWdhdGUnLCckdGltZW91dCcsJyRzdGF0ZVBhcmFtcycsJyRyb290U2NvcGUnLCckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uIChcblx0XHQkc2NvcGUsIEZpbGVzLCRsb2csJHdpbmRvdyxVc2VyLCR1aWJNb2RhbCwkaW50ZXJ2YWwscGRmRGVsZWdhdGUsJHRpbWVvdXQsJHN0YXRlUGFyYW1zLCRyb290U2NvcGUsJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuXHQgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vIGFsZXJ0KCdoZXJlIEkgYW0gY2FsbGVkJyk7XG5cbiAgICAgIC8vbG9hZCBhbGwgYm94IGZpbGVzXG5cdFx0ICAgICRzY29wZS5hbGwoKTtcblx0ICB9O1xuXG5cblx0ICAvLyAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gJHNjb3BlLmFsbCgpO1xuICAgLy8gIH0sIDgwMDApO1xuXG5cblx0ICRzY29wZS5hbGwgPSBmdW5jdGlvbigpe1xuICAgICRzY29wZS5kYXRhTG9hZGluZyA9IHRydWU7XG5cdFx0RmlsZXMuZ2V0Qm94RmlsZXMoKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKXtcblxuXHRcdFx0XHQkc2NvcGUuZmlsZXMgXHQ9XHRyZXM7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHRcdH0pXG4gICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJHNjb3BlLmRhdGFMb2FkaW5nID0gZmFsc2U7XG4gICAgIH0pO1xuXHQgfTtcbiAgJHNjb3BlLmZpbGVUeXBlICA9IGZ1bmN0aW9uKHR5cGUpIHtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3BkZic6XG4gICAgICAgICAgcmV0dXJuICdpbWcvcGRmLnBuZyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgICAgcmV0dXJuICdpbWcvdW5pdmVyc2FsX2ZvbGRlci5wbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmb2xkZXIrJzpcbiAgICAgICAgICByZXR1cm4gJ2ltZy9BZGRfZm9sZGVyLnBuZyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BocCc6XG4gICAgICAgICAgcmV0dXJuICdpbWcvY29kZS5wbmcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0eHQnOlxuICAgICAgICByZXR1cm4gJ2ltZy9jb2RlLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb2N4JzpcbiAgICAgICAgICByZXR1cm4gJ2ltZy93b3JkLnBuZyc7XG4gICAgICAgIGNhc2UgJ2pwZyc6XG4gICAgICAgICAgcmV0dXJuICdmYSBmYS1pbWFnZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BuZyc6XG4gICAgICAgICAgcmV0dXJuICdpbWcvdmlkZW8ucG5nJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnanBlZyc6XG4gICAgICAgICAgICByZXR1cm4gJ2ltZy91bml2ZXJzYWxfZm9sZGVyLnBuZyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ppcCc6XG4gICAgICAgICByZXR1cm4gJ2ltZy96aXAucG5nJztcbiAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ2ltZy91bml2ZXJzYWxfZm9sZGVyLnBuZyc7XG4gICAgICB9XG4gIH07XG5cblx0JHNjb3BlLmluaXQoKTtcbn1dKTtcblxuc3luYy5kaXJlY3RpdmUoJ2RyYWdnYWJsZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAgdmFyIGVsID0gZWxlbWVudFswXTtcblxuICAgICAgICAgICAgZWwuZHJhZ2dhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnZHJhZ3N0YXJ0JyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZHJhZyBldmVudCBzdGFydGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG4gICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCB0aGlzLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdkcmFnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdkcmFnZW5kJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkcmFnIGV2ZW50IHJlbGVhc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcblxuc3luYy5kaXJlY3RpdmUoJ2Ryb3BwYWJsZScsIFsndXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uJywnRmlsZXMnLGZ1bmN0aW9uKHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbixGaWxlcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkcm9wOiAnJicsXG4gICAgICAgICAgICBiaW46ICc9Jy8vIHBhcmVudFxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gYWdhaW4gd2UgbmVlZCB0aGUgbmF0aXZlIG9iamVjdFxuICAgICAgICAgICAgdmFyIGVsID0gZWxlbWVudFswXTtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICdkcmFnb3ZlcicsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gICAgICAgICAgICAgICAgICAvLyBhbGxvd3MgdXMgdG8gZHJvcFxuXG4gICAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdvdmVyJyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgJ2RyYWdlbnRlcicsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnb3ZlcicpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAnZHJhZ2xlYXZlJyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyJyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2Ryb3AnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcHMgc29tZSBicm93c2VycyBmcm9tIHJlZGlyZWN0aW5nLlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpbklkID0gdGhpcy5pZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlLmRhdGFUcmFuc2Zlci5nZXREYXRhKCdUZXh0JykpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnSXRlbSBub3cgaXM6JytpdGVtKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHRoZSBwYXNzZWQgZHJvcCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHNjb3BlLmRyb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBmbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm4oaXRlbS5pZCwgYmluSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgICAgICAgICAgICAgICAvL3Rocm93IGVycm9yIHRoYXQgaGFwcGVuIHdoZW4gZmlsZSBpcyBkcm9wcGVkIGluIGl0J3Mgb3duIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgLy9naXZlIHNvbWUgYWxlcnQgdG8gbm90aWZ5IHdoYXQgaGFwcG5lZFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm93KCBuZXcgRXJyb3IoZSkpXG4gICAgICAgICAgICAgICAgICAgICAgLy8gdXNlckludGVyYWN0aW9uTm90aWZpY2F0aW9uLmVycm9yKFwiRHJvcCBGaWxlIG9uIGZvbGRlciB0byBtb3ZlIGl0IVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufV0pO1xuc3luYy5jb250cm9sbGVyKCdEcmFnRHJvcEN0cmwnLCBbJyRzY29wZScsJ0ZpbGVzJywnJGludGVydmFsJyxmdW5jdGlvbigkc2NvcGUsRmlsZXMsJGludGVydmFsKSB7XG5cblxuICAgICRzY29wZS5oYW5kbGVEcm9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyAxKWlmIG1vdmVkIG9ubHkgd2hlbiBpdCByZWFjaCBvbiBmb2xkZXIgYWxsb3cgbW92ZVxuICAgICAgLy8gMil0YWtlIHRoIGlkIG9mIGZpbGUgbW92ZWQgYW5kIHRha2UgaWQgb2YgZm9sZGVyIG1vdmUgZmlsZSBpbnRvIGZvbGRlclxuXG4gICAgICAgLy9tb3ZlIHRoZSBpdGVtIGludG8gd2hlcmUgaXQgaXMgZHJvcGVkXG4gICAgICAgLy90aGUgZmlyc3QgdGhpbmcgaGVyZSBpcyB0byByZWNhbGN1bGF0ZSB0aGUgYXJyYXkgdG8ga2VlcCB0aGUgYXJyYW5nZW1lbnQgaW50YWN0XG5cblxuICAgIH1cbn1dKTtcbiIsInN5bmMuY29udHJvbGxlcigncHJldmlld0NvbnRyb2xsZXInLFxuIFtcblx0JyRzY29wZScsJ3BkZkRlbGVnYXRlJywnJHRpbWVvdXQnLCckc3RhdGVQYXJhbXMnLCckcm9vdFNjb3BlJywnJGV4Y2VwdGlvbkhhbmRsZXInLCdGaWxlcycsICdGaWxlU2F2ZXInLCdCbG9iJyxmdW5jdGlvbiAoXG5cdFx0JHNjb3BlLHBkZkRlbGVnYXRlLCR0aW1lb3V0LCRzdGF0ZVBhcmFtcywkcm9vdFNjb3BlLCRleGNlcHRpb25IYW5kbGVyLEZpbGVzLEZpbGVTYXZlciwgQmxvYikge1xuXG4gICAgICAvL2dldCBtaW1lIHR5cGUgb2YgYW55RmlsZSB0aGF0IGNvbWVzIGluIG15IGhvb2QhXG5cbiAgICAgIFxuXG4gICAgICBpZigkc3RhdGVQYXJhbXMucHJldmlldyAmJiAkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdwZGYnKXtcbiAgICAgICAgJHNjb3BlLnByZXZpZXdhYmxlID0gdHJ1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vYSB1c2VyIFN0cmltVXAgaXMgaW5qZWN0ZWQgaW4gYmVsbG93IHVybCBpdCBzaG91bGQgYmUgZHluYW1pYyBpbiBmdXR1cmUhXG4gICAgICAgICAgICAkc2NvcGUucGRmVXJsID0gJHJvb3RTY29wZS5lbmRQb2ludCsgJy9wcmV2aWV3LycrICRzdGF0ZVBhcmFtcy5wcmV2aWV3Kycvb2YvJysnU3RyaW1VcCc7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBkZkRlbGVnYXRlLiRnZXRCeUhhbmRsZSgnbXktcGRmLWNvbnRhaW5lcicpLnpvb21JbigwLjUpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICB0aHJvdyggbmV3IEVycm9yKGUpKVxuICAgICAgICB9XG4gICAgICB9ZWxzZSBpZigkc3RhdGVQYXJhbXMucHJldmlldyAmJiAkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdqcGcnfHwkc3RhdGVQYXJhbXMuZXh0ZW5zaW9uID09ICdwbmcnKXtcbiAgICAgICAgJHNjb3BlLmZpbGVfbmFtZSA9ICRzdGF0ZVBhcmFtcy5wcmV2aWV3O1xuICAgICAgICAkc2NvcGUucHJldmlld2FibGUgPSBmYWxzZTtcbiAgICAgICAgLy9hcyBieSBub3cgaW1hZ2VzIGFyZSBub3QgcmVhZHkgdG8gYmUgcHJldmlld2VkIHNvIHNldCBpdCB0byBmYWxzZSFwcm92aWRlIG9ubHkgb3B0aW9uIHRvIGRvd25sb2FkIHRoZW0hXG4gICAgICAgICAgLy8gJHNjb3BlLnByZXZpZXdhYmxlID0gZmFsc2U7XG4gICAgICAgICAgLy8gRmlsZXMuc2luZ2xlKCRzdGF0ZVBhcmFtcy5wcmV2aWV3KVxuICAgICAgICAgIC8vIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAvLyAgICRzY29wZS5pbWFnZVByZXZpZXcgPSByZXNwb25zZTtcbiAgICAgICAgICAvLyB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICAvL3NlbmQgYSBmaWxlbmFtZSB0byBhIGRvd25sb2FkIGJ1dHRvblxuICAgICAgICAkc2NvcGUuZmlsZV9uYW1lID0gJHN0YXRlUGFyYW1zLnByZXZpZXc7XG4gICAgICAgICRzY29wZS5wcmV2aWV3YWJsZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuZ29OZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmluY3JlbWVudCA9IDE7XG4gICAgICAgICAgcGRmRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdteS1wZGYtY29udGFpbmVyJykubmV4dCgkc2NvcGUuaW5jcmVtZW50KzEpO1xuICAgICAgfTtcbiAgICAgIC8vdGhpcyBvcHRpb24gZG93biBoZXJlIG9mIGRvd25sb2FkaW5nIGEgZmlsZSB3YXMgbmljZSBidXQgc3RpbGwgaGF2ZSBzb21lIGRyb3diYWNrXG5cbiAgICAgIC8vICRzY29wZS5kb3dubG9hZCA9IGZ1bmN0aW9uKGZpbGVfbmFtZSl7XG5cbiAgICAgIC8vICAgRmlsZXMuZG93bmxvYWRGaWxlKGZpbGVfbmFtZSlcbiAgICAgIC8vICAgLnRoZW4oZnVuY3Rpb24oZmlsZV93cml0ZW4pe1xuICAgICAgICAgICAgXG4gICAgICAvLyAgICAgRmlsZXMuZ2V0TWltZVR5cGUoJHN0YXRlUGFyYW1zLnByZXZpZXcpXG4gICAgICAvLyAgICAgICAudGhlbihmdW5jdGlvbihtaW1lVHlwZSl7XG5cbiAgICAgIC8vICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbZmlsZV93cml0ZW5dLCB7XG4gICAgICAvLyAgICAgICAgICAgICB0eXBlOiBtaW1lVHlwZSxcbiAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAvLyAgICAgICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgJHN0YXRlUGFyYW1zLnByZXZpZXcpO1xuXG4gICAgICAvLyAgICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAvLyAgICAgICB9KTtcblxuICAgICAgICAgIFxuXG4gICAgICAvLyAgIH0sZnVuY3Rpb24oZXJyKXtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH07XG4gICAgICAkc2NvcGUuZ29QcmV2ID0gZnVuY3Rpb24ocGFnZSl7XG4gICAgICAgICAgcGRmRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCdteS1wZGYtY29udGFpbmVyJykucHJldigkc2NvcGUuaW5jcmVtZW50LTEpO1xuICAgICAgfTtcbn1dKTtcblxuc3luYy5kaXJlY3RpdmUoJ2ZpbGVEb3dubG9hZCcsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIGRhdGEtbmctY2xpY2s9XCJkb3dubG9hZCgpXCI+PHNwYW4gY2xhc3M9XCJcIj48L3NwYW4+RG93bmxvYWQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdGltZW91dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9ncmVzcyA9IDA7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkaWFsb2dzLndhaXQoXCJQbGVhc2Ugd2FpdFwiLCBcIllvdXIgZG93bmxvYWQgc3RhcnRzIGluIGEgZmV3IHNlY29uZHMuXCIsICRzY29wZS5wcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGZha2VQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2RpYWxvZ3Mud2FpdC5jb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvcihyZXNwb25zZSwgdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpYWxvZ3MuZXJyb3IoXCJDb3VsZG4ndCBwcm9jZXNzIHlvdXIgZG93bmxvYWQhXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZha2VQcm9ncmVzcygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wcm9ncmVzcyA8IDk1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2dyZXNzICs9ICg5NiAtICRzY29wZS5wcm9ncmVzcykgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZGlhbG9ncy53YWl0LnByb2dyZXNzJywgeyAncHJvZ3Jlc3MnOiAkc2NvcGUucHJvZ3Jlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFrZVByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDI1MCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRvd25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICAkLmZpbGVEb3dubG9hZCgnaHR0cDovL3N5bmNtZS5jb206ODAwMC9hcGkvdjEvZmlsZXMvZG93bmxvYWQvcGhweEZubGhlRFZFNWo1bWNWRFgucG5nL29mL1N0cmltVXA/YWNjZXNzX3Rva2VuPUJjN0RXUzdLS1JMdHhtZGRVWkkxVDFsWnUySjFZaFI4T0xYR1dOWm4nLCB7IHByZXBhcmVDYWxsYmFjazogcHJlcGFyZSwgc3VjY2Vzc0NhbGxiYWNrOiBzdWNjZXNzLCBmYWlsQ2FsbGJhY2s6IGVycm9yIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbn1dKTtcbiIsIi8qIGdsb2JhbCBzeW5jICovXG5cInVzZSBzdHJpY3RcIjtcbnN5bmMuY29udHJvbGxlcignUGVvcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywnUGVvcGxlJyxmdW5jdGlvbiAoJHNjb3BlLCBQZW9wbGUpIHtcblx0XHQkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHQkc2NvcGUuZ2V0UGVvcGxlVG9Gb2xsb3coKTtcblx0XHR9XG5cdFx0JHNjb3BlLmdldFBlb3BsZVRvRm9sbG93ICA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRQZW9wbGUuZ2V0KClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdFx0XG5cdFx0XHRcdCRzY29wZS5wZW9wbGUgPSByZXNwb25zZTtcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKXtcblxuXHRcdFx0fSlcblx0XHR9XG5cdFx0JHNjb3BlLiRvbignZm9sbG93TWVtYmVyJyxmdW5jdGlvbihldmVudCxwYXJhbXMpe1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFBlb3BsZS5mb2xsb3cocGFyYW1zKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0JHNjb3BlLmdldFBlb3BsZVRvRm9sbG93KCk7XG5cdFx0XHR9LGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0XHQkc2NvcGUuZm9sbG93ID0gZnVuY3Rpb24oaWQpe1xuXHRcdFx0dmFyIGZvbGxvdyA9e2lkOiBpZCwgb3B0aW9uOidhZGRQZW9wbGUnfTtcblx0XHRcdCRzY29wZS4kZW1pdChcImZvbGxvd01lbWJlclwiLCBmb2xsb3cpO1xuXHRcdH1cblx0XHQkc2NvcGUuaW5pdCgpO1xufV0pO1xuIiwiLyogZ2xvYmFsIEZpbGVzICovXG4vKiBnbG9iYWwgc3luYyAqL1xuLyogZ2xvYmFsICRzY29wZSAqL1xuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbi8qQXV0aG9yIE11cmFnaWppbWFuYSBGb3VuZGVyICYgQ0VPIG9mIHN5bmMgY2FsbCBoaW0gb24gU3RyaW1VcEBnbWFpbC5jb20qL1xuXG5zeW5jLnNlcnZpY2UoJ0dyb3VwJywgW1xuXHQnJGh0dHAnLFxuXHQnJHJvb3RTY29wZScsXG5cdCckcScsZnVuY3Rpb24gR3JvdXAgKFxuXHRcdCRodHRwLFxuXHRcdCRyb290U2NvcGUsXG5cdFx0JHEpIHtcblx0dGhpcy5jcmVhdGUgXHRcdD1cdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBkaWZmZXJlZCBcdD1cdCRxLmRlZmVyKCk7XG5cdFx0JGh0dHAucG9zdCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvZ3JvdXBzJywgbmFtZSlcblx0XHQuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KVxuXHRcdC5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0ZGlmZmVyZWQucmVqZWN0KGVycm9yKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cdHRoaXMuZGVsZXRlIFx0XHQ9XHRmdW5jdGlvbihpZCl7XG5cdFx0dmFyIGRpZmZlcmVkIFx0PVx0JHEuZGVmZXIoKTtcblx0XHQkaHR0cC5kZWxldGUoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3Vwcy8nK2lkKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cblx0dGhpcy5teUdyb3Vwc1x0XHQ9XHRmdW5jdGlvbigpe1xuXHRcdHZhciBkaWZmZXJlZCBcdD1cdCRxLmRlZmVyKCk7XG5cblx0XHQkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3VwcycpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdkaWZmZXJlZCBzbG93OicgKyBlcnJvcik7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cblxuXHR0aGlzLmFkZFBlb3BsZSBcdD1cdGZ1bmN0aW9uKG1lbWJlcil7XG5cdFx0dmFyIGRpZmZlcmVkIFx0PVx0JHEuZGVmZXIoKTtcblx0XHQkaHR0cC5wdXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL21lL2dyb3Vwcy8nK0pTT04uc3RyaW5naWZ5KG1lbWJlcikpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH07XG5cdHRoaXMuYWRkRmlsZVRvR3JvdXAgPSBmdW5jdGlvbihmaWxlT2JqKXtcblx0XHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLnB1dCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvbWUvZ3JvdXBzLycrIEpTT04uc3RyaW5naWZ5KGZpbGVPYmopKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycil7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cdHRoaXMucmVtb3ZlUGVvcGxlIFx0PVx0ZnVuY3Rpb24obWVtYmVyKXtcblx0XHR2YXIgZGlmZmVyZWQgXHQ9XHQkcS5kZWZlcigpO1xuXHRcdCRodHRwLnB1dCgkcm9vdFNjb3BlLmVuZFBvaW50ICsnL2FwaS92MS9tZS9ncm91cHMvJytKU09OLnN0cmluZ2lmeShtZW1iZXIpKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGRpZmZlcmVkLnJlc29sdmUocmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyb3IpO1xuXHRcdH0pXG5cdFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG5cdH1cbiAgdGhpcy5zdWdnZXN0UGVvcGxlID0gZnVuY3Rpb24oaWQpe1xuXG4gICAgXHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgIFx0JGh0dHAuZ2V0KCRyb290U2NvcGUuZW5kUG9pbnQgKyAnL2FwaS92MS9tZS9ncm91cHMvJyArIGlkKVxuICAgIFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocmVzKXtcbiAgICBcdFx0ZGlmZmVyZWQucmVzb2x2ZShyZXMpO1xuICAgIFx0fSlcbiAgICBcdC5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICBcdFx0ZGlmZmVyZWQucmVqZWN0KGVycik7XG4gICAgXHR9KVxuICAgIFx0cmV0dXJuIGRpZmZlcmVkLnByb21pc2U7XG4gICAgfVxuXHRyZXR1cm4gdGhpcztcbn1dKTtcblxuc3luYy5jb250cm9sbGVyKCdHcm91cENvbnRyb2xsZXInLCBbXG5cdCckc2NvcGUnLFxuXHQnR3JvdXAnLFxuXHQnVXNlcicsXG5cdCdGaWxlcycsXG5cdCd1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24nLFxuXHRmdW5jdGlvbiBHcm91cENvbnRyb2xsZXIgKFxuXHRcdCRzY29wZSxcblx0XHRHcm91cCxcblx0XHRVc2VyLFxuXHRcdEZpbGVzLFxuXHRcdHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvblxuXHQpIHtcblx0JHNjb3BlLmluaXQgXHQ9XHRmdW5jdGlvbigpe1xuXHRcdCRzY29wZS5teUdyb3VwcygpO1xuXG5cdFx0JHNjb3BlLnN1Z2dlc3RlZFBlb3BsZVRvR3JvdXAoKTsvL29mY2F1c2UgdGhleSBhcmUgYXJsZWFkeSB5b3VyIGZyaWVuZCBidXQgbm90IHBhcnRpY2lwYW50IGluIHlvdXIgc3R1ZmYgd29yayFcblx0fVxuXHQkc2NvcGUudXNlcklkIFx0XHRcdFx0PVx0ZnVuY3Rpb24oKXtcblx0XHRVc2VyLl9pZCgpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0JHNjb3BlLnVzZXJJZCBcdD1cdHJlc3BvbnNlO1xuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHR9KTtcblx0fTtcblx0JHNjb3BlLm15R3JvdXBzIFx0XHRcdD1cdGZ1bmN0aW9uKCl7XG5cdFx0R3JvdXAubXlHcm91cHMoKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdCRzY29wZS5ncm91cCBcdD0gcmVzcG9uc2U7XG5cdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdH0pO1xuXHR9O1xuXHQkc2NvcGUuc3VnZ2VzdGVkUGVvcGxlVG9Hcm91cCBcdD1cdGZ1bmN0aW9uKGlkKXtcblx0XHQvL2NsZWFyaW5nIGFsbCB2aWV3IHJlbmRlcmVkIGJlZm9yZVxuXHRcdCRzY29wZS5zaG93RmlsZXM9ZmFsc2U7XG5cdFx0JHNjb3BlLnNob3dHcm91cD1mYWxzZTtcblx0XHQkc2NvcGUuc2hvd0JveD1mYWxzZTtcblx0XHRpZighYW5ndWxhci5pc1VuZGVmaW5lZChpZCkpe1xuXHRcdFx0R3JvdXAuc3VnZ2VzdFBlb3BsZShpZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0JHNjb3BlLmZvbGxvd2VycyA9IHJlc3BvbnNlO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cdCRzY29wZS4kb24oJ3JlZnJlc2hHcm91cCcsZnVuY3Rpb24oKXtcbiAgICAgICAkc2NvcGUuaW5pdCgpO1xuICBcdH0pO1xuXHQkc2NvcGUuJG9uKCdncm91cERlbGV0ZWQnLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdCRzY29wZS5teUdyb3VwcygpO1xuXHR9KTtcblx0JHNjb3BlLiRvbignZ3JvdXBUb2JpbmR3aXRoJywgZnVuY3Rpb24gKGV2ZW50LCBncm91cGlkKSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJHNjb3BlLmVtaXR0ZWQgPWdyb3VwaWQ7XG4gICAgICAgIGlmKCAkc2NvcGUuc2hvd0ZpbGVzID09IHRydWUpe1xuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlcz1mYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUuc3VnZ2VzdGVkUGVvcGxlVG9Hcm91cChncm91cGlkKTtcbiAgICAgICAgJHNjb3BlLmFkZFBlb3BsZT10cnVlO1xuXHR9KTtcblx0JHNjb3BlLmdldEdyb3VwRmlsZXMgPSBmdW5jdGlvbihvd25lcil7XG4gICAgRmlsZXMuZ2V0R3JvdXBGaWxlcyhvd25lcilcblx0XHQudGhlbihmdW5jdGlvbih0cmVlKXtcblx0XHRcdCRzY29wZS5maWxlcyA9IHRyZWU7XG5cdFx0XHRcdC8vbmF2aWdhdGUgdHJvdWdoIHRyZWUgcmVzcG9uc2Ugd2hpY2ggaXMgcmVxdWlyZSBtdWNoIGF0dGVudGlvblxuXHRcdFx0XHQkc2NvcGUuZ3JvdXBzPVtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmICh0cmVlW2ldLmhhc093blByb3BlcnR5KCdncm91cHMnKSAmJiB0cmVlW2ldWydncm91cHMnXSkge1xuXHRcdFx0XHRcdFx0XHRcdCRzY29wZS5ncm91cHMucHVzaCh0cmVlW2ldLmZyaWVuZHMpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0cmVlW2ldLmhhc093blByb3BlcnR5KCdncm91cHMnKSkge1xuXHRcdFx0XHRcdFx0XHRcdCRzY29wZS5ncm91cHMgPSBncm91cHMuY29uY2F0KHRyYXZlcnNlKHRyZWVbaV0uZ3JvdXBzKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHR9LCBmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0fSk7XG4gIH07XG5cdCRzY29wZS5nZXRCb3hGaWxlcyA9IGZ1bmN0aW9uKGdyb3VwSWQpe1xuXHRcdCRzY29wZS5lbWl0dGVkID1ncm91cElkO1xuICBcdEZpbGVzLmdldEJveEZpbGVzKGdyb3VwSWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24odHJlZSl7XG5cdFx0XHQkc2NvcGUuZmlsZXMgPSB0cmVlO1xuXHRcdFx0XHQvL25hdmlnYXRlIHRyb3VnaCB0cmVlIHJlc3BvbnNlIHdoaWNoIGlzIHJlcXVpcmUgbXVjaCBhdHRlbnRpb25cblx0XHRcdFx0JHNjb3BlLmdyb3Vwcz1bXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXBzJykgJiYgdHJlZVtpXVsnZ3JvdXBzJ10pIHtcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZ3JvdXBzLnB1c2godHJlZVtpXS5mcmllbmRzKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHJlZVtpXS5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXBzJykpIHtcblx0XHRcdFx0ICAgICAgICAgICAgJHNjb3BlLmdyb3VwcyA9IGdyb3Vwcy5jb25jYXQodHJhdmVyc2UodHJlZVtpXS5ncm91cHMpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHR9KTtcbiAgfTtcbiRzY29wZS4kb24oJ3Nob3dPcHRpb25zJyxmdW5jdGlvbihfLHBhcmFtcyl7XG4gICAgIGlmKHBhcmFtcy5vd25lciA9PT1cImJveFwiKXtcblx0XHRcdCAkc2NvcGUuYWRkUGVvcGxlPWZhbHNlO1xuXHRcdFx0ICRzY29wZS5zaG93R3JvdXA9ZmFsc2U7XG4gICAgICAgJHNjb3BlLnNob3dCb3g9dHJ1ZTtcbiAgICAgICBpZiggJHNjb3BlLmFkZFBlb3BsZSA9PSB0cnVlKXtcbiAgICAgICAgICAgJHNjb3BlLmFkZFBlb3BsZT1mYWxzZTtcbiAgICAgICB9XG5cdFx0XHQgLy9zZXQgZmlsZXMgc2NvcGUgdG8gc2hvdyBmaWxlcyBvZiBib3ggZmlsZXMgaXMgcmVwZWF0ZWQgaW4gdmlldyBkaXJlY3RpdmVcbiAgICAgICAkc2NvcGUuZ2V0Qm94RmlsZXMgKHBhcmFtcy5ncm91cF9pZCk7XG5cdFx0IH1lbHNlIGlmIChwYXJhbXMub3duZXIgPT09IFwiZ3JvdXBcIikge1xuXHRcdFx0ICRzY29wZS5zaG93Qm94PWZhbHNlO1xuXHRcdFx0ICRzY29wZS5hZGRQZW9wbGU9ZmFsc2U7XG5cdFx0XHQgJHNjb3BlLnNob3dHcm91cD10cnVlO1xuXHRcdFx0IGlmKCAkc2NvcGUuYWRkUGVvcGxlID09IHRydWUpe1xuXHRcdFx0XHRcdCAkc2NvcGUuYWRkUGVvcGxlPWZhbHNlO1xuXHRcdFx0IH1cblx0XHRcdCAvL2NoYW5nZSBmaWxlcyB0byBuZXcgc2NvcGUgZmlsZXMgdG8gc2hvdyBmaWxlcyBvZiBncm91cHMgIGlzIHJlcGVhdGVkIGluIHZpZXcgZGlyZWN0aXZlXG5cdFx0XHQgJHNjb3BlLmdldEdyb3VwRmlsZXMgKHBhcmFtcy5ncm91cF9pZCk7XG5cdFx0IH1cbn0pO1xuJHNjb3BlLmluaXQoKTtcbn1dKTtcbnN5bmMuZGlyZWN0aXZlKCdteUdyb3VwcycsIFtcblx0J0dyb3VwJyxcblx0J1JlcG9ydCcsXG5cdCd1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24nLFxuXHRmdW5jdGlvbiBteUdyb3VwcyAoXG5cdFx0R3JvdXAsXG5cdFx0UmVwb3J0LFxuXHRcdHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbixcblx0XHROb3RpZmljYXRpb24pIHtcblx0cmV0dXJuIHtcblx0XHRwcmlvcml0eTogMTAsXG5cdFx0dGVtcGxhdGVVcmw6ICdBcHAvc2NyaXB0cy9qcy9kaXJlY3RpdmVzL2dyb3Vwcy5odG1sJyxcblx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHQgIGlkOiAnPXVzZXJJZCcsXG4gICAgICAgICAgZ3JvdXBzOiAnPScsXG4gICAgICAgICAgZm9sbG93ZXJzOiAnPScsXG4gICAgICAgICAgZW1pdHRlZDonPScsXG4gICAgICAgICAgc2hvd1Blb3BsZTonPScsXG4gICAgICAgICAgc2hvd0dyb3VwICAgOiAgJz0nLFxuICAgICAgICAgIGZpbGVzICAgOiAgJz0nLFxuXHQgIFx0XHRcdHNob3dCb3g6ICAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycykge1xuXHRcdFx0c2NvcGUuZGVsZXRlR3JvdXAgPSBmdW5jdGlvbihpZCl7XG5cdFx0XHRcdEdyb3VwLmRlbGV0ZShpZClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzKXtcblx0XHRcdFx0XHRcdHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbi5pbmZvKFwiR3JvdXAgZGVsZXRlZFwiKTtcblx0XHRcdFx0XHQgXHRzY29wZS4kZW1pdChcImdyb3VwRGVsZXRlZFwiLCAnZ3JvdXAgZGVsZXRlZCcpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbihlcnIpe1xuXHRcdFx0XHRcdFJlcG9ydC5zZW5kKCdkZWxldGUgZ3JvdXAgZXJyb3I6JytlcnIpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKXt9LCBmdW5jdGlvbigpe30pO1xuXHRcdFx0XHR9KVxuXHRcdFx0fTtcbiAgICAgIHNjb3BlLmNyZWF0ZUdyb3VwXHQ9XHRmdW5jdGlvbihuYW1lKXtcbiAgICAgICAgICBHcm91cC5jcmVhdGUobmFtZSlcbiAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uc3VjY2VzcyhcIkNyZWF0ZWQgbmV3IEdyb3VwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdyZWZyZXNoR3JvdXAnLG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuXHRcdFx0c2NvcGUuaW5pdEFkZFBlb3BsZSA9IGZ1bmN0aW9uKGdyb3VwaWQpe1xuXHRcdFx0XHRzY29wZS4kZW1pdChcImdyb3VwVG9iaW5kd2l0aFwiLCBncm91cGlkKTtcblx0XHRcdH07XG5cblx0XHRcdHNjb3BlLmFkZFBlb3BsZSA9IGZ1bmN0aW9uKHBhcmFtcyl7XG5cdFx0XHRcdHZhciBuZXdQYXJhbXMgPXtcblx0XHRcdFx0XHQnb3B0aW9uJzonYWRkTWVtYmVyJyxcblx0XHRcdFx0XHQndXNlcklkJzpwYXJhbXMudXNlcklkLFxuXHRcdFx0XHRcdCdncm91cElkJzpwYXJhbXMuZ3JvdXBJZFxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQocGFyYW1zKSl7XG5cdFx0XHRcdFx0Ly93b24ndCBoYXBwZW4hb3IgaWYgdGkgaGFwcGVuIHdlIHF1aXRcblx0XHRcdFx0fWVsc2V7XG5cblx0XHRcdFx0XHRHcm91cC5hZGRQZW9wbGUobmV3UGFyYW1zKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0XHQvL3JlZnJlc2ggZ3JvdXAgd2l0aCBuZXcgbWVtYmVyIHN0YXR1c1xuXHRcdFx0XHRcdFx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uc3VjY2VzcyhcIkFkZGVkIE1lbWJlciBpbiBncm91cC5cIik7XG4gICAgICAgICAgICAgIHNjb3BlLmluaXRBZGRQZW9wbGUocGFyYW1zLmdyb3VwSWQpO1xuICAgICAgICAgICAgICBzY29wZS4kZW1pdCgncmVmcmVzaEdyb3VwJywnJyk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3Isc3RhdHVzKXtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzY29wZS5yZW1vdmVQZW9wbGUgPSBmdW5jdGlvbihwYXJhbXMpe1xuXG5cdFx0XHRcdHZhciBuZXdQYXJhbXMgPXtcblx0XHRcdFx0XHQnb3B0aW9uJzoncmVtb3ZlTWVtYmVyJyxcblx0XHRcdFx0XHQndXNlcklkJzpwYXJhbXMudXNlcklkLFxuXHRcdFx0XHRcdCdncm91cElkJzpwYXJhbXMuZ3JvdXBJZFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYW5ndWxhci5pc1VuZGVmaW5lZChwYXJhbXMpKXtcblx0XHRcdFx0XHQvL3dvbid0IGhhcHBlbiFvciBpZiB0aSBoYXBwZW4gd2UgcXVpdCB0b28gYmFkIGhpZXJhY2h5IVxuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0R3JvdXAucmVtb3ZlUGVvcGxlKG5ld1BhcmFtcylcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0XHRcdFx0XHR1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uaW5mbyhcIlJlbW92ZWQgTWVtYmVyIGluIGdyb3VwLlwiKTtcblx0ICAgICAgICAgICAgc2NvcGUuaW5pdEFkZFBlb3BsZShwYXJhbXMuZ3JvdXBJZCk7XG5cdCAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdyZWZyZXNoR3JvdXAnLCcnKTtcbiAgICAgICAgICAgIFx0Y29uc29sZS5sb2cocmVzcG9uc2UpO1xuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uIChlcnJvcixzdGF0dXMpe1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRzY29wZS5yZW1vdmVGcm9tR3JvdXAgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRjb25zb2xlLmxvZygnd2UgY2FuIHJlbW92ZSBmaWxlIGluIGdyb3VwJyk7XG5cdFx0XHR9XG5cdFx0XHRzY29wZS5hZGRGaWxlVG9Hcm91cCA9IGZ1bmN0aW9uKHBhcmFtcyl7XG5cdFx0XHRcdHZhciBmaWxlT2JqID17XG5cdFx0XHRcdFx0J29wdGlvbic6J2FkZEZpbGVzJyxcblx0XHRcdFx0XHQnZmlsZUlkJzpwYXJhbXMuZmlsZUlkLFxuXHRcdFx0XHRcdCdncm91cElkJzpwYXJhbXMuZ3JvdXBJZFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0R3JvdXAuYWRkRmlsZVRvR3JvdXAoZmlsZU9iailcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0XHQvLyB1c2VySW50ZXJhY3Rpb25Ob3RpZmljYXRpb24uc3VjY2VzcyhcIkEgZmlsZSBpcyBhZGRlZCBpbiBncm91cFwiKTtcblx0XHRcdFx0fSxmdW5jdGlvbihlcnIpe1xuXHRcdFx0XHRcdHVzZXJJbnRlcmFjdGlvbk5vdGlmaWNhdGlvbi53YXJuKFwiU29tZSBlcnJvciBvY2N1cmVkIGR1cmluZyBhZGRpbmcgZmlsZVwiKTtcblx0XHRcdFx0fSlcblxuXHRcdFx0fVxuXHRcdFx0c2NvcGUuZmlsZXNJbkJveCA9IGZ1bmN0aW9uKGdyb3VwaWQpe1xuXHRcdFx0XHR2YXIgcGFyYW1zID17J2dyb3VwX2lkJzpncm91cGlkLCdvd25lcic6J2JveCd9O1xuXHRcdFx0XHRzY29wZS4kZW1pdCgnc2hvd09wdGlvbnMnLHBhcmFtcyk7XG5cblx0XHRcdH1cblx0XHRcdHNjb3BlLmZpbGVzSW5Hcm91cCA9IGZ1bmN0aW9uKGdyb3VwaWQpe1xuXG5cdFx0XHRcdHZhciBwYXJhbXMgPXsnZ3JvdXBfaWQnOmdyb3VwaWQsJ293bmVyJzonZ3JvdXAnfTtcblx0XHRcdFx0c2NvcGUuJGVtaXQoJ3Nob3dPcHRpb25zJyxwYXJhbXMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1dKTtcblxuc3luYy5zZXJ2aWNlKCdSZXBvcnQnLCBbZnVuY3Rpb24gUmVwb3J0ICgkaHR0cCwkcSwkcm9vdFNjb3BlKSB7XG5cdHRoaXMuc2VuZCA9IGZ1bmN0aW9uKGlzc3VlKXtcblx0XHR2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuXHRcdCRodHRwLnBvc3QoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL2lzc3VlcycsIGlzc3VlKVxuXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHJlcyl7XG5cdFx0XHRkaWZmZXJlZC5yZXNvbHZlKHJlcyk7XG5cdFx0fSlcblx0XHQuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG5cdFx0XHRkaWZmZXJlZC5yZWplY3QoZXJyKTtcblx0XHR9KVxuXHRcdHJldHVybiBkaWZmZXJlZC5wcm9taXNlO1xuXHR9XG5cdHJldHVybiB0aGlzO1xufV0pO1xuIiwiLyogZ2xvYmFsIHN5bmMgKi9cbnN5bmMuc2VydmljZSgnU2V0dGluZ3MnLCBbJyRodHRwJywnJHJvb3RTY29wZScsJyRxJyxmdW5jdGlvbiAoJGh0dHAsJHJvb3RTY29wZSwkcSkge1xuXHR0aGlzLmN1cnJlbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZGlmZmVyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL3NldHRpbmdzJylcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICBkaWZmZXJlZC5yZXNvbHZlKHJlc3ApO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGRpZmZlcmVkLnJlamVjdChlcnIpO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZGlmZmVyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XSk7XG5cbnN5bmMuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyJywgWyckc2NvcGUnLCdTZXR0aW5ncycsJyRsb2cnLCBmdW5jdGlvbiAoJHNjb3BlLFNldHRpbmdzLCRsb2cpIHtcblx0JHNjb3BlLmluaXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUubG9hZEN1cnJlbnRTZXR0aW5ncygpO1xuICAgIH1cbiAgICAgJHNjb3BlLmxvYWRDdXJyZW50U2V0dGluZ3MgPSBmdW5jdGlvbigpe1xuICAgICAgICAgU2V0dGluZ3MuY3VycmVudCgpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzID0gcmVzcDtcbiAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICAgJGxvZy5pbmZvKCdlcnJyb3IgcHJldmVudCBwcm9taXNlIHRvIGJlIGZ1bGxmaWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgfVxuICAgICAkc2NvcGUuaW5pdCgpO1xufV0pO1xuIiwiLyogZ2xvYmFsIHN5bmMgKi9cbnN5bmMuY29udHJvbGxlcignU2hhcmVDb250cm9sbGVyJywgW1xuXHQnJHNjb3BlJyxcblx0JyRyb290U2NvcGUnLFxuXHQnJHJvdXRlUGFyYW1zJyxcblx0JyRyb3V0ZScsXG5cdCckbG9nJyxcblx0JyR1aWJNb2RhbCcsXG5cdCdTaGFyZScsXG5cdCdVc2VyJyxcblx0ZnVuY3Rpb24gKFxuXHRcdCRzY29wZSxcblx0XHQkcm9vdFNjb3BlLFxuXHRcdCRyb3V0ZVBhcmFtcyxcblx0XHQkcm91dGUsXG5cdFx0JGxvZyxcblx0XHQkdWliTW9kYWwsXG5cdFx0U2hhcmUsXG5cdFx0VXNlclxuXHQpIFxue1xuXG5cdCRzY29wZS5zaGFyZSA9IGZ1bmN0aW9uKGZpbGVfaWQpe1xuXHRcdC8vIGFsZXJ0KCdoZXJlJyk7XG5cdFx0Y29uc29sZS5sb2coZmlsZV9pZCk7XG5cdH07XG59XG5dKTtcbiIsIi8qIGdsb2JhbCBzeW5jICovXG4vKiBnbG9iYWwgYW5ndWxhciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyXG5cbiAgICBzeW5jLmNvbnRyb2xsZXIoJ1VwbG9hZENvbnRyb2xsZXInLCBbJyRzY29wZScsICdGaWxlVXBsb2FkZXInLCckcm9vdFNjb3BlJywnRmlsZXMnLCBmdW5jdGlvbigkc2NvcGUsIEZpbGVVcGxvYWRlciwkcm9vdFNjb3BlLEZpbGVzKSB7XG4gICAgICAgIHZhciB1cGxvYWRlciA9ICRzY29wZS51cGxvYWRlciA9IG5ldyBGaWxlVXBsb2FkZXIoe1xuICAgICAgICAgICAgdXJsOiAkcm9vdFNjb3BlLmVuZFBvaW50KycvYXBpL3YxL3VwbG9hZCdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vRklMVEVSU1xuICAgICAgICB1cGxvYWRlci5maWx0ZXJzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogJ2N1c3RvbUZpbHRlcicsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24oaXRlbSAvKntGaWxlfEZpbGVMaWtlT2JqZWN0fSovLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIDwgMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvL0NBTExCQUNLU1xuICAgICAgICB1cGxvYWRlci5vbldoZW5BZGRpbmdGaWxlRmFpbGVkID0gZnVuY3Rpb24oaXRlbSAvKntGaWxlfEZpbGVMaWtlT2JqZWN0fSovLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25XaGVuQWRkaW5nRmlsZUZhaWxlZCcsIGl0ZW0sIGZpbHRlciwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIHVwbG9hZGVyLm9uQWZ0ZXJBZGRpbmdGaWxlID0gZnVuY3Rpb24oZmlsZUl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25BZnRlckFkZGluZ0ZpbGUnLCBmaWxlSXRlbSk7XG4gICAgICAgIH07XG4gICAgICAgIHVwbG9hZGVyLm9uQWZ0ZXJBZGRpbmdBbGwgPSBmdW5jdGlvbihhZGRlZEZpbGVJdGVtcykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvbkFmdGVyQWRkaW5nQWxsJywgYWRkZWRGaWxlSXRlbXMpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vbkJlZm9yZVVwbG9hZEl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uQmVmb3JlVXBsb2FkSXRlbScsIGl0ZW0pO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vblByb2dyZXNzSXRlbSA9IGZ1bmN0aW9uKGZpbGVJdGVtLCBwcm9ncmVzcykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvblByb2dyZXNzSXRlbScsIGZpbGVJdGVtLCBwcm9ncmVzcyk7XG4gICAgICAgIH07XG4gICAgICAgIHVwbG9hZGVyLm9uUHJvZ3Jlc3NBbGwgPSBmdW5jdGlvbihwcm9ncmVzcykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvblByb2dyZXNzQWxsJywgcHJvZ3Jlc3MpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vblN1Y2Nlc3NJdGVtID0gZnVuY3Rpb24oZmlsZUl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25TdWNjZXNzSXRlbScsIGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25FcnJvckl0ZW0gPSBmdW5jdGlvbihmaWxlSXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvbkVycm9ySXRlbScsIGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdXBsb2FkZXIub25DYW5jZWxJdGVtID0gZnVuY3Rpb24oZmlsZUl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnb25DYW5jZWxJdGVtJywgZmlsZUl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vbkNvbXBsZXRlSXRlbSA9IGZ1bmN0aW9uKGZpbGVJdGVtLCByZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ29uQ29tcGxldGVJdGVtJywgZmlsZUl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xuICAgICAgICB9O1xuICAgICAgICB1cGxvYWRlci5vbkNvbXBsZXRlQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgRmlsZXMuZ2V0Qm94RmlsZXMoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzIFx0PVx0cmVzO1xuXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdvbkNvbXBsZXRlQWxsJyk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUuaW5mbygndXBsb2FkZXInLCB1cGxvYWRlcik7XG4gICAgfV0pO1xuIiwic3luYy5zZXJ2aWNlKCd1cmxTaG9ydGVuZXInLFtmdW5jdGlvbigpe1xuICB0aGlzLm1ha2VTaG9ydCA9IGZ1bmN0aW9uKGxvbmdVcmwpe1xuICAgIHJldHVybiBsb25nVXJsO1xuICB9O1xuICAvLyB0aGlzLm1ha2VTaG9ydCA9IGZ1bmN0aW9uKGxvbmdVcmwpXG4gIC8vIHtcbiAgLy8gICAvLyAgdmFyIGxvbmdVcmw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb25ndXJsXCIpLnZhbHVlO1xuICAvLyAgICAgdmFyIHJlcXVlc3QgPSBnYXBpLmNsaWVudC51cmxzaG9ydGVuZXIudXJsLmluc2VydCh7XG4gIC8vICAgICAncmVzb3VyY2UnOiB7XG4gIC8vICAgICAgICdsb25nVXJsJzogbG9uZ1VybFxuICAvLyBcdH1cbiAgLy8gICAgIH0pO1xuICAvLyAgICAgcmVxdWVzdC5leGVjdXRlKGZ1bmN0aW9uKHJlc3BvbnNlKVxuICAvLyBcdHtcbiAgLy9cbiAgLy8gXHRcdGlmKHJlc3BvbnNlLmlkICE9IG51bGwpXG4gIC8vIFx0XHR7XG4gIC8vIFx0XHRcdHN0ciA9XCI8Yj5Mb25nIFVSTDo8L2I+XCIrbG9uZ1VybCtcIjxicj5cIjtcbiAgLy8gXHRcdFx0c3RyICs9XCI8Yj55b3VyIEZpbGUgaXM6PC9iPiA8YSBocmVmPSdcIityZXNwb25zZS5pZCtcIic+XCIrcmVzcG9uc2UuaWQrXCI8L2E+PGJyPlwiO1xuICAvLyBcdFx0XHRyZXR1cm4gc3RyO1xuICAvLyBcdFx0fVxuICAvLyBcdFx0ZWxzZVxuICAvLyBcdFx0e1xuICAvLyBcdFx0XHRjb25zb2xlLmxvZyhcImVycm9yOiB1bmFibGUgdG8gY3JlYXRlIHNob3J0IHVybFwiKTtcbiAgLy8gXHRcdH1cbiAgLy9cbiAgLy8gICAgIH0pO1xuICAvLyAgfVxuICAvL1xuICAvLyB0aGlzLmdldFNob3J0SW5mbyA9IGZ1bmN0aW9uKClcbiAgLy8gIHtcbiAgLy8gICAgICB2YXIgc2hvcnRVcmw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG9ydHVybFwiKS52YWx1ZTtcbiAgLy9cbiAgLy8gICAgICB2YXIgcmVxdWVzdCA9IGdhcGkuY2xpZW50LnVybHNob3J0ZW5lci51cmwuZ2V0KHtcbiAgLy8gICAgICAgICdzaG9ydFVybCc6IHNob3J0VXJsLFxuICAvLyAgXHQgICAgICdwcm9qZWN0aW9uJzonRlVMTCdcbiAgLy8gICAgICB9KTtcbiAgLy8gICAgICByZXF1ZXN0LmV4ZWN1dGUoZnVuY3Rpb24ocmVzcG9uc2UpXG4gIC8vICBcdHtcbiAgLy8gIFx0XHRpZihyZXNwb25zZS5sb25nVXJsIT0gbnVsbClcbiAgLy8gIFx0XHR7XG4gIC8vICBcdFx0XHRzdHIgPVwiPGI+TG9uZyBVUkw6PC9iPlwiK3Jlc3BvbnNlLmxvbmdVcmwrXCI8YnI+XCI7XG4gIC8vICBcdFx0XHRzdHIgKz1cIjxiPkNyZWF0ZSBPbjo8L2I+XCIrcmVzcG9uc2UuY3JlYXRlZCtcIjxicj5cIjtcbiAgLy8gIFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmlubmVySFRNTCA9IHN0cjtcbiAgLy8gIFx0XHR9XG4gIC8vICBcdFx0ZWxzZVxuICAvLyAgXHRcdHtcbiAgLy8gIFx0XHRcdGNvbnNvbGUubG9nKFwiZXJyb3I6IHVuYWJsZSB0byBnZXQgVVJMIGluZm9ybWF0aW9uXCIpO1xuICAvLyAgXHRcdH1cbiAgLy9cbiAgLy8gICAgICB9KTtcbiAgLy9cbiAgLy8gIH1cbiAgLy8gIGZ1bmN0aW9uIGxvYWQoKVxuICAvLyAge1xuICAvLyAgXHRnYXBpLmNsaWVudC5zZXRBcGlLZXkoJ0FJemFTeURTbjd6N1YxZjZIM3lYcmdBbGdWR3c1MmRTRW1xQUxJYycpOyAvL2dldCB5b3VyIG93bm4gQnJvd3NlciBBUEkgS0VZXG4gIC8vICBcdGdhcGkuY2xpZW50LmxvYWQoJ3VybHNob3J0ZW5lcicsICd2MScsZnVuY3Rpb24oKXt9KTtcbiAgLy8gIH1cbiAgLy8gIHdpbmRvdy5vbmxvYWQgPSBsb2FkO1xufV0pO1xuIiwiLy9BdXRob3IgTXVyYWdpamltYW5hIFJpY2hhcmQgc3RyaW11cEBnbWFpbC5jb20gYmVhc3RhcjQ1N0BnbWFpbC5jb21cblxuICBzeW5jLmNvbnRyb2xsZXIoJ01lc3NhZ2VDb250cm9sbGVyJywgZnVuY3Rpb24gKCRodHRwLCRzY29wZSwkcSwkcm9vdFNjb3BlKSB7XG4gICAgICAgJC5hamF4U2V0dXAoe1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdYLUNTUkYtVE9LRU4nOiAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgXG4gICAgICAgICAkc2NvcGUubmFtZT1cIk11cmFnaWppbWFuYVwiO1xuICAgICAgICAgdmFyIHBvc3RzPSRodHRwLmdldCgkcm9vdFNjb3BlLmVuZFBvaW50ICsgJy9hcGkvdjEvcG9zdCcpLFxuICAgICAgICAgICAgIGluc3RpdHV0aW9ucz0kaHR0cC5nZXQoJHJvb3RTY29wZS5lbmRQb2ludCArICcvYXBpL3YxL3Bvc3QnKTtcblxuICAgICAgICAgICRxLmFsbChbcG9zdHMsaW5zdGl0dXRpb25zXSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSBbXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXN1bHQsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHRtcC5wdXNoKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odG1wUmVzdWx0KSB7XG4gICAgICAgICAgICAgIC8vIHBvc3RzPXRtcFJlc3VsdDtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYW5ndWxhci50b0pzb24odG1wUmVzdWx0WzBdLCB0cnVlKSk7XG4gICAgICAgICAgICAkc2NvcGUucG9zdHMgPSB0bXBSZXN1bHRbMF07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAkKCcucG9zdC1pbicpLmF0d2hvKHtcbiAgICAgICAgICAgIGF0OiBcIkBcIixcbiAgICAgICAgICAgIGRhdGE6WydQZXRlcicsICdUb20nLCAnQW5uZSddLFxuXG4gICAgICAgICB9KTtcblxuICB9KTtcbiIsIlxuc3luYy5jb250cm9sbGVyKFwiVHV0b3JpYWxNb2RhbFwiLCBmdW5jdGlvbigkc2NvcGUpIHtcblxuICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSB0cnVlO1xuICB9O1xuICAkc2NvcGUub2sgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsID0gZmFsc2U7XG4gIH07XG5cbiAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSBmYWxzZTtcbiAgfTtcblxufSk7XG5cbnN5bmMuY29udHJvbGxlcihcIlN0cmltaW5Nb2RhbFwiLCBmdW5jdGlvbigkc2NvcGUpIHtcblxuICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSB0cnVlO1xuICB9O1xuICAkc2NvcGUub2sgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUuc2hvd01vZGFsID0gZmFsc2U7XG4gIH07XG5cbiAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS5zaG93TW9kYWwgPSBmYWxzZTtcbiAgfTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
